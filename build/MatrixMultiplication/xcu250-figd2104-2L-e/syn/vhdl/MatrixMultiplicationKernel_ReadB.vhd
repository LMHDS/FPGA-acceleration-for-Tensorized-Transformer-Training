-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ReadB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    memory : IN STD_LOGIC_VECTOR (63 downto 0);
    bMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    bMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    bMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    bMemory_full_n : IN STD_LOGIC;
    bMemory_write : OUT STD_LOGIC;
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    size_k : IN STD_LOGIC_VECTOR (31 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    size_n_c4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_n_c4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c4_full_n : IN STD_LOGIC;
    size_n_c4_write : OUT STD_LOGIC;
    size_k_c7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_k_c7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c7_full_n : IN STD_LOGIC;
    size_k_c7_write : OUT STD_LOGIC;
    size_m_c12_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_m_c12_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c12_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c12_full_n : IN STD_LOGIC;
    size_m_c12_write : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiplicationKernel_ReadB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv33_1FF : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal size_n_c4_blk_n : STD_LOGIC;
    signal size_k_c7_blk_n : STD_LOGIC;
    signal size_m_c12_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_reg_225 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln4_reg_230 : STD_LOGIC_VECTOR (23 downto 0);
    signal div_i_i_reg_235 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_194_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_reg_245 : STD_LOGIC_VECTOR (36 downto 0);
    signal bound4_fu_136_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound4_reg_250 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound18_fu_140_p2 : STD_LOGIC_VECTOR (82 downto 0);
    signal bound18_reg_255 : STD_LOGIC_VECTOR (82 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_idle : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_ready : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_write : STD_LOGIC;
    signal grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal size_m_c12_write_local : STD_LOGIC;
    signal size_k_c7_write_local : STD_LOGIC;
    signal size_n_c4_write_local : STD_LOGIC;
    signal bound4_fu_136_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound4_fu_136_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal bound18_fu_140_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound18_fu_140_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln111_fu_144_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln111_fu_148_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln116_fu_164_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln116_fu_168_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal bound18_fu_140_p00 : STD_LOGIC_VECTOR (82 downto 0);
    signal bound18_fu_140_p10 : STD_LOGIC_VECTOR (82 downto 0);
    signal bound4_fu_136_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound4_fu_136_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        bMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        bMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        bMemory_full_n : IN STD_LOGIC;
        bMemory_write : OUT STD_LOGIC;
        bound18 : IN STD_LOGIC_VECTOR (82 downto 0);
        bound4 : IN STD_LOGIC_VECTOR (59 downto 0);
        size_k : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (36 downto 0);
        empty : IN STD_LOGIC_VECTOR (27 downto 0);
        memory : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_24ns_37ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_24ns_60ns_83_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        dout : OUT STD_LOGIC_VECTOR (82 downto 0) );
    end component;



begin
    grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122 : component MatrixMultiplicationKernel_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start,
        ap_done => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done,
        ap_idle => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_idle,
        ap_ready => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_ready,
        m_axi_gmem1_AWVALID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM => m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        bMemory_din => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_din,
        bMemory_num_data_valid => ap_const_lv7_0,
        bMemory_fifo_cap => ap_const_lv7_0,
        bMemory_full_n => bMemory_full_n,
        bMemory_write => grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_write,
        bound18 => bound18_reg_255,
        bound4 => bound4_reg_250,
        size_k => size_k,
        bound => tmp_reg_245,
        empty => div_i_i_reg_235,
        memory => memory);

    mul_24ns_37ns_60_1_1_U110 : component MatrixMultiplicationKernel_mul_24ns_37ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 37,
        dout_WIDTH => 60)
    port map (
        din0 => bound4_fu_136_p0,
        din1 => bound4_fu_136_p1,
        dout => bound4_fu_136_p2);

    mul_24ns_60ns_83_1_1_U111 : component MatrixMultiplicationKernel_mul_24ns_60ns_83_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 60,
        dout_WIDTH => 83)
    port map (
        din0 => bound18_fu_140_p0,
        din1 => bound18_fu_140_p1,
        dout => bound18_fu_140_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_ready = ap_const_logic_1)) then 
                    grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound18_reg_255 <= bound18_fu_140_p2;
                bound4_reg_250 <= bound4_fu_136_p2;
                    tmp_reg_245(36 downto 5) <= tmp_fu_194_p3(36 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                div_i_i_reg_235 <= size_m(31 downto 4);
                trunc_ln4_reg_230 <= add_ln116_fu_168_p2(32 downto 9);
                trunc_ln_reg_225 <= add_ln111_fu_148_p2(32 downto 9);
            end if;
        end if;
    end process;
    tmp_reg_245(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln111_fu_148_p2 <= std_logic_vector(unsigned(zext_ln111_fu_144_p1) + unsigned(ap_const_lv33_1FF));
    add_ln116_fu_168_p2 <= std_logic_vector(unsigned(zext_ln116_fu_164_p1) + unsigned(ap_const_lv33_1FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done)
    begin
        if ((grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, size_n_c4_full_n, size_k_c7_full_n, size_m_c12_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (size_m_c12_full_n = ap_const_logic_0) or (size_k_c7_full_n = ap_const_logic_0) or (size_n_c4_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bMemory_din <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_din;

    bMemory_write_assign_proc : process(grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bMemory_write <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_bMemory_write;
        else 
            bMemory_write <= ap_const_logic_0;
        end if; 
    end process;

    bound18_fu_140_p0 <= bound18_fu_140_p00(24 - 1 downto 0);
    bound18_fu_140_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_225),83));
    bound18_fu_140_p1 <= bound18_fu_140_p10(60 - 1 downto 0);
    bound18_fu_140_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_136_p2),83));
    bound4_fu_136_p0 <= bound4_fu_136_p00(24 - 1 downto 0);
    bound4_fu_136_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_reg_230),60));
    bound4_fu_136_p1 <= bound4_fu_136_p10(37 - 1 downto 0);
    bound4_fu_136_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_194_p3),60));
    grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_ARADDR <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARUSER;

    m_axi_gmem1_ARVALID_assign_proc : process(grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARVALID, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem1_ARVALID <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_ARVALID;
        else 
            m_axi_gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_RREADY, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem1_RREADY <= grp_ReadB_Pipeline_ReadB_OuterTile_N_ReadB_OuterTile_M_ReadB_K_ReadB_BufferB_M1_fu_122_m_axi_gmem1_RREADY;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv64_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    size_k_c7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_k_c7_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_c7_blk_n <= size_k_c7_full_n;
        else 
            size_k_c7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_k_c7_din <= size_k;
    size_k_c7_write <= size_k_c7_write_local;

    size_k_c7_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_k_c7_write_local <= ap_const_logic_1;
        else 
            size_k_c7_write_local <= ap_const_logic_0;
        end if; 
    end process;


    size_m_c12_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_m_c12_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c12_blk_n <= size_m_c12_full_n;
        else 
            size_m_c12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_m_c12_din <= size_m;
    size_m_c12_write <= size_m_c12_write_local;

    size_m_c12_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_m_c12_write_local <= ap_const_logic_1;
        else 
            size_m_c12_write_local <= ap_const_logic_0;
        end if; 
    end process;


    size_n_c4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_n_c4_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c4_blk_n <= size_n_c4_full_n;
        else 
            size_n_c4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_n_c4_din <= size_n;
    size_n_c4_write <= size_n_c4_write_local;

    size_n_c4_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_n_c4_write_local <= ap_const_logic_1;
        else 
            size_n_c4_write_local <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_194_p3 <= (size_k & ap_const_lv5_0);
    zext_ln111_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_n),33));
    zext_ln116_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_m),33));
end behav;
