-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ProcessingElement_5_Pipeline_Pipeline_N_Pipeline_M is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aPipes_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aPipes_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_4_empty_n : IN STD_LOGIC;
    aPipes_4_read : OUT STD_LOGIC;
    aPipes_5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aPipes_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_5_full_n : IN STD_LOGIC;
    aPipes_5_write : OUT STD_LOGIC;
    bPipes_4_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bPipes_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_4_empty_n : IN STD_LOGIC;
    bPipes_4_read : OUT STD_LOGIC;
    bPipes_5_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bPipes_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_5_full_n : IN STD_LOGIC;
    bPipes_5_write : OUT STD_LOGIC;
    m0 : IN STD_LOGIC_VECTOR (22 downto 0);
    cBuffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce0 : OUT STD_LOGIC;
    cBuffer_we0 : OUT STD_LOGIC;
    cBuffer_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    cBuffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce1 : OUT STD_LOGIC;
    cBuffer_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    cmp111 : IN STD_LOGIC_VECTOR (0 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    cond90 : IN STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce0 : OUT STD_LOGIC;
    aBuffer_we0 : OUT STD_LOGIC;
    aBuffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    aBuffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce1 : OUT STD_LOGIC;
    aBuffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (26 downto 0);
    cond : IN STD_LOGIC_VECTOR (4 downto 0);
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    brmerge282 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ProcessingElement_5_Pipeline_Pipeline_N_Pipeline_M is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln80_5_reg_1119 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op64_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bPipes_4_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bPipes_5_blk_n : STD_LOGIC;
    signal aPipes_4_blk_n : STD_LOGIC;
    signal aPipes_5_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln67_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1113 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1113_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1113_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln80_5_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add91_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add91_reg_1127 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_180_fu_498_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_180_reg_1132 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_180_reg_1132_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inBoundsN_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1137_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cBuffer_addr_reg_1154 : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1154_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1154_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1154_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1154_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inBoundsM_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1160_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1160_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1160_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBoundsM_36_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_36_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_36_reg_1182_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_36_reg_1182_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_36_reg_1182_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_37_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_37_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_37_reg_1192_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_37_reg_1192_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_37_reg_1192_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_38_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_38_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_38_reg_1202_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_38_reg_1202_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_38_reg_1202_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_39_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_39_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_39_reg_1212_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_39_reg_1212_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_39_reg_1212_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_40_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_40_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_40_reg_1222_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_40_reg_1222_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_40_reg_1222_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_41_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_41_reg_1232 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_41_reg_1232_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_41_reg_1232_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_41_reg_1232_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_42_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_42_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_42_reg_1242_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_42_reg_1242_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_42_reg_1242_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_131_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_6_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_6_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_132_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_133_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_134_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_135_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_136_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_137_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_138_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_66_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_66_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_66_reg_1332_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_68_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_68_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_68_reg_1338_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_70_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_70_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_70_reg_1344_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_72_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_72_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_72_reg_1350_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_74_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_74_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_74_reg_1356_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_76_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_76_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_76_reg_1362_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_78_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_78_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_78_reg_1368_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_80_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_80_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_80_reg_1374_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_fu_905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_29_fu_916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_29_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_30_fu_927_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_30_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_31_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_31_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_32_fu_949_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_32_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_33_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_33_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_34_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_34_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_35_fu_982_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_35_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_cast_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add91_cast_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add115_cast_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_fu_156 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln67_fu_448_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_m1_load : STD_LOGIC_VECTOR (6 downto 0);
    signal n1_fu_160 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln64_5_fu_473_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_fu_164 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln64_fu_375_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (10 downto 0);
    signal aPipes_4_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal aPipes_5_write_local : STD_LOGIC;
    signal bPipes_4_read_local : STD_LOGIC;
    signal bPipes_5_write_local : STD_LOGIC;
    signal aBuffer_we0_local : STD_LOGIC;
    signal aBuffer_ce0_local : STD_LOGIC;
    signal aBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_we0_local : STD_LOGIC;
    signal tmp_84_fu_1013_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal cBuffer_ce0_local : STD_LOGIC;
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_398_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_414_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln82_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_5_fu_467_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_fu_480_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_fu_489_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add106_cast_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul6_fu_526_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_fu_533_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add115_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_547_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add5_fu_550_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_585_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_599_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_s_fu_614_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_11_fu_643_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_657_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_12_fu_672_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_686_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_13_fu_701_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_715_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_14_fu_730_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_744_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_15_fu_759_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_773_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cPrev_2_fu_788_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal inBounds_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_36_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_37_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_38_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_39_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_40_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_41_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_42_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_35_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_34_fu_1007_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_33_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_32_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_31_fu_998_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_30_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_29_fu_992_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_291_ce : STD_LOGIC;
    signal grp_fu_295_ce : STD_LOGIC;
    signal grp_fu_299_ce : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_311_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal grp_fu_319_ce : STD_LOGIC;
    signal grp_fu_323_ce : STD_LOGIC;
    signal grp_fu_327_ce : STD_LOGIC;
    signal grp_fu_331_ce : STD_LOGIC;
    signal grp_fu_335_ce : STD_LOGIC;
    signal grp_fu_339_ce : STD_LOGIC;
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_347_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op66_store_state2 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_71 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_77 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_3_full_dsp_1_U351 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => res_131_reg_1252,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U352 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        din1 => res_132_reg_1262,
        ce => grp_fu_291_ce,
        dout => grp_fu_291_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U353 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => res_133_reg_1272,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U354 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_299_p0,
        din1 => res_134_reg_1282,
        ce => grp_fu_299_ce,
        dout => grp_fu_299_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U355 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => res_135_reg_1292,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U356 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => res_136_reg_1302,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U357 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => res_137_reg_1312,
        ce => grp_fu_311_ce,
        dout => grp_fu_311_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U358 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => res_138_reg_1322,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U359 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_319_p1,
        ce => grp_fu_319_ce,
        dout => grp_fu_319_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U360 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_323_p1,
        ce => grp_fu_323_ce,
        dout => grp_fu_323_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U361 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_327_p1,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U362 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_331_p1,
        ce => grp_fu_331_ce,
        dout => grp_fu_331_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U363 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_335_p1,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U364 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_339_p1,
        ce => grp_fu_339_ce,
        dout => grp_fu_339_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U365 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_343_p1,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U366 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_564_p1,
        din1 => grp_fu_347_p1,
        ce => grp_fu_347_ce,
        dout => grp_fu_347_p2);

    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten6_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_369_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_164 <= add_ln64_fu_375_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_164 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_369_p2 = ap_const_lv1_0))) then 
                    m1_fu_156 <= add_ln67_fu_448_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_156 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n1_fu_160 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    n1_fu_160 <= select_ln64_5_fu_473_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add91_reg_1127 <= add91_fu_484_p2;
                and_ln80_5_reg_1119 <= and_ln80_5_fu_436_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_180_reg_1132 <= empty_180_fu_498_p1;
                icmp_ln67_reg_1108 <= icmp_ln67_fu_384_p2;
                icmp_ln85_reg_1123 <= icmp_ln85_fu_442_p2;
                inBoundsN_reg_1137 <= inBoundsN_fu_512_p2;
                select_ln64_reg_1113 <= select_ln64_fu_390_p3;
                select_ln64_reg_1113_pp0_iter1_reg <= select_ln64_reg_1113;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                bitcast_ln32_66_reg_1332 <= bitcast_ln32_66_fu_869_p1;
                bitcast_ln32_66_reg_1332_pp0_iter6_reg <= bitcast_ln32_66_reg_1332;
                bitcast_ln32_68_reg_1338 <= bitcast_ln32_68_fu_873_p1;
                bitcast_ln32_68_reg_1338_pp0_iter6_reg <= bitcast_ln32_68_reg_1338;
                bitcast_ln32_70_reg_1344 <= bitcast_ln32_70_fu_877_p1;
                bitcast_ln32_70_reg_1344_pp0_iter6_reg <= bitcast_ln32_70_reg_1344;
                bitcast_ln32_72_reg_1350 <= bitcast_ln32_72_fu_881_p1;
                bitcast_ln32_72_reg_1350_pp0_iter6_reg <= bitcast_ln32_72_reg_1350;
                bitcast_ln32_74_reg_1356 <= bitcast_ln32_74_fu_885_p1;
                bitcast_ln32_74_reg_1356_pp0_iter6_reg <= bitcast_ln32_74_reg_1356;
                bitcast_ln32_76_reg_1362 <= bitcast_ln32_76_fu_889_p1;
                bitcast_ln32_76_reg_1362_pp0_iter6_reg <= bitcast_ln32_76_reg_1362;
                bitcast_ln32_78_reg_1368 <= bitcast_ln32_78_fu_893_p1;
                bitcast_ln32_78_reg_1368_pp0_iter6_reg <= bitcast_ln32_78_reg_1368;
                bitcast_ln32_80_reg_1374 <= bitcast_ln32_80_fu_897_p1;
                bitcast_ln32_80_reg_1374_pp0_iter6_reg <= bitcast_ln32_80_reg_1374;
                cBuffer_addr_reg_1154 <= add115_cast_fu_542_p1(10 - 1 downto 0);
                cBuffer_addr_reg_1154_pp0_iter4_reg <= cBuffer_addr_reg_1154;
                cBuffer_addr_reg_1154_pp0_iter5_reg <= cBuffer_addr_reg_1154_pp0_iter4_reg;
                cBuffer_addr_reg_1154_pp0_iter6_reg <= cBuffer_addr_reg_1154_pp0_iter5_reg;
                cBuffer_addr_reg_1154_pp0_iter7_reg <= cBuffer_addr_reg_1154_pp0_iter6_reg;
                empty_180_reg_1132_pp0_iter2_reg <= empty_180_reg_1132;
                inBoundsM_36_reg_1182 <= inBoundsM_36_fu_594_p2;
                inBoundsM_36_reg_1182_pp0_iter4_reg <= inBoundsM_36_reg_1182;
                inBoundsM_36_reg_1182_pp0_iter5_reg <= inBoundsM_36_reg_1182_pp0_iter4_reg;
                inBoundsM_36_reg_1182_pp0_iter6_reg <= inBoundsM_36_reg_1182_pp0_iter5_reg;
                inBoundsM_37_reg_1192 <= inBoundsM_37_fu_623_p2;
                inBoundsM_37_reg_1192_pp0_iter4_reg <= inBoundsM_37_reg_1192;
                inBoundsM_37_reg_1192_pp0_iter5_reg <= inBoundsM_37_reg_1192_pp0_iter4_reg;
                inBoundsM_37_reg_1192_pp0_iter6_reg <= inBoundsM_37_reg_1192_pp0_iter5_reg;
                inBoundsM_38_reg_1202 <= inBoundsM_38_fu_652_p2;
                inBoundsM_38_reg_1202_pp0_iter4_reg <= inBoundsM_38_reg_1202;
                inBoundsM_38_reg_1202_pp0_iter5_reg <= inBoundsM_38_reg_1202_pp0_iter4_reg;
                inBoundsM_38_reg_1202_pp0_iter6_reg <= inBoundsM_38_reg_1202_pp0_iter5_reg;
                inBoundsM_39_reg_1212 <= inBoundsM_39_fu_681_p2;
                inBoundsM_39_reg_1212_pp0_iter4_reg <= inBoundsM_39_reg_1212;
                inBoundsM_39_reg_1212_pp0_iter5_reg <= inBoundsM_39_reg_1212_pp0_iter4_reg;
                inBoundsM_39_reg_1212_pp0_iter6_reg <= inBoundsM_39_reg_1212_pp0_iter5_reg;
                inBoundsM_40_reg_1222 <= inBoundsM_40_fu_710_p2;
                inBoundsM_40_reg_1222_pp0_iter4_reg <= inBoundsM_40_reg_1222;
                inBoundsM_40_reg_1222_pp0_iter5_reg <= inBoundsM_40_reg_1222_pp0_iter4_reg;
                inBoundsM_40_reg_1222_pp0_iter6_reg <= inBoundsM_40_reg_1222_pp0_iter5_reg;
                inBoundsM_41_reg_1232 <= inBoundsM_41_fu_739_p2;
                inBoundsM_41_reg_1232_pp0_iter4_reg <= inBoundsM_41_reg_1232;
                inBoundsM_41_reg_1232_pp0_iter5_reg <= inBoundsM_41_reg_1232_pp0_iter4_reg;
                inBoundsM_41_reg_1232_pp0_iter6_reg <= inBoundsM_41_reg_1232_pp0_iter5_reg;
                inBoundsM_42_reg_1242 <= inBoundsM_42_fu_768_p2;
                inBoundsM_42_reg_1242_pp0_iter4_reg <= inBoundsM_42_reg_1242;
                inBoundsM_42_reg_1242_pp0_iter5_reg <= inBoundsM_42_reg_1242_pp0_iter4_reg;
                inBoundsM_42_reg_1242_pp0_iter6_reg <= inBoundsM_42_reg_1242_pp0_iter5_reg;
                inBoundsM_reg_1160 <= inBoundsM_fu_559_p2;
                inBoundsM_reg_1160_pp0_iter4_reg <= inBoundsM_reg_1160;
                inBoundsM_reg_1160_pp0_iter5_reg <= inBoundsM_reg_1160_pp0_iter4_reg;
                inBoundsM_reg_1160_pp0_iter6_reg <= inBoundsM_reg_1160_pp0_iter5_reg;
                inBoundsN_reg_1137_pp0_iter2_reg <= inBoundsN_reg_1137;
                inBoundsN_reg_1137_pp0_iter3_reg <= inBoundsN_reg_1137_pp0_iter2_reg;
                inBoundsN_reg_1137_pp0_iter4_reg <= inBoundsN_reg_1137_pp0_iter3_reg;
                inBoundsN_reg_1137_pp0_iter5_reg <= inBoundsN_reg_1137_pp0_iter4_reg;
                inBoundsN_reg_1137_pp0_iter6_reg <= inBoundsN_reg_1137_pp0_iter5_reg;
                res_131_reg_1252 <= grp_fu_319_p2;
                res_132_reg_1262 <= grp_fu_323_p2;
                res_133_reg_1272 <= grp_fu_327_p2;
                res_134_reg_1282 <= grp_fu_331_p2;
                res_135_reg_1292 <= grp_fu_335_p2;
                res_136_reg_1302 <= grp_fu_339_p2;
                res_137_reg_1312 <= grp_fu_343_p2;
                res_138_reg_1322 <= grp_fu_347_p2;
                select_ln296_29_reg_1385 <= select_ln296_29_fu_916_p3;
                select_ln296_30_reg_1390 <= select_ln296_30_fu_927_p3;
                select_ln296_31_reg_1395 <= select_ln296_31_fu_938_p3;
                select_ln296_32_reg_1400 <= select_ln296_32_fu_949_p3;
                select_ln296_33_reg_1405 <= select_ln296_33_fu_960_p3;
                select_ln296_34_reg_1410 <= select_ln296_34_fu_971_p3;
                select_ln296_35_reg_1415 <= select_ln296_35_fu_982_p3;
                select_ln296_reg_1380 <= select_ln296_fu_905_p3;
                select_ln64_reg_1113_pp0_iter2_reg <= select_ln64_reg_1113_pp0_iter1_reg;
                tmp_71_reg_1267 <= cPrev_2_fu_788_p3(63 downto 32);
                tmp_73_reg_1277 <= cPrev_2_fu_788_p3(95 downto 64);
                tmp_75_reg_1287 <= cPrev_2_fu_788_p3(127 downto 96);
                tmp_77_reg_1297 <= cPrev_2_fu_788_p3(159 downto 128);
                tmp_79_reg_1307 <= cPrev_2_fu_788_p3(191 downto 160);
                tmp_81_reg_1317 <= cPrev_2_fu_788_p3(223 downto 192);
                tmp_83_reg_1327 <= cPrev_2_fu_788_p3(255 downto 224);
                trunc_ln170_6_reg_1257 <= trunc_ln170_6_fu_795_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    aBuffer_address0 <= add_cast_fu_507_p1(5 - 1 downto 0);
    aBuffer_address1 <= add91_cast_fu_522_p1(5 - 1 downto 0);
    aBuffer_ce0 <= aBuffer_ce0_local;

    aBuffer_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce0_local <= ap_const_logic_1;
        else 
            aBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_ce1 <= aBuffer_ce1_local;

    aBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce1_local <= ap_const_logic_1;
        else 
            aBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_d0 <= aPipes_4_dout;
    aBuffer_we0 <= aBuffer_we0_local;

    aBuffer_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln80_5_reg_1119, icmp_ln85_reg_1123, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln85_reg_1123 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_5_reg_1119) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_we0_local <= ap_const_logic_1;
        else 
            aBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aPipes_4_empty_n, and_ln80_5_reg_1119, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln80_5_reg_1119) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_4_blk_n <= aPipes_4_empty_n;
        else 
            aPipes_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_4_read <= aPipes_4_read_local;

    aPipes_4_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln80_5_reg_1119, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln80_5_reg_1119) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_4_read_local <= ap_const_logic_1;
        else 
            aPipes_4_read_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aPipes_5_full_n, ap_predicate_op64_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op64_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_5_blk_n <= aPipes_5_full_n;
        else 
            aPipes_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_5_din <= aPipes_4_dout;
    aPipes_5_write <= aPipes_5_write_local;

    aPipes_5_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op64_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op64_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_5_write_local <= ap_const_logic_1;
        else 
            aPipes_5_write_local <= ap_const_logic_0;
        end if; 
    end process;

    add106_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add106_fu_489_p2),32));
    add106_fu_489_p2 <= std_logic_vector(unsigned(mul) + unsigned(zext_ln64_fu_480_p1));
    add115_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add115_fu_536_p2),64));
    add115_fu_536_p2 <= std_logic_vector(unsigned(mul6_fu_526_p3) + unsigned(zext_ln67_fu_533_p1));
    add5_fu_550_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_0);
    add91_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add91_reg_1127),64));
    add91_fu_484_p2 <= std_logic_vector(unsigned(select_ln64_5_fu_473_p3) + unsigned(cond90));
    add_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_502_p2),64));
    add_fu_502_p2 <= std_logic_vector(unsigned(select_ln64_5_fu_473_p3) + unsigned(cond));
    add_ln64_5_fu_467_p2 <= std_logic_vector(unsigned(n1_fu_160) + unsigned(ap_const_lv5_1));
    add_ln64_fu_375_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv11_1));
    add_ln67_fu_448_p2 <= std_logic_vector(unsigned(select_ln64_fu_390_p3) + unsigned(ap_const_lv7_1));
    and_ln80_5_fu_436_p2 <= (icmp_ln83_fu_424_p2 and and_ln80_fu_430_p2);
    and_ln80_fu_430_p2 <= (icmp_ln82_fu_408_p2 and brmerge282);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aPipes_4_empty_n, and_ln80_5_reg_1119, aPipes_5_full_n, ap_predicate_op64_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op64_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = aPipes_5_full_n)) or ((ap_const_lv1_1 = and_ln80_5_reg_1119) and (ap_const_logic_0 = aPipes_4_empty_n)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(bPipes_4_empty_n, bPipes_5_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((bPipes_5_full_n = ap_const_logic_0) or (bPipes_4_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln64_fu_369_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_369_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_66_assign_proc : process(ap_predicate_op66_store_state2)
    begin
                ap_enable_operation_66 <= (ap_predicate_op66_store_state2 = ap_const_boolean_1);
    end process;

        ap_enable_operation_71 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_77 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op64_write_state2_assign_proc : process(and_ln80_5_reg_1119, icmp_ln85_reg_1123)
    begin
                ap_predicate_op64_write_state2 <= ((icmp_ln85_reg_1123 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_5_reg_1119));
    end process;


    ap_predicate_op66_store_state2_assign_proc : process(and_ln80_5_reg_1119, icmp_ln85_reg_1123)
    begin
                ap_predicate_op66_store_state2 <= ((icmp_ln85_reg_1123 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_5_reg_1119));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_164)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_164;
        end if; 
    end process;


    ap_sig_allocacmp_m1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, m1_fu_156, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_m1_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_m1_load <= m1_fu_156;
        end if; 
    end process;


    bPipes_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, bPipes_4_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_4_blk_n <= bPipes_4_empty_n;
        else 
            bPipes_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_4_read <= bPipes_4_read_local;

    bPipes_4_read_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_4_read_local <= ap_const_logic_1;
        else 
            bPipes_4_read_local <= ap_const_logic_0;
        end if; 
    end process;


    bPipes_5_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, bPipes_5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_5_blk_n <= bPipes_5_full_n;
        else 
            bPipes_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_5_din <= bPipes_4_dout;
    bPipes_5_write <= bPipes_5_write_local;

    bPipes_5_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_5_write_local <= ap_const_logic_1;
        else 
            bPipes_5_write_local <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_66_fu_869_p1 <= trunc_ln170_6_reg_1257;
    bitcast_ln32_68_fu_873_p1 <= tmp_71_reg_1267;
    bitcast_ln32_70_fu_877_p1 <= tmp_73_reg_1277;
    bitcast_ln32_72_fu_881_p1 <= tmp_75_reg_1287;
    bitcast_ln32_74_fu_885_p1 <= tmp_77_reg_1297;
    bitcast_ln32_76_fu_889_p1 <= tmp_79_reg_1307;
    bitcast_ln32_78_fu_893_p1 <= tmp_81_reg_1317;
    bitcast_ln32_80_fu_897_p1 <= tmp_83_reg_1327;
    bitcast_ln32_fu_564_p1 <= aBuffer_q1;
    bitcast_ln36_29_fu_992_p1 <= select_ln296_29_reg_1385;
    bitcast_ln36_30_fu_995_p1 <= select_ln296_30_reg_1390;
    bitcast_ln36_31_fu_998_p1 <= select_ln296_31_reg_1395;
    bitcast_ln36_32_fu_1001_p1 <= select_ln296_32_reg_1400;
    bitcast_ln36_33_fu_1004_p1 <= select_ln296_33_reg_1405;
    bitcast_ln36_34_fu_1007_p1 <= select_ln296_34_reg_1410;
    bitcast_ln36_35_fu_1010_p1 <= select_ln296_35_reg_1415;
    bitcast_ln36_fu_989_p1 <= select_ln296_reg_1380;
    cBuffer_address0 <= cBuffer_addr_reg_1154_pp0_iter7_reg;
    cBuffer_address1 <= add115_cast_fu_542_p1(10 - 1 downto 0);
    cBuffer_ce0 <= cBuffer_ce0_local;

    cBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce0_local <= ap_const_logic_1;
        else 
            cBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_ce1 <= cBuffer_ce1_local;

    cBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce1_local <= ap_const_logic_1;
        else 
            cBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_d0 <= tmp_84_fu_1013_p9;
    cBuffer_we0 <= cBuffer_we0_local;

    cBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_we0_local <= ap_const_logic_1;
        else 
            cBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    cPrev_2_fu_788_p3 <= 
        ap_const_lv256_lc_1 when (cmp111(0) = '1') else 
        cBuffer_q1;
    empty_180_fu_498_p1 <= select_ln64_5_fu_473_p3(4 - 1 downto 0);
    empty_fu_547_p1 <= select_ln64_reg_1113_pp0_iter2_reg(6 - 1 downto 0);

    grp_fu_287_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_287_ce <= ap_const_logic_1;
        else 
            grp_fu_287_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_287_p0 <= trunc_ln170_6_reg_1257;

    grp_fu_291_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_291_ce <= ap_const_logic_1;
        else 
            grp_fu_291_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_291_p0 <= tmp_71_reg_1267;

    grp_fu_295_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_295_p0 <= tmp_73_reg_1277;

    grp_fu_299_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_299_ce <= ap_const_logic_1;
        else 
            grp_fu_299_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_299_p0 <= tmp_75_reg_1287;

    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_303_p0 <= tmp_77_reg_1297;

    grp_fu_307_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_307_ce <= ap_const_logic_1;
        else 
            grp_fu_307_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_307_p0 <= tmp_79_reg_1307;

    grp_fu_311_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_311_ce <= ap_const_logic_1;
        else 
            grp_fu_311_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_311_p0 <= tmp_81_reg_1317;

    grp_fu_315_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_315_ce <= ap_const_logic_1;
        else 
            grp_fu_315_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_315_p0 <= tmp_83_reg_1327;

    grp_fu_319_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_319_ce <= ap_const_logic_1;
        else 
            grp_fu_319_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_319_p1 <= trunc_ln170_fu_576_p1;

    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_323_p1 <= tmp_s_fu_599_p4;

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_327_p1 <= tmp_72_fu_628_p4;

    grp_fu_331_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_331_ce <= ap_const_logic_1;
        else 
            grp_fu_331_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p1 <= tmp_74_fu_657_p4;

    grp_fu_335_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_335_ce <= ap_const_logic_1;
        else 
            grp_fu_335_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_335_p1 <= tmp_76_fu_686_p4;

    grp_fu_339_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_339_ce <= ap_const_logic_1;
        else 
            grp_fu_339_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_339_p1 <= tmp_78_fu_715_p4;

    grp_fu_343_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_343_p1 <= tmp_80_fu_744_p4;

    grp_fu_347_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_347_ce <= ap_const_logic_1;
        else 
            grp_fu_347_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_347_p1 <= tmp_82_fu_773_p4;
    icmp_ln64_fu_369_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv11_400) else "0";
    icmp_ln67_fu_384_p2 <= "1" when (ap_sig_allocacmp_m1_load = ap_const_lv7_40) else "0";
    icmp_ln82_fu_408_p2 <= "0" when (tmp_fu_398_p4 = ap_const_lv5_0) else "1";
    icmp_ln83_fu_424_p2 <= "1" when (tmp_8_fu_414_p4 = ap_const_lv2_0) else "0";
    icmp_ln85_fu_442_p2 <= "1" when (select_ln64_fu_390_p3 = ap_const_lv7_4) else "0";
    inBoundsM_36_fu_594_p2 <= "1" when (unsigned(or_ln_fu_585_p4) < unsigned(size_m)) else "0";
    inBoundsM_37_fu_623_p2 <= "1" when (unsigned(or_ln125_s_fu_614_p4) < unsigned(size_m)) else "0";
    inBoundsM_38_fu_652_p2 <= "1" when (unsigned(or_ln125_11_fu_643_p4) < unsigned(size_m)) else "0";
    inBoundsM_39_fu_681_p2 <= "1" when (unsigned(or_ln125_12_fu_672_p4) < unsigned(size_m)) else "0";
    inBoundsM_40_fu_710_p2 <= "1" when (unsigned(or_ln125_13_fu_701_p4) < unsigned(size_m)) else "0";
    inBoundsM_41_fu_739_p2 <= "1" when (unsigned(or_ln125_14_fu_730_p4) < unsigned(size_m)) else "0";
    inBoundsM_42_fu_768_p2 <= "1" when (unsigned(or_ln125_15_fu_759_p4) < unsigned(size_m)) else "0";
    inBoundsM_fu_559_p2 <= "1" when (unsigned(add5_fu_550_p4) < unsigned(size_m)) else "0";
    inBoundsN_fu_512_p2 <= "1" when (unsigned(add106_cast_fu_494_p1) < unsigned(size_n)) else "0";
    inBounds_36_fu_912_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_36_reg_1182_pp0_iter6_reg);
    inBounds_37_fu_923_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_37_reg_1192_pp0_iter6_reg);
    inBounds_38_fu_934_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_38_reg_1202_pp0_iter6_reg);
    inBounds_39_fu_945_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_39_reg_1212_pp0_iter6_reg);
    inBounds_40_fu_956_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_40_reg_1222_pp0_iter6_reg);
    inBounds_41_fu_967_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_41_reg_1232_pp0_iter6_reg);
    inBounds_42_fu_978_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_42_reg_1242_pp0_iter6_reg);
    inBounds_fu_901_p2 <= (inBoundsN_reg_1137_pp0_iter6_reg and inBoundsM_reg_1160_pp0_iter6_reg);
    mul6_fu_526_p3 <= (empty_180_reg_1132_pp0_iter2_reg & ap_const_lv6_0);
    or_ln125_11_fu_643_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_3);
    or_ln125_12_fu_672_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_4);
    or_ln125_13_fu_701_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_5);
    or_ln125_14_fu_730_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_6);
    or_ln125_15_fu_759_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_7);
    or_ln125_s_fu_614_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_2);
    or_ln_fu_585_p4 <= ((m0 & empty_fu_547_p1) & ap_const_lv3_1);
    select_ln296_29_fu_916_p3 <= 
        grp_fu_291_p2 when (inBounds_36_fu_912_p2(0) = '1') else 
        bitcast_ln32_68_reg_1338_pp0_iter6_reg;
    select_ln296_30_fu_927_p3 <= 
        grp_fu_295_p2 when (inBounds_37_fu_923_p2(0) = '1') else 
        bitcast_ln32_70_reg_1344_pp0_iter6_reg;
    select_ln296_31_fu_938_p3 <= 
        grp_fu_299_p2 when (inBounds_38_fu_934_p2(0) = '1') else 
        bitcast_ln32_72_reg_1350_pp0_iter6_reg;
    select_ln296_32_fu_949_p3 <= 
        grp_fu_303_p2 when (inBounds_39_fu_945_p2(0) = '1') else 
        bitcast_ln32_74_reg_1356_pp0_iter6_reg;
    select_ln296_33_fu_960_p3 <= 
        grp_fu_307_p2 when (inBounds_40_fu_956_p2(0) = '1') else 
        bitcast_ln32_76_reg_1362_pp0_iter6_reg;
    select_ln296_34_fu_971_p3 <= 
        grp_fu_311_p2 when (inBounds_41_fu_967_p2(0) = '1') else 
        bitcast_ln32_78_reg_1368_pp0_iter6_reg;
    select_ln296_35_fu_982_p3 <= 
        grp_fu_315_p2 when (inBounds_42_fu_978_p2(0) = '1') else 
        bitcast_ln32_80_reg_1374_pp0_iter6_reg;
    select_ln296_fu_905_p3 <= 
        grp_fu_287_p2 when (inBounds_fu_901_p2(0) = '1') else 
        bitcast_ln32_66_reg_1332_pp0_iter6_reg;
    select_ln64_5_fu_473_p3 <= 
        add_ln64_5_fu_467_p2 when (icmp_ln67_reg_1108(0) = '1') else 
        n1_fu_160;
    select_ln64_fu_390_p3 <= 
        ap_const_lv7_0 when (icmp_ln67_fu_384_p2(0) = '1') else 
        ap_sig_allocacmp_m1_load;
    tmp_72_fu_628_p4 <= bPipes_4_dout(95 downto 64);
    tmp_74_fu_657_p4 <= bPipes_4_dout(127 downto 96);
    tmp_76_fu_686_p4 <= bPipes_4_dout(159 downto 128);
    tmp_78_fu_715_p4 <= bPipes_4_dout(191 downto 160);
    tmp_80_fu_744_p4 <= bPipes_4_dout(223 downto 192);
    tmp_82_fu_773_p4 <= bPipes_4_dout(255 downto 224);
    tmp_84_fu_1013_p9 <= (((((((bitcast_ln36_35_fu_1010_p1 & bitcast_ln36_34_fu_1007_p1) & bitcast_ln36_33_fu_1004_p1) & bitcast_ln36_32_fu_1001_p1) & bitcast_ln36_31_fu_998_p1) & bitcast_ln36_30_fu_995_p1) & bitcast_ln36_29_fu_992_p1) & bitcast_ln36_fu_989_p1);
    tmp_8_fu_414_p4 <= select_ln64_fu_390_p3(6 downto 5);
    tmp_fu_398_p4 <= select_ln64_fu_390_p3(6 downto 2);
    tmp_s_fu_599_p4 <= bPipes_4_dout(63 downto 32);
    trunc_ln170_6_fu_795_p1 <= cPrev_2_fu_788_p3(32 - 1 downto 0);
    trunc_ln170_fu_576_p1 <= bPipes_4_dout(32 - 1 downto 0);
    zext_ln64_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_5_fu_473_p3),27));
    zext_ln67_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_reg_1113_pp0_iter2_reg),10));
end behav;
