// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cPipes_0_dout,
        cPipes_0_num_data_valid,
        cPipes_0_fifo_cap,
        cPipes_0_empty_n,
        cPipes_0_read,
        cMemory_din,
        cMemory_num_data_valid,
        cMemory_fifo_cap,
        cMemory_full_n,
        cMemory_write,
        bound4,
        bound
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] cPipes_0_dout;
input  [2:0] cPipes_0_num_data_valid;
input  [2:0] cPipes_0_fifo_cap;
input   cPipes_0_empty_n;
output   cPipes_0_read;
output  [511:0] cMemory_din;
input  [6:0] cMemory_num_data_valid;
input  [6:0] cMemory_fifo_cap;
input   cMemory_full_n;
output   cMemory_write;
input  [62:0] bound4;
input  [29:0] bound;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln348_reg_779;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln333_fu_175_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cPipes_0_blk_n;
wire    ap_block_pp0_stage0;
reg    cMemory_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] bound_cast_fu_145_p1;
reg   [30:0] bound_cast_reg_754;
wire   [0:0] or_ln335_fu_212_p2;
reg   [0:0] or_ln335_reg_762;
wire   [0:0] empty_fu_226_p1;
reg   [0:0] empty_reg_767;
wire   [0:0] icmp_ln348_fu_230_p2;
reg   [1:0] j_fu_104;
wire   [1:0] j_1_fu_236_p2;
wire    ap_loop_init;
reg   [511:0] p_lcssa9_fu_108;
wire   [511:0] or_ln183_13_fu_709_p2;
reg   [30:0] indvar_flatten_fu_112;
wire   [30:0] select_ln335_2_fu_248_p3;
reg   [62:0] indvar_flatten11_fu_116;
wire   [62:0] add_ln333_fu_183_p2;
reg    cPipes_0_read_local;
reg    ap_block_pp0_stage0_01001;
reg    cMemory_write_local;
wire   [0:0] icmp_ln335_fu_189_p2;
wire   [0:0] icmp_ln339_fu_200_p2;
wire   [0:0] xor_ln333_fu_194_p2;
wire   [0:0] and_ln333_fu_206_p2;
wire   [1:0] select_ln335_1_fu_218_p3;
wire   [30:0] add_ln335_fu_242_p2;
wire   [8:0] i_assign_fu_281_p3;
wire   [511:0] zext_ln183_fu_292_p1;
wire   [511:0] shl_ln183_fu_296_p2;
wire   [511:0] select_ln335_fu_274_p3;
wire   [511:0] xor_ln183_fu_302_p2;
wire   [31:0] trunc_ln170_fu_288_p1;
wire   [511:0] zext_ln183_1_fu_314_p1;
wire   [511:0] and_ln183_fu_308_p2;
wire   [511:0] shl_ln183_1_fu_318_p2;
wire   [8:0] or_ln_fu_340_p3;
wire   [511:0] zext_ln183_2_fu_347_p1;
wire   [511:0] shl_ln183_2_fu_351_p2;
wire   [511:0] or_ln183_fu_324_p2;
wire   [511:0] xor_ln183_1_fu_357_p2;
wire   [31:0] tmp_s_fu_330_p4;
wire   [511:0] zext_ln183_3_fu_369_p1;
wire   [511:0] and_ln183_1_fu_363_p2;
wire   [511:0] shl_ln183_3_fu_373_p2;
wire   [8:0] or_ln183_1_fu_395_p3;
wire   [511:0] zext_ln183_4_fu_402_p1;
wire   [511:0] shl_ln183_4_fu_406_p2;
wire   [511:0] or_ln183_7_fu_379_p2;
wire   [511:0] xor_ln183_2_fu_412_p2;
wire   [31:0] tmp_449_fu_385_p4;
wire   [511:0] zext_ln183_5_fu_424_p1;
wire   [511:0] and_ln183_2_fu_418_p2;
wire   [511:0] shl_ln183_5_fu_428_p2;
wire   [8:0] or_ln183_2_fu_450_p3;
wire   [511:0] zext_ln183_6_fu_457_p1;
wire   [511:0] shl_ln183_6_fu_461_p2;
wire   [511:0] or_ln183_8_fu_434_p2;
wire   [511:0] xor_ln183_3_fu_467_p2;
wire   [31:0] tmp_450_fu_440_p4;
wire   [511:0] zext_ln183_7_fu_479_p1;
wire   [511:0] and_ln183_3_fu_473_p2;
wire   [511:0] shl_ln183_7_fu_483_p2;
wire   [8:0] or_ln183_3_fu_505_p3;
wire   [511:0] zext_ln183_8_fu_512_p1;
wire   [511:0] shl_ln183_8_fu_516_p2;
wire   [511:0] or_ln183_9_fu_489_p2;
wire   [511:0] xor_ln183_4_fu_522_p2;
wire   [31:0] tmp_451_fu_495_p4;
wire   [511:0] zext_ln183_9_fu_534_p1;
wire   [511:0] and_ln183_4_fu_528_p2;
wire   [511:0] shl_ln183_9_fu_538_p2;
wire   [8:0] or_ln183_4_fu_560_p3;
wire   [511:0] zext_ln183_10_fu_567_p1;
wire   [511:0] shl_ln183_10_fu_571_p2;
wire   [511:0] or_ln183_10_fu_544_p2;
wire   [511:0] xor_ln183_5_fu_577_p2;
wire   [31:0] tmp_452_fu_550_p4;
wire   [511:0] zext_ln183_11_fu_589_p1;
wire   [511:0] and_ln183_5_fu_583_p2;
wire   [511:0] shl_ln183_11_fu_593_p2;
wire   [8:0] or_ln183_5_fu_615_p3;
wire   [511:0] zext_ln183_12_fu_622_p1;
wire   [511:0] shl_ln183_12_fu_626_p2;
wire   [511:0] or_ln183_11_fu_599_p2;
wire   [511:0] xor_ln183_6_fu_632_p2;
wire   [31:0] tmp_453_fu_605_p4;
wire   [511:0] zext_ln183_13_fu_644_p1;
wire   [511:0] and_ln183_6_fu_638_p2;
wire   [511:0] shl_ln183_13_fu_648_p2;
wire   [8:0] or_ln183_6_fu_670_p3;
wire   [511:0] zext_ln183_14_fu_677_p1;
wire   [511:0] shl_ln183_14_fu_681_p2;
wire   [511:0] or_ln183_12_fu_654_p2;
wire   [511:0] xor_ln183_7_fu_687_p2;
wire   [31:0] tmp_454_fu_660_p4;
wire   [511:0] zext_ln183_15_fu_699_p1;
wire   [511:0] and_ln183_7_fu_693_p2;
wire   [511:0] shl_ln183_15_fu_703_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_104 = 2'd0;
#0 p_lcssa9_fu_108 = 512'd0;
#0 indvar_flatten_fu_112 = 31'd0;
#0 indvar_flatten11_fu_116 = 63'd0;
#0 ap_done_reg = 1'b0;
end

MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_116 <= 63'd0;
        end else if (((icmp_ln333_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten11_fu_116 <= add_ln333_fu_183_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_112 <= 31'd0;
        end else if (((icmp_ln333_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_112 <= select_ln335_2_fu_248_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_104 <= 2'd0;
        end else if (((icmp_ln333_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_104 <= j_1_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            p_lcssa9_fu_108 <= 512'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            p_lcssa9_fu_108 <= or_ln183_13_fu_709_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bound_cast_reg_754[29 : 0] <= bound_cast_fu_145_p1[29 : 0];
        empty_reg_767 <= empty_fu_226_p1;
        icmp_ln348_reg_779 <= icmp_ln348_fu_230_p2;
        or_ln335_reg_762 <= or_ln335_fu_212_p2;
    end
end

always @ (*) begin
    if (((icmp_ln333_fu_175_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln348_reg_779 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cMemory_blk_n = cMemory_full_n;
    end else begin
        cMemory_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln348_reg_779 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cMemory_write_local = 1'b1;
    end else begin
        cMemory_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cPipes_0_blk_n = cPipes_0_empty_n;
    end else begin
        cPipes_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cPipes_0_read_local = 1'b1;
    end else begin
        cPipes_0_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln333_fu_183_p2 = (indvar_flatten11_fu_116 + 63'd1);

assign add_ln335_fu_242_p2 = (indvar_flatten_fu_112 + 31'd1);

assign and_ln183_1_fu_363_p2 = (xor_ln183_1_fu_357_p2 & or_ln183_fu_324_p2);

assign and_ln183_2_fu_418_p2 = (xor_ln183_2_fu_412_p2 & or_ln183_7_fu_379_p2);

assign and_ln183_3_fu_473_p2 = (xor_ln183_3_fu_467_p2 & or_ln183_8_fu_434_p2);

assign and_ln183_4_fu_528_p2 = (xor_ln183_4_fu_522_p2 & or_ln183_9_fu_489_p2);

assign and_ln183_5_fu_583_p2 = (xor_ln183_5_fu_577_p2 & or_ln183_10_fu_544_p2);

assign and_ln183_6_fu_638_p2 = (xor_ln183_6_fu_632_p2 & or_ln183_11_fu_599_p2);

assign and_ln183_7_fu_693_p2 = (xor_ln183_7_fu_687_p2 & or_ln183_12_fu_654_p2);

assign and_ln183_fu_308_p2 = (xor_ln183_fu_302_p2 & select_ln335_fu_274_p3);

assign and_ln333_fu_206_p2 = (xor_ln333_fu_194_p2 & icmp_ln339_fu_200_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((cPipes_0_empty_n == 1'b0) | ((icmp_ln348_reg_779 == 1'd1) & (cMemory_full_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign bound_cast_fu_145_p1 = bound;

assign cMemory_din = or_ln183_13_fu_709_p2;

assign cMemory_write = cMemory_write_local;

assign cPipes_0_read = cPipes_0_read_local;

assign empty_fu_226_p1 = select_ln335_1_fu_218_p3[0:0];

assign i_assign_fu_281_p3 = {{empty_reg_767}, {8'd0}};

assign icmp_ln333_fu_175_p2 = ((indvar_flatten11_fu_116 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln335_fu_189_p2 = ((indvar_flatten_fu_112 == bound_cast_reg_754) ? 1'b1 : 1'b0);

assign icmp_ln339_fu_200_p2 = ((j_fu_104 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln348_fu_230_p2 = ((select_ln335_1_fu_218_p3 == 2'd1) ? 1'b1 : 1'b0);

assign j_1_fu_236_p2 = (select_ln335_1_fu_218_p3 + 2'd1);

assign or_ln183_10_fu_544_p2 = (shl_ln183_9_fu_538_p2 | and_ln183_4_fu_528_p2);

assign or_ln183_11_fu_599_p2 = (shl_ln183_11_fu_593_p2 | and_ln183_5_fu_583_p2);

assign or_ln183_12_fu_654_p2 = (shl_ln183_13_fu_648_p2 | and_ln183_6_fu_638_p2);

assign or_ln183_13_fu_709_p2 = (shl_ln183_15_fu_703_p2 | and_ln183_7_fu_693_p2);

assign or_ln183_1_fu_395_p3 = {{empty_reg_767}, {8'd64}};

assign or_ln183_2_fu_450_p3 = {{empty_reg_767}, {8'd96}};

assign or_ln183_3_fu_505_p3 = {{empty_reg_767}, {8'd128}};

assign or_ln183_4_fu_560_p3 = {{empty_reg_767}, {8'd160}};

assign or_ln183_5_fu_615_p3 = {{empty_reg_767}, {8'd192}};

assign or_ln183_6_fu_670_p3 = {{empty_reg_767}, {8'd224}};

assign or_ln183_7_fu_379_p2 = (shl_ln183_3_fu_373_p2 | and_ln183_1_fu_363_p2);

assign or_ln183_8_fu_434_p2 = (shl_ln183_5_fu_428_p2 | and_ln183_2_fu_418_p2);

assign or_ln183_9_fu_489_p2 = (shl_ln183_7_fu_483_p2 | and_ln183_3_fu_473_p2);

assign or_ln183_fu_324_p2 = (shl_ln183_1_fu_318_p2 | and_ln183_fu_308_p2);

assign or_ln335_fu_212_p2 = (icmp_ln335_fu_189_p2 | and_ln333_fu_206_p2);

assign or_ln_fu_340_p3 = {{empty_reg_767}, {8'd32}};

assign select_ln335_1_fu_218_p3 = ((or_ln335_fu_212_p2[0:0] == 1'b1) ? 2'd0 : j_fu_104);

assign select_ln335_2_fu_248_p3 = ((icmp_ln335_fu_189_p2[0:0] == 1'b1) ? 31'd1 : add_ln335_fu_242_p2);

assign select_ln335_fu_274_p3 = ((or_ln335_reg_762[0:0] == 1'b1) ? 512'd0 : p_lcssa9_fu_108);

assign shl_ln183_10_fu_571_p2 = 512'd4294967295 << zext_ln183_10_fu_567_p1;

assign shl_ln183_11_fu_593_p2 = zext_ln183_11_fu_589_p1 << zext_ln183_10_fu_567_p1;

assign shl_ln183_12_fu_626_p2 = 512'd4294967295 << zext_ln183_12_fu_622_p1;

assign shl_ln183_13_fu_648_p2 = zext_ln183_13_fu_644_p1 << zext_ln183_12_fu_622_p1;

assign shl_ln183_14_fu_681_p2 = 512'd4294967295 << zext_ln183_14_fu_677_p1;

assign shl_ln183_15_fu_703_p2 = zext_ln183_15_fu_699_p1 << zext_ln183_14_fu_677_p1;

assign shl_ln183_1_fu_318_p2 = zext_ln183_1_fu_314_p1 << zext_ln183_fu_292_p1;

assign shl_ln183_2_fu_351_p2 = 512'd4294967295 << zext_ln183_2_fu_347_p1;

assign shl_ln183_3_fu_373_p2 = zext_ln183_3_fu_369_p1 << zext_ln183_2_fu_347_p1;

assign shl_ln183_4_fu_406_p2 = 512'd4294967295 << zext_ln183_4_fu_402_p1;

assign shl_ln183_5_fu_428_p2 = zext_ln183_5_fu_424_p1 << zext_ln183_4_fu_402_p1;

assign shl_ln183_6_fu_461_p2 = 512'd4294967295 << zext_ln183_6_fu_457_p1;

assign shl_ln183_7_fu_483_p2 = zext_ln183_7_fu_479_p1 << zext_ln183_6_fu_457_p1;

assign shl_ln183_8_fu_516_p2 = 512'd4294967295 << zext_ln183_8_fu_512_p1;

assign shl_ln183_9_fu_538_p2 = zext_ln183_9_fu_534_p1 << zext_ln183_8_fu_512_p1;

assign shl_ln183_fu_296_p2 = 512'd4294967295 << zext_ln183_fu_292_p1;

assign tmp_449_fu_385_p4 = {{cPipes_0_dout[95:64]}};

assign tmp_450_fu_440_p4 = {{cPipes_0_dout[127:96]}};

assign tmp_451_fu_495_p4 = {{cPipes_0_dout[159:128]}};

assign tmp_452_fu_550_p4 = {{cPipes_0_dout[191:160]}};

assign tmp_453_fu_605_p4 = {{cPipes_0_dout[223:192]}};

assign tmp_454_fu_660_p4 = {{cPipes_0_dout[255:224]}};

assign tmp_s_fu_330_p4 = {{cPipes_0_dout[63:32]}};

assign trunc_ln170_fu_288_p1 = cPipes_0_dout[31:0];

assign xor_ln183_1_fu_357_p2 = (shl_ln183_2_fu_351_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_2_fu_412_p2 = (shl_ln183_4_fu_406_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_3_fu_467_p2 = (shl_ln183_6_fu_461_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_4_fu_522_p2 = (shl_ln183_8_fu_516_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_5_fu_577_p2 = (shl_ln183_10_fu_571_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_6_fu_632_p2 = (shl_ln183_12_fu_626_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_7_fu_687_p2 = (shl_ln183_14_fu_681_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln183_fu_302_p2 = (shl_ln183_fu_296_p2 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign xor_ln333_fu_194_p2 = (icmp_ln335_fu_189_p2 ^ 1'd1);

assign zext_ln183_10_fu_567_p1 = or_ln183_4_fu_560_p3;

assign zext_ln183_11_fu_589_p1 = tmp_452_fu_550_p4;

assign zext_ln183_12_fu_622_p1 = or_ln183_5_fu_615_p3;

assign zext_ln183_13_fu_644_p1 = tmp_453_fu_605_p4;

assign zext_ln183_14_fu_677_p1 = or_ln183_6_fu_670_p3;

assign zext_ln183_15_fu_699_p1 = tmp_454_fu_660_p4;

assign zext_ln183_1_fu_314_p1 = trunc_ln170_fu_288_p1;

assign zext_ln183_2_fu_347_p1 = or_ln_fu_340_p3;

assign zext_ln183_3_fu_369_p1 = tmp_s_fu_330_p4;

assign zext_ln183_4_fu_402_p1 = or_ln183_1_fu_395_p3;

assign zext_ln183_5_fu_424_p1 = tmp_449_fu_385_p4;

assign zext_ln183_6_fu_457_p1 = or_ln183_2_fu_450_p3;

assign zext_ln183_7_fu_479_p1 = tmp_450_fu_440_p4;

assign zext_ln183_8_fu_512_p1 = or_ln183_3_fu_505_p3;

assign zext_ln183_9_fu_534_p1 = tmp_451_fu_495_p4;

assign zext_ln183_fu_292_p1 = i_assign_fu_281_p3;

always @ (posedge ap_clk) begin
    bound_cast_reg_754[30] <= 1'b0;
end

endmodule //MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1
