// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_FeedB (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bFeed_dout,
        bFeed_num_data_valid,
        bFeed_fifo_cap,
        bFeed_empty_n,
        bFeed_read,
        bPipes_0_din,
        bPipes_0_num_data_valid,
        bPipes_0_fifo_cap,
        bPipes_0_full_n,
        bPipes_0_write,
        size_n_dout,
        size_n_num_data_valid,
        size_n_fifo_cap,
        size_n_empty_n,
        size_n_read,
        size_k_dout,
        size_k_num_data_valid,
        size_k_fifo_cap,
        size_k_empty_n,
        size_k_read,
        size_m_dout,
        size_m_num_data_valid,
        size_m_fifo_cap,
        size_m_empty_n,
        size_m_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] bFeed_dout;
input  [2:0] bFeed_num_data_valid;
input  [2:0] bFeed_fifo_cap;
input   bFeed_empty_n;
output   bFeed_read;
output  [255:0] bPipes_0_din;
input  [2:0] bPipes_0_num_data_valid;
input  [2:0] bPipes_0_fifo_cap;
input   bPipes_0_full_n;
output   bPipes_0_write;
input  [31:0] size_n_dout;
input  [2:0] size_n_num_data_valid;
input  [2:0] size_n_fifo_cap;
input   size_n_empty_n;
output   size_n_read;
input  [31:0] size_k_dout;
input  [2:0] size_k_num_data_valid;
input  [2:0] size_k_fifo_cap;
input   size_k_empty_n;
output   size_k_read;
input  [31:0] size_m_dout;
input  [2:0] size_m_num_data_valid;
input  [2:0] size_m_fifo_cap;
input   size_m_empty_n;
output   size_m_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bFeed_read;
reg bPipes_0_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_n_blk_n;
reg    size_k_blk_n;
reg    size_m_blk_n;
reg   [31:0] size_k_2_reg_224;
reg    ap_block_state1;
reg   [23:0] trunc_ln_reg_229;
reg   [23:0] trunc_ln9_reg_234;
wire   [23:0] n0_34_fu_185_p2;
reg   [23:0] n0_34_reg_242;
wire    ap_CS_fsm_state2;
wire   [23:0] m0_1_fu_196_p2;
reg   [23:0] m0_1_reg_250;
wire    ap_CS_fsm_state3;
wire   [31:0] k_fu_211_p2;
reg   [31:0] k_reg_258;
wire    ap_CS_fsm_state4;
reg   [5:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [255:0] buffer_d0;
reg    buffer_ce1;
wire   [255:0] buffer_q1;
wire    grp_FeedB_Pipeline_1_fu_118_ap_start;
wire    grp_FeedB_Pipeline_1_fu_118_ap_done;
wire    grp_FeedB_Pipeline_1_fu_118_ap_idle;
wire    grp_FeedB_Pipeline_1_fu_118_ap_ready;
wire   [5:0] grp_FeedB_Pipeline_1_fu_118_buffer_r_address0;
wire    grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0;
wire    grp_FeedB_Pipeline_1_fu_118_buffer_r_we0;
wire   [255:0] grp_FeedB_Pipeline_1_fu_118_buffer_r_d0;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_idle;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read;
wire   [255:0] grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write;
wire   [5:0] grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0;
wire   [255:0] grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0;
wire   [5:0] grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1;
wire    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1;
reg   [23:0] m0_reg_96;
wire   [0:0] icmp_ln412_fu_180_p2;
wire   [0:0] icmp_ln416_fu_206_p2;
reg   [31:0] k_04_reg_107;
wire   [0:0] icmp_ln414_fu_191_p2;
wire    ap_CS_fsm_state7;
reg    grp_FeedB_Pipeline_1_fu_118_ap_start_reg;
wire    ap_CS_fsm_state5;
reg    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [23:0] n0_fu_70;
reg    size_m_read_local;
reg    size_k_read_local;
reg    size_n_read_local;
wire   [32:0] zext_ln111_fu_132_p1;
wire   [32:0] add_ln111_fu_136_p2;
wire   [32:0] zext_ln116_fu_152_p1;
wire   [32:0] add_ln116_fu_156_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 grp_FeedB_Pipeline_1_fu_118_ap_start_reg = 1'b0;
#0 grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg = 1'b0;
#0 n0_fu_70 = 24'd0;
end

MatrixMultiplicationKernel_FeedB_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .address1(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1),
    .ce1(buffer_ce1),
    .q1(buffer_q1)
);

MatrixMultiplicationKernel_FeedB_Pipeline_1 grp_FeedB_Pipeline_1_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_FeedB_Pipeline_1_fu_118_ap_start),
    .ap_done(grp_FeedB_Pipeline_1_fu_118_ap_done),
    .ap_idle(grp_FeedB_Pipeline_1_fu_118_ap_idle),
    .ap_ready(grp_FeedB_Pipeline_1_fu_118_ap_ready),
    .buffer_r_address0(grp_FeedB_Pipeline_1_fu_118_buffer_r_address0),
    .buffer_r_ce0(grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0),
    .buffer_r_we0(grp_FeedB_Pipeline_1_fu_118_buffer_r_we0),
    .buffer_r_d0(grp_FeedB_Pipeline_1_fu_118_buffer_r_d0)
);

MatrixMultiplicationKernel_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start),
    .ap_done(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done),
    .ap_idle(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_idle),
    .ap_ready(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready),
    .bFeed_dout(bFeed_dout),
    .bFeed_num_data_valid(3'd0),
    .bFeed_fifo_cap(3'd0),
    .bFeed_empty_n(bFeed_empty_n),
    .bFeed_read(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read),
    .bPipes_0_din(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din),
    .bPipes_0_num_data_valid(3'd0),
    .bPipes_0_fifo_cap(3'd0),
    .bPipes_0_full_n(bPipes_0_full_n),
    .bPipes_0_write(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write),
    .buffer_r_address0(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0),
    .buffer_r_ce0(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0),
    .buffer_r_we0(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0),
    .buffer_r_d0(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0),
    .buffer_r_address1(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1),
    .buffer_r_ce1(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1),
    .buffer_r_q1(buffer_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln412_fu_180_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln416_fu_206_p2 == 1'd0))) begin
            grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= 1'b1;
        end else if ((grp_FeedB_Pipeline_1_fu_118_ap_ready == 1'b1)) begin
            grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= 1'b1;
        end else if ((grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready == 1'b1)) begin
            grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done == 1'b1))) begin
        k_04_reg_107 <= k_reg_258;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln414_fu_191_p2 == 1'd0))) begin
        k_04_reg_107 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln416_fu_206_p2 == 1'd1))) begin
        m0_reg_96 <= m0_1_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln412_fu_180_p2 == 1'd0))) begin
        m0_reg_96 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        n0_fu_70 <= 24'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln414_fu_191_p2 == 1'd1))) begin
        n0_fu_70 <= n0_34_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_258 <= k_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m0_1_reg_250 <= m0_1_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n0_34_reg_242 <= n0_34_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_k_2_reg_224 <= size_k_dout;
        trunc_ln9_reg_234 <= {{add_ln116_fu_156_p2[32:9]}};
        trunc_ln_reg_229 <= {{add_ln111_fu_136_p2[32:9]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_FeedB_Pipeline_1_fu_118_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln412_fu_180_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln412_fu_180_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bFeed_read = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read;
    end else begin
        bFeed_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bPipes_0_write = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write;
    end else begin
        bPipes_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_address0 = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = grp_FeedB_Pipeline_1_fu_118_buffer_r_address0;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_ce0 = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_ce0 = grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_ce1 = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_d0 = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_d0 = grp_FeedB_Pipeline_1_fu_118_buffer_r_d0;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_we0 = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_we0 = grp_FeedB_Pipeline_1_fu_118_buffer_r_we0;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_k_blk_n = size_k_empty_n;
    end else begin
        size_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_k_read_local = 1'b1;
    end else begin
        size_k_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_blk_n = size_m_empty_n;
    end else begin
        size_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_read_local = 1'b1;
    end else begin
        size_m_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_blk_n = size_n_empty_n;
    end else begin
        size_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_read_local = 1'b1;
    end else begin
        size_n_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln412_fu_180_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln414_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln416_fu_206_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_FeedB_Pipeline_1_fu_118_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln111_fu_136_p2 = (zext_ln111_fu_132_p1 + 33'd511);

assign add_ln116_fu_156_p2 = (zext_ln116_fu_152_p1 + 33'd511);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((size_m_empty_n == 1'b0) | (size_k_empty_n == 1'b0) | (size_n_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign bPipes_0_din = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din;

assign grp_FeedB_Pipeline_1_fu_118_ap_start = grp_FeedB_Pipeline_1_fu_118_ap_start_reg;

assign grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start = grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg;

assign icmp_ln412_fu_180_p2 = ((n0_fu_70 == trunc_ln_reg_229) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_191_p2 = ((m0_reg_96 == trunc_ln9_reg_234) ? 1'b1 : 1'b0);

assign icmp_ln416_fu_206_p2 = ((k_04_reg_107 == size_k_2_reg_224) ? 1'b1 : 1'b0);

assign k_fu_211_p2 = (k_04_reg_107 + 32'd1);

assign m0_1_fu_196_p2 = (m0_reg_96 + 24'd1);

assign n0_34_fu_185_p2 = (n0_fu_70 + 24'd1);

assign size_k_read = size_k_read_local;

assign size_m_read = size_m_read_local;

assign size_n_read = size_n_read_local;

assign zext_ln111_fu_132_p1 = size_n_dout;

assign zext_ln116_fu_152_p1 = size_m_dout;

endmodule //MatrixMultiplicationKernel_FeedB
