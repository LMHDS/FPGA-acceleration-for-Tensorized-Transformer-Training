-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ConvertWidthC is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cPipes_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_empty_n : IN STD_LOGIC;
    cPipes_0_read : OUT STD_LOGIC;
    cMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    cMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_full_n : IN STD_LOGIC;
    cMemory_write : OUT STD_LOGIC;
    size_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_n_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_empty_n : IN STD_LOGIC;
    size_n_read : OUT STD_LOGIC;
    size_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_m_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_empty_n : IN STD_LOGIC;
    size_m_read : OUT STD_LOGIC;
    size_n_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_n_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c_full_n : IN STD_LOGIC;
    size_n_c_write : OUT STD_LOGIC;
    size_m_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_m_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c_full_n : IN STD_LOGIC;
    size_m_c_write : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiplicationKernel_ConvertWidthC is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv33_1FF : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal size_n_blk_n : STD_LOGIC;
    signal size_m_blk_n : STD_LOGIC;
    signal size_n_c_blk_n : STD_LOGIC;
    signal size_m_c_blk_n : STD_LOGIC;
    signal tmp_s_reg_164 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_455_reg_169 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_456_fu_146_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_456_reg_174 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound4_fu_94_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound4_reg_179 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_idle : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write : STD_LOGIC;
    signal grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal size_m_read_local : STD_LOGIC;
    signal size_m_c_write_local : STD_LOGIC;
    signal size_n_read_local : STD_LOGIC;
    signal size_n_c_write_local : STD_LOGIC;
    signal bound4_fu_94_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal bound4_fu_94_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal size_n_cast_fu_99_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_i_fu_103_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal size_m_cast_fu_119_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_i2_fu_123_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal div_i_fu_139_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal bound4_fu_94_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound4_fu_94_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cPipes_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        cPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        cPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        cPipes_0_empty_n : IN STD_LOGIC;
        cPipes_0_read : OUT STD_LOGIC;
        cMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        cMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        cMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        cMemory_full_n : IN STD_LOGIC;
        cMemory_write : OUT STD_LOGIC;
        bound4 : IN STD_LOGIC_VECTOR (62 downto 0);
        bound : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_33ns_30ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84 : component MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start,
        ap_done => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done,
        ap_idle => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_idle,
        ap_ready => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready,
        cPipes_0_dout => cPipes_0_dout,
        cPipes_0_num_data_valid => ap_const_lv3_0,
        cPipes_0_fifo_cap => ap_const_lv3_0,
        cPipes_0_empty_n => cPipes_0_empty_n,
        cPipes_0_read => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read,
        cMemory_din => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din,
        cMemory_num_data_valid => ap_const_lv7_0,
        cMemory_fifo_cap => ap_const_lv7_0,
        cMemory_full_n => cMemory_full_n,
        cMemory_write => grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write,
        bound4 => bound4_reg_179,
        bound => tmp_456_reg_174);

    mul_33ns_30ns_63_1_1_U1718 : component MatrixMultiplicationKernel_mul_33ns_30ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 30,
        dout_WIDTH => 63)
    port map (
        din0 => bound4_fu_94_p0,
        din1 => bound4_fu_94_p1,
        dout => bound4_fu_94_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready = ap_const_logic_1)) then 
                    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound4_reg_179 <= bound4_fu_94_p2;
                    tmp_456_reg_174(29 downto 6) <= tmp_456_fu_146_p3(29 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_455_reg_169 <= sub_i2_fu_123_p2(32 downto 9);
                tmp_s_reg_164 <= sub_i_fu_103_p2(32 downto 9);
            end if;
        end if;
    end process;
    tmp_456_reg_174(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done)
    begin
        if ((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, size_n_empty_n, size_m_empty_n, size_n_c_full_n, size_m_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (size_m_c_full_n = ap_const_logic_0) or (size_n_c_full_n = ap_const_logic_0) or (size_m_empty_n = ap_const_logic_0) or (size_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound4_fu_94_p0 <= bound4_fu_94_p00(33 - 1 downto 0);
    bound4_fu_94_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_i_fu_139_p3),63));
    bound4_fu_94_p1 <= bound4_fu_94_p10(30 - 1 downto 0);
    bound4_fu_94_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_456_fu_146_p3),63));
    cMemory_din <= grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din;

    cMemory_write_assign_proc : process(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cMemory_write <= grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write;
        else 
            cMemory_write <= ap_const_logic_0;
        end if; 
    end process;


    cPipes_0_read_assign_proc : process(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cPipes_0_read <= grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read;
        else 
            cPipes_0_read <= ap_const_logic_0;
        end if; 
    end process;

    div_i_fu_139_p3 <= (tmp_s_reg_164 & ap_const_lv9_0);
    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start <= grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg;

    size_m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_m_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_blk_n <= size_m_empty_n;
        else 
            size_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_m_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_m_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c_blk_n <= size_m_c_full_n;
        else 
            size_m_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_m_c_din <= size_m_dout;
    size_m_c_write <= size_m_c_write_local;

    size_m_c_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c_write_local <= ap_const_logic_1;
        else 
            size_m_c_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_m_cast_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_m_dout),33));
    size_m_read <= size_m_read_local;

    size_m_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_read_local <= ap_const_logic_1;
        else 
            size_m_read_local <= ap_const_logic_0;
        end if; 
    end process;


    size_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_blk_n <= size_n_empty_n;
        else 
            size_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_n_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_n_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c_blk_n <= size_n_c_full_n;
        else 
            size_n_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_n_c_din <= size_n_dout;
    size_n_c_write <= size_n_c_write_local;

    size_n_c_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c_write_local <= ap_const_logic_1;
        else 
            size_n_c_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_n_cast_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_n_dout),33));
    size_n_read <= size_n_read_local;

    size_n_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_read_local <= ap_const_logic_1;
        else 
            size_n_read_local <= ap_const_logic_0;
        end if; 
    end process;

    sub_i2_fu_123_p2 <= std_logic_vector(unsigned(size_m_cast_fu_119_p1) + unsigned(ap_const_lv33_1FF));
    sub_i_fu_103_p2 <= std_logic_vector(unsigned(size_n_cast_fu_99_p1) + unsigned(ap_const_lv33_1FF));
    tmp_456_fu_146_p3 <= (tmp_455_reg_169 & ap_const_lv6_0);
end behav;
