-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ProcessingElement_30_Pipeline_Pipeline_N_Pipeline_M is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aPipes_29_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aPipes_29_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_29_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_29_empty_n : IN STD_LOGIC;
    aPipes_29_read : OUT STD_LOGIC;
    aPipes_30_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aPipes_30_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_30_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_30_full_n : IN STD_LOGIC;
    aPipes_30_write : OUT STD_LOGIC;
    bPipes_29_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bPipes_29_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_29_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_29_empty_n : IN STD_LOGIC;
    bPipes_29_read : OUT STD_LOGIC;
    bPipes_30_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bPipes_30_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_30_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_30_full_n : IN STD_LOGIC;
    bPipes_30_write : OUT STD_LOGIC;
    m0 : IN STD_LOGIC_VECTOR (22 downto 0);
    cBuffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce0 : OUT STD_LOGIC;
    cBuffer_we0 : OUT STD_LOGIC;
    cBuffer_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    cBuffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce1 : OUT STD_LOGIC;
    cBuffer_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    cmp111 : IN STD_LOGIC_VECTOR (0 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    cond90 : IN STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce0 : OUT STD_LOGIC;
    aBuffer_we0 : OUT STD_LOGIC;
    aBuffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    aBuffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce1 : OUT STD_LOGIC;
    aBuffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (26 downto 0);
    cond : IN STD_LOGIC_VECTOR (4 downto 0);
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    brmerge282 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ProcessingElement_30_Pipeline_Pipeline_N_Pipeline_M is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1C : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1D : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln80_8_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op63_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bPipes_29_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bPipes_30_blk_n : STD_LOGIC;
    signal aPipes_29_blk_n : STD_LOGIC;
    signal aPipes_30_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln67_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1101 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1101_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1101_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln80_8_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add91_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add91_reg_1115 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_196_fu_486_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_196_reg_1120 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_196_reg_1120_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inBoundsN_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cBuffer_addr_reg_1142 : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1142_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1142_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1142_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1142_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inBoundsM_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1148_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1148_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1148_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBoundsM_64_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_64_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_64_reg_1170_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_64_reg_1170_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_64_reg_1170_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_65_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_65_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_65_reg_1180_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_65_reg_1180_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_65_reg_1180_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_66_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_66_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_66_reg_1190_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_66_reg_1190_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_66_reg_1190_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_67_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_67_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_67_reg_1200_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_67_reg_1200_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_67_reg_1200_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_68_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_68_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_68_reg_1210_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_68_reg_1210_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_68_reg_1210_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_69_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_69_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_69_reg_1220_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_69_reg_1220_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_69_reg_1220_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_70_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_70_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_70_reg_1230_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_70_reg_1230_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_70_reg_1230_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_223_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_10_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_10_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_224_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_225_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_226_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_131_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_227_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_133_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_228_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_229_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_230_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_139_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_114_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_114_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_114_reg_1320_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_116_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_116_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_116_reg_1326_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_118_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_118_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_118_reg_1332_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_120_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_120_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_120_reg_1338_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_122_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_122_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_122_reg_1344_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_124_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_124_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_124_reg_1350_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_126_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_126_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_126_reg_1356_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_128_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_128_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_128_reg_1362_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_fu_893_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_50_fu_904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_50_reg_1373 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_51_fu_915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_51_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_52_fu_926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_52_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_53_fu_937_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_53_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_54_fu_948_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_54_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_55_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_55_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_56_fu_970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_56_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add91_cast_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add115_cast_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_fu_154 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln67_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_m1_load : STD_LOGIC_VECTOR (6 downto 0);
    signal n1_fu_158 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln64_8_fu_461_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_fu_162 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln64_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (10 downto 0);
    signal aPipes_29_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal aPipes_30_write_local : STD_LOGIC;
    signal bPipes_29_read_local : STD_LOGIC;
    signal bPipes_30_write_local : STD_LOGIC;
    signal aBuffer_we0_local : STD_LOGIC;
    signal aBuffer_ce0_local : STD_LOGIC;
    signal aBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_we0_local : STD_LOGIC;
    signal tmp_140_fu_1001_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal cBuffer_ce0_local : STD_LOGIC;
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_402_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln82_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_8_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_fu_468_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_fu_477_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add106_cast_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul9_fu_514_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_fu_521_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add115_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add8_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_573_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_s_fu_602_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_fu_616_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_28_fu_631_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_130_fu_645_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_29_fu_660_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_fu_674_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_30_fu_689_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_703_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_31_fu_718_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_fu_732_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_32_fu_747_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_138_fu_761_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cPrev_2_fu_776_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal inBounds_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_64_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_65_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_66_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_67_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_68_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_69_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_70_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_56_fu_998_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_55_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_54_fu_992_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_53_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_52_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_51_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_50_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_fu_977_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal grp_fu_305_ce : STD_LOGIC;
    signal grp_fu_309_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_337_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_345_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op65_store_state2 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_70 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_3_full_dsp_1_U1576 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => res_223_reg_1240,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1577 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => res_224_reg_1250,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1578 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => res_225_reg_1260,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1579 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => res_226_reg_1270,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1580 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => res_227_reg_1280,
        ce => grp_fu_301_ce,
        dout => grp_fu_301_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1581 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => res_228_reg_1290,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1582 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => res_229_reg_1300,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U1583 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        din1 => res_230_reg_1310,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1584 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_317_p1,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1585 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_321_p1,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1586 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1587 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1588 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_333_p1,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1589 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_337_p1,
        ce => grp_fu_337_ce,
        dout => grp_fu_337_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1590 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U1591 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_552_p1,
        din1 => grp_fu_345_p1,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p2);

    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten6_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_367_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_162 <= add_ln64_fu_373_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_162 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_367_p2 = ap_const_lv1_0))) then 
                    m1_fu_154 <= add_ln67_fu_436_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_154 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n1_fu_158 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    n1_fu_158 <= select_ln64_8_fu_461_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add91_reg_1115 <= add91_fu_472_p2;
                and_ln80_8_reg_1107 <= and_ln80_8_fu_424_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_196_reg_1120 <= empty_196_fu_486_p1;
                icmp_ln67_reg_1096 <= icmp_ln67_fu_382_p2;
                icmp_ln85_reg_1111 <= icmp_ln85_fu_430_p2;
                inBoundsN_reg_1125 <= inBoundsN_fu_500_p2;
                select_ln64_reg_1101 <= select_ln64_fu_388_p3;
                select_ln64_reg_1101_pp0_iter1_reg <= select_ln64_reg_1101;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                bitcast_ln32_114_reg_1320 <= bitcast_ln32_114_fu_857_p1;
                bitcast_ln32_114_reg_1320_pp0_iter6_reg <= bitcast_ln32_114_reg_1320;
                bitcast_ln32_116_reg_1326 <= bitcast_ln32_116_fu_861_p1;
                bitcast_ln32_116_reg_1326_pp0_iter6_reg <= bitcast_ln32_116_reg_1326;
                bitcast_ln32_118_reg_1332 <= bitcast_ln32_118_fu_865_p1;
                bitcast_ln32_118_reg_1332_pp0_iter6_reg <= bitcast_ln32_118_reg_1332;
                bitcast_ln32_120_reg_1338 <= bitcast_ln32_120_fu_869_p1;
                bitcast_ln32_120_reg_1338_pp0_iter6_reg <= bitcast_ln32_120_reg_1338;
                bitcast_ln32_122_reg_1344 <= bitcast_ln32_122_fu_873_p1;
                bitcast_ln32_122_reg_1344_pp0_iter6_reg <= bitcast_ln32_122_reg_1344;
                bitcast_ln32_124_reg_1350 <= bitcast_ln32_124_fu_877_p1;
                bitcast_ln32_124_reg_1350_pp0_iter6_reg <= bitcast_ln32_124_reg_1350;
                bitcast_ln32_126_reg_1356 <= bitcast_ln32_126_fu_881_p1;
                bitcast_ln32_126_reg_1356_pp0_iter6_reg <= bitcast_ln32_126_reg_1356;
                bitcast_ln32_128_reg_1362 <= bitcast_ln32_128_fu_885_p1;
                bitcast_ln32_128_reg_1362_pp0_iter6_reg <= bitcast_ln32_128_reg_1362;
                cBuffer_addr_reg_1142 <= add115_cast_fu_530_p1(10 - 1 downto 0);
                cBuffer_addr_reg_1142_pp0_iter4_reg <= cBuffer_addr_reg_1142;
                cBuffer_addr_reg_1142_pp0_iter5_reg <= cBuffer_addr_reg_1142_pp0_iter4_reg;
                cBuffer_addr_reg_1142_pp0_iter6_reg <= cBuffer_addr_reg_1142_pp0_iter5_reg;
                cBuffer_addr_reg_1142_pp0_iter7_reg <= cBuffer_addr_reg_1142_pp0_iter6_reg;
                empty_196_reg_1120_pp0_iter2_reg <= empty_196_reg_1120;
                inBoundsM_64_reg_1170 <= inBoundsM_64_fu_582_p2;
                inBoundsM_64_reg_1170_pp0_iter4_reg <= inBoundsM_64_reg_1170;
                inBoundsM_64_reg_1170_pp0_iter5_reg <= inBoundsM_64_reg_1170_pp0_iter4_reg;
                inBoundsM_64_reg_1170_pp0_iter6_reg <= inBoundsM_64_reg_1170_pp0_iter5_reg;
                inBoundsM_65_reg_1180 <= inBoundsM_65_fu_611_p2;
                inBoundsM_65_reg_1180_pp0_iter4_reg <= inBoundsM_65_reg_1180;
                inBoundsM_65_reg_1180_pp0_iter5_reg <= inBoundsM_65_reg_1180_pp0_iter4_reg;
                inBoundsM_65_reg_1180_pp0_iter6_reg <= inBoundsM_65_reg_1180_pp0_iter5_reg;
                inBoundsM_66_reg_1190 <= inBoundsM_66_fu_640_p2;
                inBoundsM_66_reg_1190_pp0_iter4_reg <= inBoundsM_66_reg_1190;
                inBoundsM_66_reg_1190_pp0_iter5_reg <= inBoundsM_66_reg_1190_pp0_iter4_reg;
                inBoundsM_66_reg_1190_pp0_iter6_reg <= inBoundsM_66_reg_1190_pp0_iter5_reg;
                inBoundsM_67_reg_1200 <= inBoundsM_67_fu_669_p2;
                inBoundsM_67_reg_1200_pp0_iter4_reg <= inBoundsM_67_reg_1200;
                inBoundsM_67_reg_1200_pp0_iter5_reg <= inBoundsM_67_reg_1200_pp0_iter4_reg;
                inBoundsM_67_reg_1200_pp0_iter6_reg <= inBoundsM_67_reg_1200_pp0_iter5_reg;
                inBoundsM_68_reg_1210 <= inBoundsM_68_fu_698_p2;
                inBoundsM_68_reg_1210_pp0_iter4_reg <= inBoundsM_68_reg_1210;
                inBoundsM_68_reg_1210_pp0_iter5_reg <= inBoundsM_68_reg_1210_pp0_iter4_reg;
                inBoundsM_68_reg_1210_pp0_iter6_reg <= inBoundsM_68_reg_1210_pp0_iter5_reg;
                inBoundsM_69_reg_1220 <= inBoundsM_69_fu_727_p2;
                inBoundsM_69_reg_1220_pp0_iter4_reg <= inBoundsM_69_reg_1220;
                inBoundsM_69_reg_1220_pp0_iter5_reg <= inBoundsM_69_reg_1220_pp0_iter4_reg;
                inBoundsM_69_reg_1220_pp0_iter6_reg <= inBoundsM_69_reg_1220_pp0_iter5_reg;
                inBoundsM_70_reg_1230 <= inBoundsM_70_fu_756_p2;
                inBoundsM_70_reg_1230_pp0_iter4_reg <= inBoundsM_70_reg_1230;
                inBoundsM_70_reg_1230_pp0_iter5_reg <= inBoundsM_70_reg_1230_pp0_iter4_reg;
                inBoundsM_70_reg_1230_pp0_iter6_reg <= inBoundsM_70_reg_1230_pp0_iter5_reg;
                inBoundsM_reg_1148 <= inBoundsM_fu_547_p2;
                inBoundsM_reg_1148_pp0_iter4_reg <= inBoundsM_reg_1148;
                inBoundsM_reg_1148_pp0_iter5_reg <= inBoundsM_reg_1148_pp0_iter4_reg;
                inBoundsM_reg_1148_pp0_iter6_reg <= inBoundsM_reg_1148_pp0_iter5_reg;
                inBoundsN_reg_1125_pp0_iter2_reg <= inBoundsN_reg_1125;
                inBoundsN_reg_1125_pp0_iter3_reg <= inBoundsN_reg_1125_pp0_iter2_reg;
                inBoundsN_reg_1125_pp0_iter4_reg <= inBoundsN_reg_1125_pp0_iter3_reg;
                inBoundsN_reg_1125_pp0_iter5_reg <= inBoundsN_reg_1125_pp0_iter4_reg;
                inBoundsN_reg_1125_pp0_iter6_reg <= inBoundsN_reg_1125_pp0_iter5_reg;
                res_223_reg_1240 <= grp_fu_317_p2;
                res_224_reg_1250 <= grp_fu_321_p2;
                res_225_reg_1260 <= grp_fu_325_p2;
                res_226_reg_1270 <= grp_fu_329_p2;
                res_227_reg_1280 <= grp_fu_333_p2;
                res_228_reg_1290 <= grp_fu_337_p2;
                res_229_reg_1300 <= grp_fu_341_p2;
                res_230_reg_1310 <= grp_fu_345_p2;
                select_ln296_50_reg_1373 <= select_ln296_50_fu_904_p3;
                select_ln296_51_reg_1378 <= select_ln296_51_fu_915_p3;
                select_ln296_52_reg_1383 <= select_ln296_52_fu_926_p3;
                select_ln296_53_reg_1388 <= select_ln296_53_fu_937_p3;
                select_ln296_54_reg_1393 <= select_ln296_54_fu_948_p3;
                select_ln296_55_reg_1398 <= select_ln296_55_fu_959_p3;
                select_ln296_56_reg_1403 <= select_ln296_56_fu_970_p3;
                select_ln296_reg_1368 <= select_ln296_fu_893_p3;
                select_ln64_reg_1101_pp0_iter2_reg <= select_ln64_reg_1101_pp0_iter1_reg;
                tmp_127_reg_1255 <= cPrev_2_fu_776_p3(63 downto 32);
                tmp_129_reg_1265 <= cPrev_2_fu_776_p3(95 downto 64);
                tmp_131_reg_1275 <= cPrev_2_fu_776_p3(127 downto 96);
                tmp_133_reg_1285 <= cPrev_2_fu_776_p3(159 downto 128);
                tmp_135_reg_1295 <= cPrev_2_fu_776_p3(191 downto 160);
                tmp_137_reg_1305 <= cPrev_2_fu_776_p3(223 downto 192);
                tmp_139_reg_1315 <= cPrev_2_fu_776_p3(255 downto 224);
                trunc_ln170_10_reg_1245 <= trunc_ln170_10_fu_783_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    aBuffer_address0 <= add_cast_fu_495_p1(5 - 1 downto 0);
    aBuffer_address1 <= add91_cast_fu_510_p1(5 - 1 downto 0);
    aBuffer_ce0 <= aBuffer_ce0_local;

    aBuffer_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce0_local <= ap_const_logic_1;
        else 
            aBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_ce1 <= aBuffer_ce1_local;

    aBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce1_local <= ap_const_logic_1;
        else 
            aBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_d0 <= aPipes_29_dout;
    aBuffer_we0 <= aBuffer_we0_local;

    aBuffer_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln80_8_reg_1107, icmp_ln85_reg_1111, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln85_reg_1111 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_8_reg_1107) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_we0_local <= ap_const_logic_1;
        else 
            aBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_29_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aPipes_29_empty_n, and_ln80_8_reg_1107, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln80_8_reg_1107) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_29_blk_n <= aPipes_29_empty_n;
        else 
            aPipes_29_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_29_read <= aPipes_29_read_local;

    aPipes_29_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln80_8_reg_1107, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln80_8_reg_1107) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_29_read_local <= ap_const_logic_1;
        else 
            aPipes_29_read_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_30_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aPipes_30_full_n, ap_predicate_op63_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op63_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_30_blk_n <= aPipes_30_full_n;
        else 
            aPipes_30_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_30_din <= aPipes_29_dout;
    aPipes_30_write <= aPipes_30_write_local;

    aPipes_30_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op63_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op63_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_30_write_local <= ap_const_logic_1;
        else 
            aPipes_30_write_local <= ap_const_logic_0;
        end if; 
    end process;

    add106_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add106_fu_477_p2),32));
    add106_fu_477_p2 <= std_logic_vector(unsigned(mul) + unsigned(zext_ln64_fu_468_p1));
    add115_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add115_fu_524_p2),64));
    add115_fu_524_p2 <= std_logic_vector(unsigned(mul9_fu_514_p3) + unsigned(zext_ln67_fu_521_p1));
    add8_fu_538_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_0);
    add91_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add91_reg_1115),64));
    add91_fu_472_p2 <= std_logic_vector(unsigned(select_ln64_8_fu_461_p3) + unsigned(cond90));
    add_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_490_p2),64));
    add_fu_490_p2 <= std_logic_vector(unsigned(select_ln64_8_fu_461_p3) + unsigned(cond));
    add_ln64_8_fu_455_p2 <= std_logic_vector(unsigned(n1_fu_158) + unsigned(ap_const_lv5_1));
    add_ln64_fu_373_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv11_1));
    add_ln67_fu_436_p2 <= std_logic_vector(unsigned(select_ln64_fu_388_p3) + unsigned(ap_const_lv7_1));
    and_ln80_8_fu_424_p2 <= (icmp_ln83_fu_412_p2 and and_ln80_fu_418_p2);
    and_ln80_fu_418_p2 <= (icmp_ln82_fu_396_p2 and brmerge282);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aPipes_29_empty_n, and_ln80_8_reg_1107, aPipes_30_full_n, ap_predicate_op63_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op63_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = aPipes_30_full_n)) or ((ap_const_lv1_1 = and_ln80_8_reg_1107) and (ap_const_logic_0 = aPipes_29_empty_n)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(bPipes_29_empty_n, bPipes_30_full_n)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((bPipes_30_full_n = ap_const_logic_0) or (bPipes_29_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln64_fu_367_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_65_assign_proc : process(ap_predicate_op65_store_state2)
    begin
                ap_enable_operation_65 <= (ap_predicate_op65_store_state2 = ap_const_boolean_1);
    end process;

        ap_enable_operation_70 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_76 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op63_write_state2_assign_proc : process(and_ln80_8_reg_1107, icmp_ln85_reg_1111)
    begin
                ap_predicate_op63_write_state2 <= ((icmp_ln85_reg_1111 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_8_reg_1107));
    end process;


    ap_predicate_op65_store_state2_assign_proc : process(and_ln80_8_reg_1107, icmp_ln85_reg_1111)
    begin
                ap_predicate_op65_store_state2 <= ((icmp_ln85_reg_1111 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_8_reg_1107));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_162)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_162;
        end if; 
    end process;


    ap_sig_allocacmp_m1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, m1_fu_154, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_m1_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_m1_load <= m1_fu_154;
        end if; 
    end process;


    bPipes_29_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, bPipes_29_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_29_blk_n <= bPipes_29_empty_n;
        else 
            bPipes_29_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_29_read <= bPipes_29_read_local;

    bPipes_29_read_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_29_read_local <= ap_const_logic_1;
        else 
            bPipes_29_read_local <= ap_const_logic_0;
        end if; 
    end process;


    bPipes_30_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, bPipes_30_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_30_blk_n <= bPipes_30_full_n;
        else 
            bPipes_30_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_30_din <= bPipes_29_dout;
    bPipes_30_write <= bPipes_30_write_local;

    bPipes_30_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_30_write_local <= ap_const_logic_1;
        else 
            bPipes_30_write_local <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_114_fu_857_p1 <= trunc_ln170_10_reg_1245;
    bitcast_ln32_116_fu_861_p1 <= tmp_127_reg_1255;
    bitcast_ln32_118_fu_865_p1 <= tmp_129_reg_1265;
    bitcast_ln32_120_fu_869_p1 <= tmp_131_reg_1275;
    bitcast_ln32_122_fu_873_p1 <= tmp_133_reg_1285;
    bitcast_ln32_124_fu_877_p1 <= tmp_135_reg_1295;
    bitcast_ln32_126_fu_881_p1 <= tmp_137_reg_1305;
    bitcast_ln32_128_fu_885_p1 <= tmp_139_reg_1315;
    bitcast_ln32_fu_552_p1 <= aBuffer_q1;
    bitcast_ln36_50_fu_980_p1 <= select_ln296_50_reg_1373;
    bitcast_ln36_51_fu_983_p1 <= select_ln296_51_reg_1378;
    bitcast_ln36_52_fu_986_p1 <= select_ln296_52_reg_1383;
    bitcast_ln36_53_fu_989_p1 <= select_ln296_53_reg_1388;
    bitcast_ln36_54_fu_992_p1 <= select_ln296_54_reg_1393;
    bitcast_ln36_55_fu_995_p1 <= select_ln296_55_reg_1398;
    bitcast_ln36_56_fu_998_p1 <= select_ln296_56_reg_1403;
    bitcast_ln36_fu_977_p1 <= select_ln296_reg_1368;
    cBuffer_address0 <= cBuffer_addr_reg_1142_pp0_iter7_reg;
    cBuffer_address1 <= add115_cast_fu_530_p1(10 - 1 downto 0);
    cBuffer_ce0 <= cBuffer_ce0_local;

    cBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce0_local <= ap_const_logic_1;
        else 
            cBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_ce1 <= cBuffer_ce1_local;

    cBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce1_local <= ap_const_logic_1;
        else 
            cBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_d0 <= tmp_140_fu_1001_p9;
    cBuffer_we0 <= cBuffer_we0_local;

    cBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_we0_local <= ap_const_logic_1;
        else 
            cBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    cPrev_2_fu_776_p3 <= 
        ap_const_lv256_lc_1 when (cmp111(0) = '1') else 
        cBuffer_q1;
    empty_196_fu_486_p1 <= select_ln64_8_fu_461_p3(4 - 1 downto 0);
    empty_fu_535_p1 <= select_ln64_reg_1101_pp0_iter2_reg(6 - 1 downto 0);

    grp_fu_285_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= trunc_ln170_10_reg_1245;

    grp_fu_289_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_289_ce <= ap_const_logic_1;
        else 
            grp_fu_289_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p0 <= tmp_127_reg_1255;

    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= tmp_129_reg_1265;

    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= tmp_131_reg_1275;

    grp_fu_301_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_301_ce <= ap_const_logic_1;
        else 
            grp_fu_301_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p0 <= tmp_133_reg_1285;

    grp_fu_305_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_305_ce <= ap_const_logic_1;
        else 
            grp_fu_305_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_305_p0 <= tmp_135_reg_1295;

    grp_fu_309_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_309_ce <= ap_const_logic_1;
        else 
            grp_fu_309_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= tmp_137_reg_1305;

    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_313_p0 <= tmp_139_reg_1315;

    grp_fu_317_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_317_ce <= ap_const_logic_1;
        else 
            grp_fu_317_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_317_p1 <= trunc_ln170_fu_564_p1;

    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p1 <= tmp_s_fu_587_p4;

    grp_fu_325_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_325_ce <= ap_const_logic_1;
        else 
            grp_fu_325_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_325_p1 <= tmp_128_fu_616_p4;

    grp_fu_329_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_329_ce <= ap_const_logic_1;
        else 
            grp_fu_329_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_329_p1 <= tmp_130_fu_645_p4;

    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p1 <= tmp_132_fu_674_p4;

    grp_fu_337_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_337_ce <= ap_const_logic_1;
        else 
            grp_fu_337_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_337_p1 <= tmp_134_fu_703_p4;

    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_p1 <= tmp_136_fu_732_p4;

    grp_fu_345_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_345_ce <= ap_const_logic_1;
        else 
            grp_fu_345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p1 <= tmp_138_fu_761_p4;
    icmp_ln64_fu_367_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv11_400) else "0";
    icmp_ln67_fu_382_p2 <= "1" when (ap_sig_allocacmp_m1_load = ap_const_lv7_40) else "0";
    icmp_ln82_fu_396_p2 <= "1" when (unsigned(select_ln64_fu_388_p3) > unsigned(ap_const_lv7_1C)) else "0";
    icmp_ln83_fu_412_p2 <= "1" when (tmp_fu_402_p4 = ap_const_lv2_0) else "0";
    icmp_ln85_fu_430_p2 <= "1" when (select_ln64_fu_388_p3 = ap_const_lv7_1D) else "0";
    inBoundsM_64_fu_582_p2 <= "1" when (unsigned(or_ln_fu_573_p4) < unsigned(size_m)) else "0";
    inBoundsM_65_fu_611_p2 <= "1" when (unsigned(or_ln125_s_fu_602_p4) < unsigned(size_m)) else "0";
    inBoundsM_66_fu_640_p2 <= "1" when (unsigned(or_ln125_28_fu_631_p4) < unsigned(size_m)) else "0";
    inBoundsM_67_fu_669_p2 <= "1" when (unsigned(or_ln125_29_fu_660_p4) < unsigned(size_m)) else "0";
    inBoundsM_68_fu_698_p2 <= "1" when (unsigned(or_ln125_30_fu_689_p4) < unsigned(size_m)) else "0";
    inBoundsM_69_fu_727_p2 <= "1" when (unsigned(or_ln125_31_fu_718_p4) < unsigned(size_m)) else "0";
    inBoundsM_70_fu_756_p2 <= "1" when (unsigned(or_ln125_32_fu_747_p4) < unsigned(size_m)) else "0";
    inBoundsM_fu_547_p2 <= "1" when (unsigned(add8_fu_538_p4) < unsigned(size_m)) else "0";
    inBoundsN_fu_500_p2 <= "1" when (unsigned(add106_cast_fu_482_p1) < unsigned(size_n)) else "0";
    inBounds_64_fu_900_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_64_reg_1170_pp0_iter6_reg);
    inBounds_65_fu_911_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_65_reg_1180_pp0_iter6_reg);
    inBounds_66_fu_922_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_66_reg_1190_pp0_iter6_reg);
    inBounds_67_fu_933_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_67_reg_1200_pp0_iter6_reg);
    inBounds_68_fu_944_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_68_reg_1210_pp0_iter6_reg);
    inBounds_69_fu_955_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_69_reg_1220_pp0_iter6_reg);
    inBounds_70_fu_966_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_70_reg_1230_pp0_iter6_reg);
    inBounds_fu_889_p2 <= (inBoundsN_reg_1125_pp0_iter6_reg and inBoundsM_reg_1148_pp0_iter6_reg);
    mul9_fu_514_p3 <= (empty_196_reg_1120_pp0_iter2_reg & ap_const_lv6_0);
    or_ln125_28_fu_631_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_3);
    or_ln125_29_fu_660_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_4);
    or_ln125_30_fu_689_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_5);
    or_ln125_31_fu_718_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_6);
    or_ln125_32_fu_747_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_7);
    or_ln125_s_fu_602_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_2);
    or_ln_fu_573_p4 <= ((m0 & empty_fu_535_p1) & ap_const_lv3_1);
    select_ln296_50_fu_904_p3 <= 
        grp_fu_289_p2 when (inBounds_64_fu_900_p2(0) = '1') else 
        bitcast_ln32_116_reg_1326_pp0_iter6_reg;
    select_ln296_51_fu_915_p3 <= 
        grp_fu_293_p2 when (inBounds_65_fu_911_p2(0) = '1') else 
        bitcast_ln32_118_reg_1332_pp0_iter6_reg;
    select_ln296_52_fu_926_p3 <= 
        grp_fu_297_p2 when (inBounds_66_fu_922_p2(0) = '1') else 
        bitcast_ln32_120_reg_1338_pp0_iter6_reg;
    select_ln296_53_fu_937_p3 <= 
        grp_fu_301_p2 when (inBounds_67_fu_933_p2(0) = '1') else 
        bitcast_ln32_122_reg_1344_pp0_iter6_reg;
    select_ln296_54_fu_948_p3 <= 
        grp_fu_305_p2 when (inBounds_68_fu_944_p2(0) = '1') else 
        bitcast_ln32_124_reg_1350_pp0_iter6_reg;
    select_ln296_55_fu_959_p3 <= 
        grp_fu_309_p2 when (inBounds_69_fu_955_p2(0) = '1') else 
        bitcast_ln32_126_reg_1356_pp0_iter6_reg;
    select_ln296_56_fu_970_p3 <= 
        grp_fu_313_p2 when (inBounds_70_fu_966_p2(0) = '1') else 
        bitcast_ln32_128_reg_1362_pp0_iter6_reg;
    select_ln296_fu_893_p3 <= 
        grp_fu_285_p2 when (inBounds_fu_889_p2(0) = '1') else 
        bitcast_ln32_114_reg_1320_pp0_iter6_reg;
    select_ln64_8_fu_461_p3 <= 
        add_ln64_8_fu_455_p2 when (icmp_ln67_reg_1096(0) = '1') else 
        n1_fu_158;
    select_ln64_fu_388_p3 <= 
        ap_const_lv7_0 when (icmp_ln67_fu_382_p2(0) = '1') else 
        ap_sig_allocacmp_m1_load;
    tmp_128_fu_616_p4 <= bPipes_29_dout(95 downto 64);
    tmp_130_fu_645_p4 <= bPipes_29_dout(127 downto 96);
    tmp_132_fu_674_p4 <= bPipes_29_dout(159 downto 128);
    tmp_134_fu_703_p4 <= bPipes_29_dout(191 downto 160);
    tmp_136_fu_732_p4 <= bPipes_29_dout(223 downto 192);
    tmp_138_fu_761_p4 <= bPipes_29_dout(255 downto 224);
    tmp_140_fu_1001_p9 <= (((((((bitcast_ln36_56_fu_998_p1 & bitcast_ln36_55_fu_995_p1) & bitcast_ln36_54_fu_992_p1) & bitcast_ln36_53_fu_989_p1) & bitcast_ln36_52_fu_986_p1) & bitcast_ln36_51_fu_983_p1) & bitcast_ln36_50_fu_980_p1) & bitcast_ln36_fu_977_p1);
    tmp_fu_402_p4 <= select_ln64_fu_388_p3(6 downto 5);
    tmp_s_fu_587_p4 <= bPipes_29_dout(63 downto 32);
    trunc_ln170_10_fu_783_p1 <= cPrev_2_fu_776_p3(32 - 1 downto 0);
    trunc_ln170_fu_564_p1 <= bPipes_29_dout(32 - 1 downto 0);
    zext_ln64_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_8_fu_461_p3),27));
    zext_ln67_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_reg_1101_pp0_iter2_reg),10));
end behav;
