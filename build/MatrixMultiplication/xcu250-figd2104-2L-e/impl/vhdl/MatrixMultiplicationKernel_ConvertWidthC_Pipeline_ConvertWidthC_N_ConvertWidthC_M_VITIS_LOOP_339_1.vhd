-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cPipes_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_empty_n : IN STD_LOGIC;
    cPipes_0_read : OUT STD_LOGIC;
    cMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    cMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_full_n : IN STD_LOGIC;
    cMemory_write : OUT STD_LOGIC;
    bound4 : IN STD_LOGIC_VECTOR (62 downto 0);
    bound : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv512_lc_4 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln348_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln333_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cPipes_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal cMemory_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bound_cast_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_cast_reg_754 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln335_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_226_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_104 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal j_1_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_lcssa9_fu_108 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal or_ln183_13_fu_709_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln335_2_fu_248_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten11_fu_116 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln333_fu_183_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal cPipes_0_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cMemory_write_local : STD_LOGIC;
    signal icmp_ln335_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln333_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln333_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln335_1_fu_218_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln335_fu_242_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_assign_fu_281_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_fu_292_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_fu_296_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln335_fu_274_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_fu_302_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln170_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_1_fu_314_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_fu_308_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_1_fu_318_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_2_fu_347_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_2_fu_351_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_fu_324_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_1_fu_357_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_s_fu_330_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_3_fu_369_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_1_fu_363_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_3_fu_373_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_1_fu_395_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_4_fu_402_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_4_fu_406_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_7_fu_379_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_2_fu_412_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_449_fu_385_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_5_fu_424_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_2_fu_418_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_5_fu_428_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_2_fu_450_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_6_fu_457_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_6_fu_461_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_8_fu_434_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_3_fu_467_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_450_fu_440_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_7_fu_479_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_3_fu_473_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_7_fu_483_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_3_fu_505_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_8_fu_512_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_8_fu_516_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_9_fu_489_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_4_fu_522_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_451_fu_495_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_9_fu_534_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_4_fu_528_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_9_fu_538_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_4_fu_560_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_10_fu_567_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_10_fu_571_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_10_fu_544_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_5_fu_577_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_452_fu_550_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_11_fu_589_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_5_fu_583_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_11_fu_593_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_5_fu_615_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_12_fu_622_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_12_fu_626_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_11_fu_599_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_6_fu_632_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_453_fu_605_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_13_fu_644_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_6_fu_638_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_13_fu_648_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_6_fu_670_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_14_fu_677_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_14_fu_681_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_12_fu_654_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_7_fu_687_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_454_fu_660_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_15_fu_699_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_7_fu_693_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_15_fu_703_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten11_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten11_fu_116 <= ap_const_lv63_0;
                elsif (((icmp_ln333_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten11_fu_116 <= add_ln333_fu_183_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv31_0;
                elsif (((icmp_ln333_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_112 <= select_ln335_2_fu_248_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_104 <= ap_const_lv2_0;
                elsif (((icmp_ln333_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_104 <= j_1_fu_236_p2;
                end if;
            end if; 
        end if;
    end process;

    p_lcssa9_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_lcssa9_fu_108 <= ap_const_lv512_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_lcssa9_fu_108 <= or_ln183_13_fu_709_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    bound_cast_reg_754(29 downto 0) <= bound_cast_fu_145_p1(29 downto 0);
                empty_reg_767 <= empty_fu_226_p1;
                icmp_ln348_reg_779 <= icmp_ln348_fu_230_p2;
                or_ln335_reg_762 <= or_ln335_fu_212_p2;
            end if;
        end if;
    end process;
    bound_cast_reg_754(30) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln333_fu_183_p2 <= std_logic_vector(unsigned(indvar_flatten11_fu_116) + unsigned(ap_const_lv63_1));
    add_ln335_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_112) + unsigned(ap_const_lv31_1));
    and_ln183_1_fu_363_p2 <= (xor_ln183_1_fu_357_p2 and or_ln183_fu_324_p2);
    and_ln183_2_fu_418_p2 <= (xor_ln183_2_fu_412_p2 and or_ln183_7_fu_379_p2);
    and_ln183_3_fu_473_p2 <= (xor_ln183_3_fu_467_p2 and or_ln183_8_fu_434_p2);
    and_ln183_4_fu_528_p2 <= (xor_ln183_4_fu_522_p2 and or_ln183_9_fu_489_p2);
    and_ln183_5_fu_583_p2 <= (xor_ln183_5_fu_577_p2 and or_ln183_10_fu_544_p2);
    and_ln183_6_fu_638_p2 <= (xor_ln183_6_fu_632_p2 and or_ln183_11_fu_599_p2);
    and_ln183_7_fu_693_p2 <= (xor_ln183_7_fu_687_p2 and or_ln183_12_fu_654_p2);
    and_ln183_fu_308_p2 <= (xor_ln183_fu_302_p2 and select_ln335_fu_274_p3);
    and_ln333_fu_206_p2 <= (xor_ln333_fu_194_p2 and icmp_ln339_fu_200_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(cPipes_0_empty_n, cMemory_full_n, icmp_ln348_reg_779)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((cPipes_0_empty_n = ap_const_logic_0) or ((icmp_ln348_reg_779 = ap_const_lv1_1) and (cMemory_full_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln333_fu_175_p2)
    begin
        if (((icmp_ln333_fu_175_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bound_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound),31));

    cMemory_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, cMemory_full_n, icmp_ln348_reg_779, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln348_reg_779 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cMemory_blk_n <= cMemory_full_n;
        else 
            cMemory_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cMemory_din <= or_ln183_13_fu_709_p2;
    cMemory_write <= cMemory_write_local;

    cMemory_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln348_reg_779, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln348_reg_779 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cMemory_write_local <= ap_const_logic_1;
        else 
            cMemory_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cPipes_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, cPipes_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cPipes_0_blk_n <= cPipes_0_empty_n;
        else 
            cPipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cPipes_0_read <= cPipes_0_read_local;

    cPipes_0_read_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cPipes_0_read_local <= ap_const_logic_1;
        else 
            cPipes_0_read_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_226_p1 <= select_ln335_1_fu_218_p3(1 - 1 downto 0);
    i_assign_fu_281_p3 <= (empty_reg_767 & ap_const_lv8_0);
    icmp_ln333_fu_175_p2 <= "1" when (indvar_flatten11_fu_116 = bound4) else "0";
    icmp_ln335_fu_189_p2 <= "1" when (indvar_flatten_fu_112 = bound_cast_reg_754) else "0";
    icmp_ln339_fu_200_p2 <= "1" when (j_fu_104 = ap_const_lv2_2) else "0";
    icmp_ln348_fu_230_p2 <= "1" when (select_ln335_1_fu_218_p3 = ap_const_lv2_1) else "0";
    j_1_fu_236_p2 <= std_logic_vector(unsigned(select_ln335_1_fu_218_p3) + unsigned(ap_const_lv2_1));
    or_ln183_10_fu_544_p2 <= (shl_ln183_9_fu_538_p2 or and_ln183_4_fu_528_p2);
    or_ln183_11_fu_599_p2 <= (shl_ln183_11_fu_593_p2 or and_ln183_5_fu_583_p2);
    or_ln183_12_fu_654_p2 <= (shl_ln183_13_fu_648_p2 or and_ln183_6_fu_638_p2);
    or_ln183_13_fu_709_p2 <= (shl_ln183_15_fu_703_p2 or and_ln183_7_fu_693_p2);
    or_ln183_1_fu_395_p3 <= (empty_reg_767 & ap_const_lv8_40);
    or_ln183_2_fu_450_p3 <= (empty_reg_767 & ap_const_lv8_60);
    or_ln183_3_fu_505_p3 <= (empty_reg_767 & ap_const_lv8_80);
    or_ln183_4_fu_560_p3 <= (empty_reg_767 & ap_const_lv8_A0);
    or_ln183_5_fu_615_p3 <= (empty_reg_767 & ap_const_lv8_C0);
    or_ln183_6_fu_670_p3 <= (empty_reg_767 & ap_const_lv8_E0);
    or_ln183_7_fu_379_p2 <= (shl_ln183_3_fu_373_p2 or and_ln183_1_fu_363_p2);
    or_ln183_8_fu_434_p2 <= (shl_ln183_5_fu_428_p2 or and_ln183_2_fu_418_p2);
    or_ln183_9_fu_489_p2 <= (shl_ln183_7_fu_483_p2 or and_ln183_3_fu_473_p2);
    or_ln183_fu_324_p2 <= (shl_ln183_1_fu_318_p2 or and_ln183_fu_308_p2);
    or_ln335_fu_212_p2 <= (icmp_ln335_fu_189_p2 or and_ln333_fu_206_p2);
    or_ln_fu_340_p3 <= (empty_reg_767 & ap_const_lv8_20);
    select_ln335_1_fu_218_p3 <= 
        ap_const_lv2_0 when (or_ln335_fu_212_p2(0) = '1') else 
        j_fu_104;
    select_ln335_2_fu_248_p3 <= 
        ap_const_lv31_1 when (icmp_ln335_fu_189_p2(0) = '1') else 
        add_ln335_fu_242_p2;
    select_ln335_fu_274_p3 <= 
        ap_const_lv512_lc_1 when (or_ln335_reg_762(0) = '1') else 
        p_lcssa9_fu_108;
    shl_ln183_10_fu_571_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_10_fu_567_p1(31-1 downto 0)))));
    shl_ln183_11_fu_593_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_11_fu_589_p1),to_integer(unsigned('0' & zext_ln183_10_fu_567_p1(31-1 downto 0)))));
    shl_ln183_12_fu_626_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_12_fu_622_p1(31-1 downto 0)))));
    shl_ln183_13_fu_648_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_13_fu_644_p1),to_integer(unsigned('0' & zext_ln183_12_fu_622_p1(31-1 downto 0)))));
    shl_ln183_14_fu_681_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_14_fu_677_p1(31-1 downto 0)))));
    shl_ln183_15_fu_703_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_15_fu_699_p1),to_integer(unsigned('0' & zext_ln183_14_fu_677_p1(31-1 downto 0)))));
    shl_ln183_1_fu_318_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_1_fu_314_p1),to_integer(unsigned('0' & zext_ln183_fu_292_p1(31-1 downto 0)))));
    shl_ln183_2_fu_351_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_2_fu_347_p1(31-1 downto 0)))));
    shl_ln183_3_fu_373_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_3_fu_369_p1),to_integer(unsigned('0' & zext_ln183_2_fu_347_p1(31-1 downto 0)))));
    shl_ln183_4_fu_406_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_4_fu_402_p1(31-1 downto 0)))));
    shl_ln183_5_fu_428_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_5_fu_424_p1),to_integer(unsigned('0' & zext_ln183_4_fu_402_p1(31-1 downto 0)))));
    shl_ln183_6_fu_461_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_6_fu_457_p1(31-1 downto 0)))));
    shl_ln183_7_fu_483_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_7_fu_479_p1),to_integer(unsigned('0' & zext_ln183_6_fu_457_p1(31-1 downto 0)))));
    shl_ln183_8_fu_516_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_8_fu_512_p1(31-1 downto 0)))));
    shl_ln183_9_fu_538_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_9_fu_534_p1),to_integer(unsigned('0' & zext_ln183_8_fu_512_p1(31-1 downto 0)))));
    shl_ln183_fu_296_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_fu_292_p1(31-1 downto 0)))));
    tmp_449_fu_385_p4 <= cPipes_0_dout(95 downto 64);
    tmp_450_fu_440_p4 <= cPipes_0_dout(127 downto 96);
    tmp_451_fu_495_p4 <= cPipes_0_dout(159 downto 128);
    tmp_452_fu_550_p4 <= cPipes_0_dout(191 downto 160);
    tmp_453_fu_605_p4 <= cPipes_0_dout(223 downto 192);
    tmp_454_fu_660_p4 <= cPipes_0_dout(255 downto 224);
    tmp_s_fu_330_p4 <= cPipes_0_dout(63 downto 32);
    trunc_ln170_fu_288_p1 <= cPipes_0_dout(32 - 1 downto 0);
    xor_ln183_1_fu_357_p2 <= (shl_ln183_2_fu_351_p2 xor ap_const_lv512_lc_4);
    xor_ln183_2_fu_412_p2 <= (shl_ln183_4_fu_406_p2 xor ap_const_lv512_lc_4);
    xor_ln183_3_fu_467_p2 <= (shl_ln183_6_fu_461_p2 xor ap_const_lv512_lc_4);
    xor_ln183_4_fu_522_p2 <= (shl_ln183_8_fu_516_p2 xor ap_const_lv512_lc_4);
    xor_ln183_5_fu_577_p2 <= (shl_ln183_10_fu_571_p2 xor ap_const_lv512_lc_4);
    xor_ln183_6_fu_632_p2 <= (shl_ln183_12_fu_626_p2 xor ap_const_lv512_lc_4);
    xor_ln183_7_fu_687_p2 <= (shl_ln183_14_fu_681_p2 xor ap_const_lv512_lc_4);
    xor_ln183_fu_302_p2 <= (shl_ln183_fu_296_p2 xor ap_const_lv512_lc_4);
    xor_ln333_fu_194_p2 <= (icmp_ln335_fu_189_p2 xor ap_const_lv1_1);
    zext_ln183_10_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_4_fu_560_p3),512));
    zext_ln183_11_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_452_fu_550_p4),512));
    zext_ln183_12_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_5_fu_615_p3),512));
    zext_ln183_13_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_fu_605_p4),512));
    zext_ln183_14_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_6_fu_670_p3),512));
    zext_ln183_15_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_454_fu_660_p4),512));
    zext_ln183_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln170_fu_288_p1),512));
    zext_ln183_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_340_p3),512));
    zext_ln183_3_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_330_p4),512));
    zext_ln183_4_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_1_fu_395_p3),512));
    zext_ln183_5_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_449_fu_385_p4),512));
    zext_ln183_6_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_2_fu_450_p3),512));
    zext_ln183_7_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_450_fu_440_p4),512));
    zext_ln183_8_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_3_fu_505_p3),512));
    zext_ln183_9_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_451_fu_495_p4),512));
    zext_ln183_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_fu_281_p3),512));
end behav;
