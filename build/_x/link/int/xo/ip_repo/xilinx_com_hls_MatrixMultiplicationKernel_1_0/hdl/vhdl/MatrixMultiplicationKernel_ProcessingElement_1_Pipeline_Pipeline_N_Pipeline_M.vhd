-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ProcessingElement_1_Pipeline_Pipeline_N_Pipeline_M is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aPipes_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_0_empty_n : IN STD_LOGIC;
    aPipes_0_read : OUT STD_LOGIC;
    aPipes_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aPipes_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_1_full_n : IN STD_LOGIC;
    aPipes_1_write : OUT STD_LOGIC;
    bPipes_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_0_empty_n : IN STD_LOGIC;
    bPipes_0_read : OUT STD_LOGIC;
    bPipes_1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bPipes_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_1_full_n : IN STD_LOGIC;
    bPipes_1_write : OUT STD_LOGIC;
    m0 : IN STD_LOGIC_VECTOR (22 downto 0);
    cBuffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce0 : OUT STD_LOGIC;
    cBuffer_we0 : OUT STD_LOGIC;
    cBuffer_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    cBuffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce1 : OUT STD_LOGIC;
    cBuffer_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    cmp111 : IN STD_LOGIC_VECTOR (0 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    cond90 : IN STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce0 : OUT STD_LOGIC;
    aBuffer_we0 : OUT STD_LOGIC;
    aBuffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    aBuffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce1 : OUT STD_LOGIC;
    aBuffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (26 downto 0);
    cond : IN STD_LOGIC_VECTOR (4 downto 0);
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    brmerge282 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ProcessingElement_1_Pipeline_Pipeline_N_Pipeline_M is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln80_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op64_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bPipes_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bPipes_1_blk_n : STD_LOGIC;
    signal aPipes_0_blk_n : STD_LOGIC;
    signal aPipes_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln67_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_389_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1079_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal first_iter_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_20_fu_444_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln64_20_reg_1093 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_260_fu_451_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_260_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_260_reg_1099_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_260_reg_1099_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_260_reg_1099_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_260_reg_1099_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inBoundsN_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1109_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal aVal_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_296_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_298_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_300_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_302_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_304_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_306_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cBuffer_addr_reg_1218 : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1218_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inBoundsM_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1224_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_148_reg_1229_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_149_reg_1234_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_150_reg_1239_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_151_reg_1244_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_152_reg_1249_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_153_reg_1254_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_154_reg_1259_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_499_reg_1264 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_22_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_22_reg_1269 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_500_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_295_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_501_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_297_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_502_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_299_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_503_reg_1304 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_301_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_504_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_303_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_505_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_305_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_506_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_306_reg_1344_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_308_reg_1350_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_fu_838_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_310_reg_1356_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_312_reg_1362_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_314_reg_1368_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_316_reg_1374_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_318_reg_1380_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_320_reg_1386_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_486_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_488_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_490_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_492_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_494_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_496_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_498_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add91_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add115_cast_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_fu_150 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln67_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n1_fu_154 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten6_fu_158 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln64_fu_369_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (10 downto 0);
    signal aPipes_0_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal aPipes_1_write_local : STD_LOGIC;
    signal bPipes_0_read_local : STD_LOGIC;
    signal bPipes_1_write_local : STD_LOGIC;
    signal aBuffer_we0_local : STD_LOGIC;
    signal aBuffer_ce0_local : STD_LOGIC;
    signal aBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_we0_local : STD_LOGIC;
    signal tmp_308_fu_974_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal cBuffer_ce0_local : STD_LOGIC;
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_403_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln83_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_20_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add91_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_fu_470_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_fu_482_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_cast_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul14_fu_613_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_fu_620_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add115_fu_623_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_634_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add4_fu_637_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_651_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_s_fu_665_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_88_fu_679_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_89_fu_693_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_90_fu_707_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_91_fu_721_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_92_fu_735_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cPrev_2_fu_749_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal inBounds_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_148_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_134_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_149_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_135_fu_894_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_150_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_136_fu_908_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_151_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_137_fu_922_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_152_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_138_fu_936_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_153_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_139_fu_950_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_154_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_140_fu_964_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_140_fu_970_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_139_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_138_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_137_fu_928_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_136_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_135_fu_900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_134_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_ce : STD_LOGIC;
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal grp_fu_305_ce : STD_LOGIC;
    signal grp_fu_309_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_337_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op66_store_state3 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_77 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_7_full_dsp_1_U151 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_281_p0,
        din1 => res_499_reg_1264,
        ce => grp_fu_281_ce,
        dout => grp_fu_281_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U152 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => res_500_reg_1274,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U153 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => res_501_reg_1284,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U154 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => res_502_reg_1294,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U155 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => res_503_reg_1304,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U156 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => res_504_reg_1314,
        ce => grp_fu_301_ce,
        dout => grp_fu_301_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U157 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => res_505_reg_1324,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U158 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => res_506_reg_1334,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U159 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_313_p1,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U160 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_317_p1,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U161 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_321_p1,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U162 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U163 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U164 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_333_p1,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U165 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_337_p1,
        ce => grp_fu_337_ce,
        dout => grp_fu_337_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U166 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_570_p1,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten6_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_363_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_158 <= add_ln64_fu_369_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_158 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_150 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    m1_fu_150 <= add_ln67_fu_424_p2;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n1_fu_154 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    n1_fu_154 <= select_ln64_20_fu_444_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                aVal_reg_1121 <= aBuffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln80_reg_1089 <= and_ln80_fu_419_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                first_iter_1_reg_1085 <= first_iter_1_fu_397_p2;
                icmp_ln67_reg_1074 <= icmp_ln67_fu_383_p2;
                select_ln64_reg_1079 <= select_ln64_fu_389_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln32_306_reg_1344 <= bitcast_ln32_306_fu_830_p1;
                bitcast_ln32_306_reg_1344_pp0_iter10_reg <= bitcast_ln32_306_reg_1344;
                bitcast_ln32_306_reg_1344_pp0_iter11_reg <= bitcast_ln32_306_reg_1344_pp0_iter10_reg;
                bitcast_ln32_306_reg_1344_pp0_iter12_reg <= bitcast_ln32_306_reg_1344_pp0_iter11_reg;
                bitcast_ln32_306_reg_1344_pp0_iter13_reg <= bitcast_ln32_306_reg_1344_pp0_iter12_reg;
                bitcast_ln32_306_reg_1344_pp0_iter14_reg <= bitcast_ln32_306_reg_1344_pp0_iter13_reg;
                bitcast_ln32_306_reg_1344_pp0_iter15_reg <= bitcast_ln32_306_reg_1344_pp0_iter14_reg;
                bitcast_ln32_308_reg_1350 <= bitcast_ln32_308_fu_834_p1;
                bitcast_ln32_308_reg_1350_pp0_iter10_reg <= bitcast_ln32_308_reg_1350;
                bitcast_ln32_308_reg_1350_pp0_iter11_reg <= bitcast_ln32_308_reg_1350_pp0_iter10_reg;
                bitcast_ln32_308_reg_1350_pp0_iter12_reg <= bitcast_ln32_308_reg_1350_pp0_iter11_reg;
                bitcast_ln32_308_reg_1350_pp0_iter13_reg <= bitcast_ln32_308_reg_1350_pp0_iter12_reg;
                bitcast_ln32_308_reg_1350_pp0_iter14_reg <= bitcast_ln32_308_reg_1350_pp0_iter13_reg;
                bitcast_ln32_308_reg_1350_pp0_iter15_reg <= bitcast_ln32_308_reg_1350_pp0_iter14_reg;
                bitcast_ln32_310_reg_1356 <= bitcast_ln32_310_fu_838_p1;
                bitcast_ln32_310_reg_1356_pp0_iter10_reg <= bitcast_ln32_310_reg_1356;
                bitcast_ln32_310_reg_1356_pp0_iter11_reg <= bitcast_ln32_310_reg_1356_pp0_iter10_reg;
                bitcast_ln32_310_reg_1356_pp0_iter12_reg <= bitcast_ln32_310_reg_1356_pp0_iter11_reg;
                bitcast_ln32_310_reg_1356_pp0_iter13_reg <= bitcast_ln32_310_reg_1356_pp0_iter12_reg;
                bitcast_ln32_310_reg_1356_pp0_iter14_reg <= bitcast_ln32_310_reg_1356_pp0_iter13_reg;
                bitcast_ln32_310_reg_1356_pp0_iter15_reg <= bitcast_ln32_310_reg_1356_pp0_iter14_reg;
                bitcast_ln32_312_reg_1362 <= bitcast_ln32_312_fu_842_p1;
                bitcast_ln32_312_reg_1362_pp0_iter10_reg <= bitcast_ln32_312_reg_1362;
                bitcast_ln32_312_reg_1362_pp0_iter11_reg <= bitcast_ln32_312_reg_1362_pp0_iter10_reg;
                bitcast_ln32_312_reg_1362_pp0_iter12_reg <= bitcast_ln32_312_reg_1362_pp0_iter11_reg;
                bitcast_ln32_312_reg_1362_pp0_iter13_reg <= bitcast_ln32_312_reg_1362_pp0_iter12_reg;
                bitcast_ln32_312_reg_1362_pp0_iter14_reg <= bitcast_ln32_312_reg_1362_pp0_iter13_reg;
                bitcast_ln32_312_reg_1362_pp0_iter15_reg <= bitcast_ln32_312_reg_1362_pp0_iter14_reg;
                bitcast_ln32_314_reg_1368 <= bitcast_ln32_314_fu_846_p1;
                bitcast_ln32_314_reg_1368_pp0_iter10_reg <= bitcast_ln32_314_reg_1368;
                bitcast_ln32_314_reg_1368_pp0_iter11_reg <= bitcast_ln32_314_reg_1368_pp0_iter10_reg;
                bitcast_ln32_314_reg_1368_pp0_iter12_reg <= bitcast_ln32_314_reg_1368_pp0_iter11_reg;
                bitcast_ln32_314_reg_1368_pp0_iter13_reg <= bitcast_ln32_314_reg_1368_pp0_iter12_reg;
                bitcast_ln32_314_reg_1368_pp0_iter14_reg <= bitcast_ln32_314_reg_1368_pp0_iter13_reg;
                bitcast_ln32_314_reg_1368_pp0_iter15_reg <= bitcast_ln32_314_reg_1368_pp0_iter14_reg;
                bitcast_ln32_316_reg_1374 <= bitcast_ln32_316_fu_850_p1;
                bitcast_ln32_316_reg_1374_pp0_iter10_reg <= bitcast_ln32_316_reg_1374;
                bitcast_ln32_316_reg_1374_pp0_iter11_reg <= bitcast_ln32_316_reg_1374_pp0_iter10_reg;
                bitcast_ln32_316_reg_1374_pp0_iter12_reg <= bitcast_ln32_316_reg_1374_pp0_iter11_reg;
                bitcast_ln32_316_reg_1374_pp0_iter13_reg <= bitcast_ln32_316_reg_1374_pp0_iter12_reg;
                bitcast_ln32_316_reg_1374_pp0_iter14_reg <= bitcast_ln32_316_reg_1374_pp0_iter13_reg;
                bitcast_ln32_316_reg_1374_pp0_iter15_reg <= bitcast_ln32_316_reg_1374_pp0_iter14_reg;
                bitcast_ln32_318_reg_1380 <= bitcast_ln32_318_fu_854_p1;
                bitcast_ln32_318_reg_1380_pp0_iter10_reg <= bitcast_ln32_318_reg_1380;
                bitcast_ln32_318_reg_1380_pp0_iter11_reg <= bitcast_ln32_318_reg_1380_pp0_iter10_reg;
                bitcast_ln32_318_reg_1380_pp0_iter12_reg <= bitcast_ln32_318_reg_1380_pp0_iter11_reg;
                bitcast_ln32_318_reg_1380_pp0_iter13_reg <= bitcast_ln32_318_reg_1380_pp0_iter12_reg;
                bitcast_ln32_318_reg_1380_pp0_iter14_reg <= bitcast_ln32_318_reg_1380_pp0_iter13_reg;
                bitcast_ln32_318_reg_1380_pp0_iter15_reg <= bitcast_ln32_318_reg_1380_pp0_iter14_reg;
                bitcast_ln32_320_reg_1386 <= bitcast_ln32_320_fu_858_p1;
                bitcast_ln32_320_reg_1386_pp0_iter10_reg <= bitcast_ln32_320_reg_1386;
                bitcast_ln32_320_reg_1386_pp0_iter11_reg <= bitcast_ln32_320_reg_1386_pp0_iter10_reg;
                bitcast_ln32_320_reg_1386_pp0_iter12_reg <= bitcast_ln32_320_reg_1386_pp0_iter11_reg;
                bitcast_ln32_320_reg_1386_pp0_iter13_reg <= bitcast_ln32_320_reg_1386_pp0_iter12_reg;
                bitcast_ln32_320_reg_1386_pp0_iter14_reg <= bitcast_ln32_320_reg_1386_pp0_iter13_reg;
                bitcast_ln32_320_reg_1386_pp0_iter15_reg <= bitcast_ln32_320_reg_1386_pp0_iter14_reg;
                cBuffer_addr_reg_1218 <= add115_cast_fu_629_p1(10 - 1 downto 0);
                cBuffer_addr_reg_1218_pp0_iter10_reg <= cBuffer_addr_reg_1218_pp0_iter9_reg;
                cBuffer_addr_reg_1218_pp0_iter11_reg <= cBuffer_addr_reg_1218_pp0_iter10_reg;
                cBuffer_addr_reg_1218_pp0_iter12_reg <= cBuffer_addr_reg_1218_pp0_iter11_reg;
                cBuffer_addr_reg_1218_pp0_iter13_reg <= cBuffer_addr_reg_1218_pp0_iter12_reg;
                cBuffer_addr_reg_1218_pp0_iter14_reg <= cBuffer_addr_reg_1218_pp0_iter13_reg;
                cBuffer_addr_reg_1218_pp0_iter15_reg <= cBuffer_addr_reg_1218_pp0_iter14_reg;
                cBuffer_addr_reg_1218_pp0_iter8_reg <= cBuffer_addr_reg_1218;
                cBuffer_addr_reg_1218_pp0_iter9_reg <= cBuffer_addr_reg_1218_pp0_iter8_reg;
                empty_260_reg_1099 <= empty_260_fu_451_p1;
                empty_260_reg_1099_pp0_iter3_reg <= empty_260_reg_1099;
                empty_260_reg_1099_pp0_iter4_reg <= empty_260_reg_1099_pp0_iter3_reg;
                empty_260_reg_1099_pp0_iter5_reg <= empty_260_reg_1099_pp0_iter4_reg;
                empty_260_reg_1099_pp0_iter6_reg <= empty_260_reg_1099_pp0_iter5_reg;
                inBoundsM_148_reg_1229 <= inBoundsM_148_fu_660_p2;
                inBoundsM_148_reg_1229_pp0_iter10_reg <= inBoundsM_148_reg_1229_pp0_iter9_reg;
                inBoundsM_148_reg_1229_pp0_iter11_reg <= inBoundsM_148_reg_1229_pp0_iter10_reg;
                inBoundsM_148_reg_1229_pp0_iter12_reg <= inBoundsM_148_reg_1229_pp0_iter11_reg;
                inBoundsM_148_reg_1229_pp0_iter13_reg <= inBoundsM_148_reg_1229_pp0_iter12_reg;
                inBoundsM_148_reg_1229_pp0_iter14_reg <= inBoundsM_148_reg_1229_pp0_iter13_reg;
                inBoundsM_148_reg_1229_pp0_iter15_reg <= inBoundsM_148_reg_1229_pp0_iter14_reg;
                inBoundsM_148_reg_1229_pp0_iter8_reg <= inBoundsM_148_reg_1229;
                inBoundsM_148_reg_1229_pp0_iter9_reg <= inBoundsM_148_reg_1229_pp0_iter8_reg;
                inBoundsM_149_reg_1234 <= inBoundsM_149_fu_674_p2;
                inBoundsM_149_reg_1234_pp0_iter10_reg <= inBoundsM_149_reg_1234_pp0_iter9_reg;
                inBoundsM_149_reg_1234_pp0_iter11_reg <= inBoundsM_149_reg_1234_pp0_iter10_reg;
                inBoundsM_149_reg_1234_pp0_iter12_reg <= inBoundsM_149_reg_1234_pp0_iter11_reg;
                inBoundsM_149_reg_1234_pp0_iter13_reg <= inBoundsM_149_reg_1234_pp0_iter12_reg;
                inBoundsM_149_reg_1234_pp0_iter14_reg <= inBoundsM_149_reg_1234_pp0_iter13_reg;
                inBoundsM_149_reg_1234_pp0_iter15_reg <= inBoundsM_149_reg_1234_pp0_iter14_reg;
                inBoundsM_149_reg_1234_pp0_iter8_reg <= inBoundsM_149_reg_1234;
                inBoundsM_149_reg_1234_pp0_iter9_reg <= inBoundsM_149_reg_1234_pp0_iter8_reg;
                inBoundsM_150_reg_1239 <= inBoundsM_150_fu_688_p2;
                inBoundsM_150_reg_1239_pp0_iter10_reg <= inBoundsM_150_reg_1239_pp0_iter9_reg;
                inBoundsM_150_reg_1239_pp0_iter11_reg <= inBoundsM_150_reg_1239_pp0_iter10_reg;
                inBoundsM_150_reg_1239_pp0_iter12_reg <= inBoundsM_150_reg_1239_pp0_iter11_reg;
                inBoundsM_150_reg_1239_pp0_iter13_reg <= inBoundsM_150_reg_1239_pp0_iter12_reg;
                inBoundsM_150_reg_1239_pp0_iter14_reg <= inBoundsM_150_reg_1239_pp0_iter13_reg;
                inBoundsM_150_reg_1239_pp0_iter15_reg <= inBoundsM_150_reg_1239_pp0_iter14_reg;
                inBoundsM_150_reg_1239_pp0_iter8_reg <= inBoundsM_150_reg_1239;
                inBoundsM_150_reg_1239_pp0_iter9_reg <= inBoundsM_150_reg_1239_pp0_iter8_reg;
                inBoundsM_151_reg_1244 <= inBoundsM_151_fu_702_p2;
                inBoundsM_151_reg_1244_pp0_iter10_reg <= inBoundsM_151_reg_1244_pp0_iter9_reg;
                inBoundsM_151_reg_1244_pp0_iter11_reg <= inBoundsM_151_reg_1244_pp0_iter10_reg;
                inBoundsM_151_reg_1244_pp0_iter12_reg <= inBoundsM_151_reg_1244_pp0_iter11_reg;
                inBoundsM_151_reg_1244_pp0_iter13_reg <= inBoundsM_151_reg_1244_pp0_iter12_reg;
                inBoundsM_151_reg_1244_pp0_iter14_reg <= inBoundsM_151_reg_1244_pp0_iter13_reg;
                inBoundsM_151_reg_1244_pp0_iter15_reg <= inBoundsM_151_reg_1244_pp0_iter14_reg;
                inBoundsM_151_reg_1244_pp0_iter8_reg <= inBoundsM_151_reg_1244;
                inBoundsM_151_reg_1244_pp0_iter9_reg <= inBoundsM_151_reg_1244_pp0_iter8_reg;
                inBoundsM_152_reg_1249 <= inBoundsM_152_fu_716_p2;
                inBoundsM_152_reg_1249_pp0_iter10_reg <= inBoundsM_152_reg_1249_pp0_iter9_reg;
                inBoundsM_152_reg_1249_pp0_iter11_reg <= inBoundsM_152_reg_1249_pp0_iter10_reg;
                inBoundsM_152_reg_1249_pp0_iter12_reg <= inBoundsM_152_reg_1249_pp0_iter11_reg;
                inBoundsM_152_reg_1249_pp0_iter13_reg <= inBoundsM_152_reg_1249_pp0_iter12_reg;
                inBoundsM_152_reg_1249_pp0_iter14_reg <= inBoundsM_152_reg_1249_pp0_iter13_reg;
                inBoundsM_152_reg_1249_pp0_iter15_reg <= inBoundsM_152_reg_1249_pp0_iter14_reg;
                inBoundsM_152_reg_1249_pp0_iter8_reg <= inBoundsM_152_reg_1249;
                inBoundsM_152_reg_1249_pp0_iter9_reg <= inBoundsM_152_reg_1249_pp0_iter8_reg;
                inBoundsM_153_reg_1254 <= inBoundsM_153_fu_730_p2;
                inBoundsM_153_reg_1254_pp0_iter10_reg <= inBoundsM_153_reg_1254_pp0_iter9_reg;
                inBoundsM_153_reg_1254_pp0_iter11_reg <= inBoundsM_153_reg_1254_pp0_iter10_reg;
                inBoundsM_153_reg_1254_pp0_iter12_reg <= inBoundsM_153_reg_1254_pp0_iter11_reg;
                inBoundsM_153_reg_1254_pp0_iter13_reg <= inBoundsM_153_reg_1254_pp0_iter12_reg;
                inBoundsM_153_reg_1254_pp0_iter14_reg <= inBoundsM_153_reg_1254_pp0_iter13_reg;
                inBoundsM_153_reg_1254_pp0_iter15_reg <= inBoundsM_153_reg_1254_pp0_iter14_reg;
                inBoundsM_153_reg_1254_pp0_iter8_reg <= inBoundsM_153_reg_1254;
                inBoundsM_153_reg_1254_pp0_iter9_reg <= inBoundsM_153_reg_1254_pp0_iter8_reg;
                inBoundsM_154_reg_1259 <= inBoundsM_154_fu_744_p2;
                inBoundsM_154_reg_1259_pp0_iter10_reg <= inBoundsM_154_reg_1259_pp0_iter9_reg;
                inBoundsM_154_reg_1259_pp0_iter11_reg <= inBoundsM_154_reg_1259_pp0_iter10_reg;
                inBoundsM_154_reg_1259_pp0_iter12_reg <= inBoundsM_154_reg_1259_pp0_iter11_reg;
                inBoundsM_154_reg_1259_pp0_iter13_reg <= inBoundsM_154_reg_1259_pp0_iter12_reg;
                inBoundsM_154_reg_1259_pp0_iter14_reg <= inBoundsM_154_reg_1259_pp0_iter13_reg;
                inBoundsM_154_reg_1259_pp0_iter15_reg <= inBoundsM_154_reg_1259_pp0_iter14_reg;
                inBoundsM_154_reg_1259_pp0_iter8_reg <= inBoundsM_154_reg_1259;
                inBoundsM_154_reg_1259_pp0_iter9_reg <= inBoundsM_154_reg_1259_pp0_iter8_reg;
                inBoundsM_reg_1224 <= inBoundsM_fu_646_p2;
                inBoundsM_reg_1224_pp0_iter10_reg <= inBoundsM_reg_1224_pp0_iter9_reg;
                inBoundsM_reg_1224_pp0_iter11_reg <= inBoundsM_reg_1224_pp0_iter10_reg;
                inBoundsM_reg_1224_pp0_iter12_reg <= inBoundsM_reg_1224_pp0_iter11_reg;
                inBoundsM_reg_1224_pp0_iter13_reg <= inBoundsM_reg_1224_pp0_iter12_reg;
                inBoundsM_reg_1224_pp0_iter14_reg <= inBoundsM_reg_1224_pp0_iter13_reg;
                inBoundsM_reg_1224_pp0_iter15_reg <= inBoundsM_reg_1224_pp0_iter14_reg;
                inBoundsM_reg_1224_pp0_iter8_reg <= inBoundsM_reg_1224;
                inBoundsM_reg_1224_pp0_iter9_reg <= inBoundsM_reg_1224_pp0_iter8_reg;
                inBoundsN_reg_1109 <= inBoundsN_fu_491_p2;
                inBoundsN_reg_1109_pp0_iter10_reg <= inBoundsN_reg_1109_pp0_iter9_reg;
                inBoundsN_reg_1109_pp0_iter11_reg <= inBoundsN_reg_1109_pp0_iter10_reg;
                inBoundsN_reg_1109_pp0_iter12_reg <= inBoundsN_reg_1109_pp0_iter11_reg;
                inBoundsN_reg_1109_pp0_iter13_reg <= inBoundsN_reg_1109_pp0_iter12_reg;
                inBoundsN_reg_1109_pp0_iter14_reg <= inBoundsN_reg_1109_pp0_iter13_reg;
                inBoundsN_reg_1109_pp0_iter15_reg <= inBoundsN_reg_1109_pp0_iter14_reg;
                inBoundsN_reg_1109_pp0_iter4_reg <= inBoundsN_reg_1109;
                inBoundsN_reg_1109_pp0_iter5_reg <= inBoundsN_reg_1109_pp0_iter4_reg;
                inBoundsN_reg_1109_pp0_iter6_reg <= inBoundsN_reg_1109_pp0_iter5_reg;
                inBoundsN_reg_1109_pp0_iter7_reg <= inBoundsN_reg_1109_pp0_iter6_reg;
                inBoundsN_reg_1109_pp0_iter8_reg <= inBoundsN_reg_1109_pp0_iter7_reg;
                inBoundsN_reg_1109_pp0_iter9_reg <= inBoundsN_reg_1109_pp0_iter8_reg;
                res_486_reg_1397 <= grp_fu_285_p2;
                res_488_reg_1402 <= grp_fu_289_p2;
                res_490_reg_1407 <= grp_fu_293_p2;
                res_492_reg_1412 <= grp_fu_297_p2;
                res_494_reg_1417 <= grp_fu_301_p2;
                res_496_reg_1422 <= grp_fu_305_p2;
                res_498_reg_1427 <= grp_fu_309_p2;
                res_499_reg_1264 <= grp_fu_313_p2;
                res_500_reg_1274 <= grp_fu_317_p2;
                res_501_reg_1284 <= grp_fu_321_p2;
                res_502_reg_1294 <= grp_fu_325_p2;
                res_503_reg_1304 <= grp_fu_329_p2;
                res_504_reg_1314 <= grp_fu_333_p2;
                res_505_reg_1324 <= grp_fu_337_p2;
                res_506_reg_1334 <= grp_fu_341_p2;
                res_reg_1392 <= grp_fu_281_p2;
                select_ln64_20_reg_1093 <= select_ln64_20_fu_444_p3;
                select_ln64_reg_1079_pp0_iter2_reg <= select_ln64_reg_1079;
                select_ln64_reg_1079_pp0_iter3_reg <= select_ln64_reg_1079_pp0_iter2_reg;
                select_ln64_reg_1079_pp0_iter4_reg <= select_ln64_reg_1079_pp0_iter3_reg;
                select_ln64_reg_1079_pp0_iter5_reg <= select_ln64_reg_1079_pp0_iter4_reg;
                select_ln64_reg_1079_pp0_iter6_reg <= select_ln64_reg_1079_pp0_iter5_reg;
                tmp_295_reg_1279 <= cPrev_2_fu_749_p3(63 downto 32);
                tmp_296_reg_1136 <= bPipes_0_dout(95 downto 64);
                tmp_297_reg_1289 <= cPrev_2_fu_749_p3(95 downto 64);
                tmp_298_reg_1141 <= bPipes_0_dout(127 downto 96);
                tmp_299_reg_1299 <= cPrev_2_fu_749_p3(127 downto 96);
                tmp_300_reg_1146 <= bPipes_0_dout(159 downto 128);
                tmp_301_reg_1309 <= cPrev_2_fu_749_p3(159 downto 128);
                tmp_302_reg_1151 <= bPipes_0_dout(191 downto 160);
                tmp_303_reg_1319 <= cPrev_2_fu_749_p3(191 downto 160);
                tmp_304_reg_1156 <= bPipes_0_dout(223 downto 192);
                tmp_305_reg_1329 <= cPrev_2_fu_749_p3(223 downto 192);
                tmp_306_reg_1161 <= bPipes_0_dout(255 downto 224);
                tmp_307_reg_1339 <= cPrev_2_fu_749_p3(255 downto 224);
                tmp_s_reg_1131 <= bPipes_0_dout(63 downto 32);
                trunc_ln170_22_reg_1269 <= trunc_ln170_22_fu_756_p1;
                trunc_ln170_reg_1126 <= trunc_ln170_fu_496_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    aBuffer_address0 <= add_cast_fu_460_p1(5 - 1 downto 0);
    aBuffer_address1 <= add91_cast_fu_477_p1(5 - 1 downto 0);
    aBuffer_ce0 <= aBuffer_ce0_local;

    aBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce0_local <= ap_const_logic_1;
        else 
            aBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_ce1 <= aBuffer_ce1_local;

    aBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce1_local <= ap_const_logic_1;
        else 
            aBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_d0 <= aPipes_0_dout;
    aBuffer_we0 <= aBuffer_we0_local;

    aBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln80_reg_1089, first_iter_1_reg_1085, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_1_reg_1085 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_reg_1089) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_we0_local <= ap_const_logic_1;
        else 
            aBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, aPipes_0_empty_n, and_ln80_reg_1089, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln80_reg_1089) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_0_blk_n <= aPipes_0_empty_n;
        else 
            aPipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_0_read <= aPipes_0_read_local;

    aPipes_0_read_local_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln80_reg_1089, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln80_reg_1089) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_0_read_local <= ap_const_logic_1;
        else 
            aPipes_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, aPipes_1_full_n, ap_predicate_op64_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op64_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_1_blk_n <= aPipes_1_full_n;
        else 
            aPipes_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_1_din <= aPipes_0_dout;
    aPipes_1_write <= aPipes_1_write_local;

    aPipes_1_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op64_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op64_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_1_write_local <= ap_const_logic_1;
        else 
            aPipes_1_write_local <= ap_const_logic_0;
        end if; 
    end process;

    add106_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add106_fu_482_p2),32));
    add106_fu_482_p2 <= std_logic_vector(unsigned(mul) + unsigned(zext_ln64_fu_470_p1));
    add115_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add115_fu_623_p2),64));
    add115_fu_623_p2 <= std_logic_vector(unsigned(mul14_fu_613_p3) + unsigned(zext_ln67_fu_620_p1));
    add4_fu_637_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_0);
    add91_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add91_fu_473_p2),64));
    add91_fu_473_p2 <= std_logic_vector(unsigned(select_ln64_20_reg_1093) + unsigned(cond90));
    add_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_455_p2),64));
    add_fu_455_p2 <= std_logic_vector(unsigned(select_ln64_20_fu_444_p3) + unsigned(cond));
    add_ln64_20_fu_438_p2 <= std_logic_vector(unsigned(n1_fu_154) + unsigned(ap_const_lv5_1));
    add_ln64_fu_369_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv11_1));
    add_ln67_fu_424_p2 <= std_logic_vector(unsigned(select_ln64_fu_389_p3) + unsigned(ap_const_lv7_1));
    and_ln80_fu_419_p2 <= (icmp_ln83_fu_413_p2 and brmerge282);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(aPipes_0_empty_n, and_ln80_reg_1089, aPipes_1_full_n, ap_predicate_op64_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op64_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = aPipes_1_full_n)) or ((ap_const_lv1_1 = and_ln80_reg_1089) and (ap_const_logic_0 = aPipes_0_empty_n)));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(bPipes_0_empty_n, bPipes_1_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((bPipes_1_full_n = ap_const_logic_0) or (bPipes_0_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln64_fu_363_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_363_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_66_assign_proc : process(ap_predicate_op66_store_state3)
    begin
                ap_enable_operation_66 <= (ap_predicate_op66_store_state3 = ap_const_boolean_1);
    end process;

        ap_enable_operation_76 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_77 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op64_write_state3_assign_proc : process(and_ln80_reg_1089, first_iter_1_reg_1085)
    begin
                ap_predicate_op64_write_state3 <= ((first_iter_1_reg_1085 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_reg_1089));
    end process;


    ap_predicate_op66_store_state3_assign_proc : process(and_ln80_reg_1089, first_iter_1_reg_1085)
    begin
                ap_predicate_op66_store_state3 <= ((first_iter_1_reg_1085 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_reg_1089));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_158)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_158;
        end if; 
    end process;


    bPipes_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, bPipes_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_0_blk_n <= bPipes_0_empty_n;
        else 
            bPipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_0_read <= bPipes_0_read_local;

    bPipes_0_read_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_0_read_local <= ap_const_logic_1;
        else 
            bPipes_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    bPipes_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, bPipes_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_1_blk_n <= bPipes_1_full_n;
        else 
            bPipes_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_1_din <= bPipes_0_dout;
    bPipes_1_write <= bPipes_1_write_local;

    bPipes_1_write_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_1_write_local <= ap_const_logic_1;
        else 
            bPipes_1_write_local <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_306_fu_830_p1 <= trunc_ln170_22_reg_1269;
    bitcast_ln32_308_fu_834_p1 <= tmp_295_reg_1279;
    bitcast_ln32_310_fu_838_p1 <= tmp_297_reg_1289;
    bitcast_ln32_312_fu_842_p1 <= tmp_299_reg_1299;
    bitcast_ln32_314_fu_846_p1 <= tmp_301_reg_1309;
    bitcast_ln32_316_fu_850_p1 <= tmp_303_reg_1319;
    bitcast_ln32_318_fu_854_p1 <= tmp_305_reg_1329;
    bitcast_ln32_320_fu_858_p1 <= tmp_307_reg_1339;
    bitcast_ln32_fu_570_p1 <= aVal_reg_1121;
    bitcast_ln36_134_fu_886_p1 <= select_ln296_134_fu_880_p3;
    bitcast_ln36_135_fu_900_p1 <= select_ln296_135_fu_894_p3;
    bitcast_ln36_136_fu_914_p1 <= select_ln296_136_fu_908_p3;
    bitcast_ln36_137_fu_928_p1 <= select_ln296_137_fu_922_p3;
    bitcast_ln36_138_fu_942_p1 <= select_ln296_138_fu_936_p3;
    bitcast_ln36_139_fu_956_p1 <= select_ln296_139_fu_950_p3;
    bitcast_ln36_140_fu_970_p1 <= select_ln296_140_fu_964_p3;
    bitcast_ln36_fu_872_p1 <= select_ln296_fu_866_p3;
    cBuffer_address0 <= cBuffer_addr_reg_1218_pp0_iter15_reg;
    cBuffer_address1 <= add115_cast_fu_629_p1(10 - 1 downto 0);
    cBuffer_ce0 <= cBuffer_ce0_local;

    cBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce0_local <= ap_const_logic_1;
        else 
            cBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_ce1 <= cBuffer_ce1_local;

    cBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce1_local <= ap_const_logic_1;
        else 
            cBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_d0 <= tmp_308_fu_974_p9;
    cBuffer_we0 <= cBuffer_we0_local;

    cBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_we0_local <= ap_const_logic_1;
        else 
            cBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    cPrev_2_fu_749_p3 <= 
        ap_const_lv256_lc_1 when (cmp111(0) = '1') else 
        cBuffer_q1;
    empty_260_fu_451_p1 <= select_ln64_20_fu_444_p3(4 - 1 downto 0);
    empty_fu_634_p1 <= select_ln64_reg_1079_pp0_iter6_reg(6 - 1 downto 0);
    first_iter_1_fu_397_p2 <= "1" when (select_ln64_fu_389_p3 = ap_const_lv7_0) else "0";

    grp_fu_281_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_281_ce <= ap_const_logic_1;
        else 
            grp_fu_281_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_281_p0 <= trunc_ln170_22_reg_1269;

    grp_fu_285_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= tmp_295_reg_1279;

    grp_fu_289_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_289_ce <= ap_const_logic_1;
        else 
            grp_fu_289_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p0 <= tmp_297_reg_1289;

    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= tmp_299_reg_1299;

    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= tmp_301_reg_1309;

    grp_fu_301_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_301_ce <= ap_const_logic_1;
        else 
            grp_fu_301_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p0 <= tmp_303_reg_1319;

    grp_fu_305_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_305_ce <= ap_const_logic_1;
        else 
            grp_fu_305_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_305_p0 <= tmp_305_reg_1329;

    grp_fu_309_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_309_ce <= ap_const_logic_1;
        else 
            grp_fu_309_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= tmp_307_reg_1339;

    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_313_p1 <= trunc_ln170_reg_1126;

    grp_fu_317_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_317_ce <= ap_const_logic_1;
        else 
            grp_fu_317_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_317_p1 <= tmp_s_reg_1131;

    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p1 <= tmp_296_reg_1136;

    grp_fu_325_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_325_ce <= ap_const_logic_1;
        else 
            grp_fu_325_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_325_p1 <= tmp_298_reg_1141;

    grp_fu_329_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_329_ce <= ap_const_logic_1;
        else 
            grp_fu_329_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_329_p1 <= tmp_300_reg_1146;

    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p1 <= tmp_302_reg_1151;

    grp_fu_337_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_337_ce <= ap_const_logic_1;
        else 
            grp_fu_337_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_337_p1 <= tmp_304_reg_1156;

    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_p1 <= tmp_306_reg_1161;
    icmp_ln64_fu_363_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv11_400) else "0";
    icmp_ln67_fu_383_p2 <= "1" when (m1_fu_150 = ap_const_lv7_40) else "0";
    icmp_ln83_fu_413_p2 <= "1" when (tmp_fu_403_p4 = ap_const_lv2_0) else "0";
    inBoundsM_148_fu_660_p2 <= "1" when (unsigned(or_ln_fu_651_p4) < unsigned(size_m)) else "0";
    inBoundsM_149_fu_674_p2 <= "1" when (unsigned(or_ln125_s_fu_665_p4) < unsigned(size_m)) else "0";
    inBoundsM_150_fu_688_p2 <= "1" when (unsigned(or_ln125_88_fu_679_p4) < unsigned(size_m)) else "0";
    inBoundsM_151_fu_702_p2 <= "1" when (unsigned(or_ln125_89_fu_693_p4) < unsigned(size_m)) else "0";
    inBoundsM_152_fu_716_p2 <= "1" when (unsigned(or_ln125_90_fu_707_p4) < unsigned(size_m)) else "0";
    inBoundsM_153_fu_730_p2 <= "1" when (unsigned(or_ln125_91_fu_721_p4) < unsigned(size_m)) else "0";
    inBoundsM_154_fu_744_p2 <= "1" when (unsigned(or_ln125_92_fu_735_p4) < unsigned(size_m)) else "0";
    inBoundsM_fu_646_p2 <= "1" when (unsigned(add4_fu_637_p4) < unsigned(size_m)) else "0";
    inBoundsN_fu_491_p2 <= "1" when (unsigned(add106_cast_fu_487_p1) < unsigned(size_n)) else "0";
    inBounds_148_fu_876_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_148_reg_1229_pp0_iter15_reg);
    inBounds_149_fu_890_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_149_reg_1234_pp0_iter15_reg);
    inBounds_150_fu_904_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_150_reg_1239_pp0_iter15_reg);
    inBounds_151_fu_918_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_151_reg_1244_pp0_iter15_reg);
    inBounds_152_fu_932_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_152_reg_1249_pp0_iter15_reg);
    inBounds_153_fu_946_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_153_reg_1254_pp0_iter15_reg);
    inBounds_154_fu_960_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_154_reg_1259_pp0_iter15_reg);
    inBounds_fu_862_p2 <= (inBoundsN_reg_1109_pp0_iter15_reg and inBoundsM_reg_1224_pp0_iter15_reg);
    mul14_fu_613_p3 <= (empty_260_reg_1099_pp0_iter6_reg & ap_const_lv6_0);
    or_ln125_88_fu_679_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_3);
    or_ln125_89_fu_693_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_4);
    or_ln125_90_fu_707_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_5);
    or_ln125_91_fu_721_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_6);
    or_ln125_92_fu_735_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_7);
    or_ln125_s_fu_665_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_2);
    or_ln_fu_651_p4 <= ((m0 & empty_fu_634_p1) & ap_const_lv3_1);
    select_ln296_134_fu_880_p3 <= 
        res_486_reg_1397 when (inBounds_148_fu_876_p2(0) = '1') else 
        bitcast_ln32_308_reg_1350_pp0_iter15_reg;
    select_ln296_135_fu_894_p3 <= 
        res_488_reg_1402 when (inBounds_149_fu_890_p2(0) = '1') else 
        bitcast_ln32_310_reg_1356_pp0_iter15_reg;
    select_ln296_136_fu_908_p3 <= 
        res_490_reg_1407 when (inBounds_150_fu_904_p2(0) = '1') else 
        bitcast_ln32_312_reg_1362_pp0_iter15_reg;
    select_ln296_137_fu_922_p3 <= 
        res_492_reg_1412 when (inBounds_151_fu_918_p2(0) = '1') else 
        bitcast_ln32_314_reg_1368_pp0_iter15_reg;
    select_ln296_138_fu_936_p3 <= 
        res_494_reg_1417 when (inBounds_152_fu_932_p2(0) = '1') else 
        bitcast_ln32_316_reg_1374_pp0_iter15_reg;
    select_ln296_139_fu_950_p3 <= 
        res_496_reg_1422 when (inBounds_153_fu_946_p2(0) = '1') else 
        bitcast_ln32_318_reg_1380_pp0_iter15_reg;
    select_ln296_140_fu_964_p3 <= 
        res_498_reg_1427 when (inBounds_154_fu_960_p2(0) = '1') else 
        bitcast_ln32_320_reg_1386_pp0_iter15_reg;
    select_ln296_fu_866_p3 <= 
        res_reg_1392 when (inBounds_fu_862_p2(0) = '1') else 
        bitcast_ln32_306_reg_1344_pp0_iter15_reg;
    select_ln64_20_fu_444_p3 <= 
        add_ln64_20_fu_438_p2 when (icmp_ln67_reg_1074(0) = '1') else 
        n1_fu_154;
    select_ln64_fu_389_p3 <= 
        ap_const_lv7_0 when (icmp_ln67_fu_383_p2(0) = '1') else 
        m1_fu_150;
    tmp_308_fu_974_p9 <= (((((((bitcast_ln36_140_fu_970_p1 & bitcast_ln36_139_fu_956_p1) & bitcast_ln36_138_fu_942_p1) & bitcast_ln36_137_fu_928_p1) & bitcast_ln36_136_fu_914_p1) & bitcast_ln36_135_fu_900_p1) & bitcast_ln36_134_fu_886_p1) & bitcast_ln36_fu_872_p1);
    tmp_fu_403_p4 <= select_ln64_fu_389_p3(6 downto 5);
    trunc_ln170_22_fu_756_p1 <= cPrev_2_fu_749_p3(32 - 1 downto 0);
    trunc_ln170_fu_496_p1 <= bPipes_0_dout(32 - 1 downto 0);
    zext_ln64_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_20_reg_1093),27));
    zext_ln67_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_reg_1079_pp0_iter6_reg),10));
end behav;
