-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ConvertWidthB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    bMemory_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    bMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    bMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    bMemory_empty_n : IN STD_LOGIC;
    bMemory_read : OUT STD_LOGIC;
    bFeed_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bFeed_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bFeed_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bFeed_full_n : IN STD_LOGIC;
    bFeed_write : OUT STD_LOGIC;
    size_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_n_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_empty_n : IN STD_LOGIC;
    size_n_read : OUT STD_LOGIC;
    size_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_k_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_empty_n : IN STD_LOGIC;
    size_k_read : OUT STD_LOGIC;
    size_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_m_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_empty_n : IN STD_LOGIC;
    size_m_read : OUT STD_LOGIC;
    size_n_c3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_n_c3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c3_full_n : IN STD_LOGIC;
    size_n_c3_write : OUT STD_LOGIC;
    size_k_c6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_k_c6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c6_full_n : IN STD_LOGIC;
    size_k_c6_write : OUT STD_LOGIC;
    size_m_c11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_m_c11_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c11_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c11_full_n : IN STD_LOGIC;
    size_m_c11_write : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiplicationKernel_ConvertWidthB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv33_1FF : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal size_n_blk_n : STD_LOGIC;
    signal size_k_blk_n : STD_LOGIC;
    signal size_m_blk_n : STD_LOGIC;
    signal size_n_c3_blk_n : STD_LOGIC;
    signal size_k_c6_blk_n : STD_LOGIC;
    signal size_m_c11_blk_n : STD_LOGIC;
    signal size_k_3_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal lshr_ln_reg_181 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln3_reg_186 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_107_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal mul_ln132_reg_201 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_167_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_s_reg_211 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_idle : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_ready : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bMemory_read : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_write : STD_LOGIC;
    signal grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal size_m_read_local : STD_LOGIC;
    signal size_m_c11_write_local : STD_LOGIC;
    signal size_k_read_local : STD_LOGIC;
    signal size_k_c6_write_local : STD_LOGIC;
    signal size_n_read_local : STD_LOGIC;
    signal size_n_c3_write_local : STD_LOGIC;
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln111_fu_115_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln111_fu_119_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln116_fu_135_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln116_fu_139_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal grp_fu_107_p00 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_107_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_111_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bMemory_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        bMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        bMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        bMemory_empty_n : IN STD_LOGIC;
        bMemory_read : OUT STD_LOGIC;
        bFeed_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        bFeed_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bFeed_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bFeed_full_n : IN STD_LOGIC;
        bFeed_write : OUT STD_LOGIC;
        bound : IN STD_LOGIC_VECTOR (60 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_24ns_32ns_55_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_55s_24ns_55_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (54 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;



begin
    grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98 : component MatrixMultiplicationKernel_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start,
        ap_done => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done,
        ap_idle => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_idle,
        ap_ready => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_ready,
        bMemory_dout => bMemory_dout,
        bMemory_num_data_valid => ap_const_lv7_0,
        bMemory_fifo_cap => ap_const_lv7_0,
        bMemory_empty_n => bMemory_empty_n,
        bMemory_read => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bMemory_read,
        bFeed_din => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_din,
        bFeed_num_data_valid => ap_const_lv3_0,
        bFeed_fifo_cap => ap_const_lv3_0,
        bFeed_full_n => bFeed_full_n,
        bFeed_write => grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_write,
        bound => tmp_s_reg_211);

    mul_24ns_32ns_55_2_1_U124 : component MatrixMultiplicationKernel_mul_24ns_32ns_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 24,
        din1_WIDTH => 32,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_107_p0,
        din1 => grp_fu_107_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_107_p2);

    mul_55s_24ns_55_5_1_U125 : component MatrixMultiplicationKernel_mul_55s_24ns_55_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 55,
        din1_WIDTH => 24,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln132_reg_201,
        din1 => grp_fu_111_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                lshr_ln3_reg_186 <= add_ln116_fu_139_p2(32 downto 9);
                lshr_ln_reg_181 <= add_ln111_fu_119_p2(32 downto 9);
                size_k_3_reg_176 <= size_k_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln132_reg_201 <= grp_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    tmp_s_reg_211(60 downto 6) <= tmp_s_fu_167_p3(60 downto 6);
            end if;
        end if;
    end process;
    tmp_s_reg_211(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln111_fu_119_p2 <= std_logic_vector(unsigned(zext_ln111_fu_115_p1) + unsigned(ap_const_lv33_1FF));
    add_ln116_fu_139_p2 <= std_logic_vector(unsigned(zext_ln116_fu_135_p1) + unsigned(ap_const_lv33_1FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done)
    begin
        if ((grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, size_n_empty_n, size_k_empty_n, size_m_empty_n, size_n_c3_full_n, size_k_c6_full_n, size_m_c11_full_n)
    begin
                ap_block_state1 <= ((size_m_c11_full_n = ap_const_logic_0) or (size_k_c6_full_n = ap_const_logic_0) or (size_n_c3_full_n = ap_const_logic_0) or (size_m_empty_n = ap_const_logic_0) or (size_k_empty_n = ap_const_logic_0) or (size_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bFeed_din <= grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_din;

    bFeed_write_assign_proc : process(grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_write, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bFeed_write <= grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bFeed_write;
        else 
            bFeed_write <= ap_const_logic_0;
        end if; 
    end process;


    bMemory_read_assign_proc : process(grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bMemory_read, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bMemory_read <= grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_bMemory_read;
        else 
            bMemory_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start <= grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_start_reg;
    grp_fu_107_p0 <= grp_fu_107_p00(24 - 1 downto 0);
    grp_fu_107_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_reg_186),55));
    grp_fu_107_p1 <= grp_fu_107_p10(32 - 1 downto 0);
    grp_fu_107_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_k_3_reg_176),55));
    grp_fu_111_p1 <= grp_fu_111_p10(24 - 1 downto 0);
    grp_fu_111_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_181),55));

    internal_ap_ready_assign_proc : process(grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_ConvertWidthB_Pipeline_ConvertWidthB_Outer_ConvertWidthB_Memory_fu_98_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    size_k_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_k_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_blk_n <= size_k_empty_n;
        else 
            size_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_k_c6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_k_c6_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_c6_blk_n <= size_k_c6_full_n;
        else 
            size_k_c6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_k_c6_din <= size_k_dout;
    size_k_c6_write <= size_k_c6_write_local;

    size_k_c6_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_k_c6_write_local <= ap_const_logic_1;
        else 
            size_k_c6_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_k_read <= size_k_read_local;

    size_k_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_k_read_local <= ap_const_logic_1;
        else 
            size_k_read_local <= ap_const_logic_0;
        end if; 
    end process;


    size_m_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_blk_n <= size_m_empty_n;
        else 
            size_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_m_c11_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_m_c11_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c11_blk_n <= size_m_c11_full_n;
        else 
            size_m_c11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_m_c11_din <= size_m_dout;
    size_m_c11_write <= size_m_c11_write_local;

    size_m_c11_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_m_c11_write_local <= ap_const_logic_1;
        else 
            size_m_c11_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_m_read <= size_m_read_local;

    size_m_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_m_read_local <= ap_const_logic_1;
        else 
            size_m_read_local <= ap_const_logic_0;
        end if; 
    end process;


    size_n_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_blk_n <= size_n_empty_n;
        else 
            size_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_n_c3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_n_c3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c3_blk_n <= size_n_c3_full_n;
        else 
            size_n_c3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_n_c3_din <= size_n_dout;
    size_n_c3_write <= size_n_c3_write_local;

    size_n_c3_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_n_c3_write_local <= ap_const_logic_1;
        else 
            size_n_c3_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_n_read <= size_n_read_local;

    size_n_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            size_n_read_local <= ap_const_logic_1;
        else 
            size_n_read_local <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_167_p3 <= (grp_fu_111_p2 & ap_const_lv6_0);
    zext_ln111_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_n_dout),33));
    zext_ln116_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_m_dout),33));
end behav;
