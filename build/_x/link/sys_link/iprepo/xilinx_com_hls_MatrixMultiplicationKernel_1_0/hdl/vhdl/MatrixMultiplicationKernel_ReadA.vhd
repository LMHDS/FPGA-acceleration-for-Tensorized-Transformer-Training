-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ReadA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    aSplit_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_0_full_n : IN STD_LOGIC;
    aSplit_0_write : OUT STD_LOGIC;
    aSplit_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_1_full_n : IN STD_LOGIC;
    aSplit_1_write : OUT STD_LOGIC;
    aSplit_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_2_full_n : IN STD_LOGIC;
    aSplit_2_write : OUT STD_LOGIC;
    aSplit_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_3_full_n : IN STD_LOGIC;
    aSplit_3_write : OUT STD_LOGIC;
    aSplit_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_4_full_n : IN STD_LOGIC;
    aSplit_4_write : OUT STD_LOGIC;
    aSplit_5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_5_full_n : IN STD_LOGIC;
    aSplit_5_write : OUT STD_LOGIC;
    aSplit_6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_6_full_n : IN STD_LOGIC;
    aSplit_6_write : OUT STD_LOGIC;
    aSplit_7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_7_full_n : IN STD_LOGIC;
    aSplit_7_write : OUT STD_LOGIC;
    aSplit_8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_8_full_n : IN STD_LOGIC;
    aSplit_8_write : OUT STD_LOGIC;
    aSplit_9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_9_full_n : IN STD_LOGIC;
    aSplit_9_write : OUT STD_LOGIC;
    aSplit_10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_10_full_n : IN STD_LOGIC;
    aSplit_10_write : OUT STD_LOGIC;
    aSplit_11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_11_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_11_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_11_full_n : IN STD_LOGIC;
    aSplit_11_write : OUT STD_LOGIC;
    aSplit_12_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_12_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_12_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_12_full_n : IN STD_LOGIC;
    aSplit_12_write : OUT STD_LOGIC;
    aSplit_13_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_13_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_13_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_13_full_n : IN STD_LOGIC;
    aSplit_13_write : OUT STD_LOGIC;
    aSplit_14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_14_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_14_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_14_full_n : IN STD_LOGIC;
    aSplit_14_write : OUT STD_LOGIC;
    aSplit_15_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aSplit_15_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_15_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    aSplit_15_full_n : IN STD_LOGIC;
    aSplit_15_write : OUT STD_LOGIC;
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    size_k : IN STD_LOGIC_VECTOR (31 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    size_n_c5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_n_c5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_c5_full_n : IN STD_LOGIC;
    size_n_c5_write : OUT STD_LOGIC;
    size_k_c8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_k_c8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_c8_full_n : IN STD_LOGIC;
    size_k_c8_write : OUT STD_LOGIC;
    size_m_c13_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_m_c13_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c13_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_c13_full_n : IN STD_LOGIC;
    size_m_c13_write : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiplicationKernel_ReadA is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv33_1FF : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal size_n_c5_blk_n : STD_LOGIC;
    signal size_k_c8_blk_n : STD_LOGIC;
    signal size_m_c13_blk_n : STD_LOGIC;
    signal lshr_ln_reg_278 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal lshr_ln1_reg_283 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln2_reg_288 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_fu_254_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_s_reg_295 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound17_reg_310 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (82 downto 0);
    signal bound40_reg_331 : STD_LOGIC_VECTOR (82 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_idle : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_ready : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_write : STD_LOGIC;
    signal grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal size_m_c13_write_local : STD_LOGIC;
    signal size_k_c8_write_local : STD_LOGIC;
    signal size_n_c5_write_local : STD_LOGIC;
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln111_fu_204_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln111_fu_208_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln116_fu_224_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln116_fu_228_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal grp_fu_196_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_196_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_200_p00 : STD_LOGIC_VECTOR (82 downto 0);
    signal grp_fu_200_p10 : STD_LOGIC_VECTOR (82 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        aSplit_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_0_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_0_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_0_full_n : IN STD_LOGIC;
        aSplit_0_write : OUT STD_LOGIC;
        aSplit_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_1_full_n : IN STD_LOGIC;
        aSplit_1_write : OUT STD_LOGIC;
        aSplit_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_2_full_n : IN STD_LOGIC;
        aSplit_2_write : OUT STD_LOGIC;
        aSplit_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_3_full_n : IN STD_LOGIC;
        aSplit_3_write : OUT STD_LOGIC;
        aSplit_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_4_full_n : IN STD_LOGIC;
        aSplit_4_write : OUT STD_LOGIC;
        aSplit_5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_5_full_n : IN STD_LOGIC;
        aSplit_5_write : OUT STD_LOGIC;
        aSplit_6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_6_full_n : IN STD_LOGIC;
        aSplit_6_write : OUT STD_LOGIC;
        aSplit_7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_7_full_n : IN STD_LOGIC;
        aSplit_7_write : OUT STD_LOGIC;
        aSplit_8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_8_full_n : IN STD_LOGIC;
        aSplit_8_write : OUT STD_LOGIC;
        aSplit_9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_9_full_n : IN STD_LOGIC;
        aSplit_9_write : OUT STD_LOGIC;
        aSplit_10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_10_full_n : IN STD_LOGIC;
        aSplit_10_write : OUT STD_LOGIC;
        aSplit_11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_11_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_11_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_11_full_n : IN STD_LOGIC;
        aSplit_11_write : OUT STD_LOGIC;
        aSplit_12_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_12_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_12_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_12_full_n : IN STD_LOGIC;
        aSplit_12_write : OUT STD_LOGIC;
        aSplit_13_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_13_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_13_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_13_full_n : IN STD_LOGIC;
        aSplit_13_write : OUT STD_LOGIC;
        aSplit_14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_14_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_14_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_14_full_n : IN STD_LOGIC;
        aSplit_14_write : OUT STD_LOGIC;
        aSplit_15_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        aSplit_15_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_15_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        aSplit_15_full_n : IN STD_LOGIC;
        aSplit_15_write : OUT STD_LOGIC;
        bound40 : IN STD_LOGIC_VECTOR (82 downto 0);
        bound17 : IN STD_LOGIC_VECTOR (59 downto 0);
        lshr_ln2 : IN STD_LOGIC_VECTOR (27 downto 0);
        bound4 : IN STD_LOGIC_VECTOR (36 downto 0);
        zext_ln109_3 : IN STD_LOGIC_VECTOR (27 downto 0);
        a : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_24ns_37ns_60_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component MatrixMultiplicationKernel_mul_24ns_60ns_83_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (82 downto 0) );
    end component;



begin
    grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152 : component MatrixMultiplicationKernel_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start,
        ap_done => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done,
        ap_idle => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_idle,
        ap_ready => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_ready,
        m_axi_gmem0_AWVALID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        aSplit_0_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_din,
        aSplit_0_num_data_valid => ap_const_lv11_0,
        aSplit_0_fifo_cap => ap_const_lv11_0,
        aSplit_0_full_n => aSplit_0_full_n,
        aSplit_0_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_write,
        aSplit_1_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_din,
        aSplit_1_num_data_valid => ap_const_lv11_0,
        aSplit_1_fifo_cap => ap_const_lv11_0,
        aSplit_1_full_n => aSplit_1_full_n,
        aSplit_1_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_write,
        aSplit_2_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_din,
        aSplit_2_num_data_valid => ap_const_lv11_0,
        aSplit_2_fifo_cap => ap_const_lv11_0,
        aSplit_2_full_n => aSplit_2_full_n,
        aSplit_2_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_write,
        aSplit_3_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_din,
        aSplit_3_num_data_valid => ap_const_lv11_0,
        aSplit_3_fifo_cap => ap_const_lv11_0,
        aSplit_3_full_n => aSplit_3_full_n,
        aSplit_3_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_write,
        aSplit_4_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_din,
        aSplit_4_num_data_valid => ap_const_lv11_0,
        aSplit_4_fifo_cap => ap_const_lv11_0,
        aSplit_4_full_n => aSplit_4_full_n,
        aSplit_4_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_write,
        aSplit_5_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_din,
        aSplit_5_num_data_valid => ap_const_lv11_0,
        aSplit_5_fifo_cap => ap_const_lv11_0,
        aSplit_5_full_n => aSplit_5_full_n,
        aSplit_5_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_write,
        aSplit_6_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_din,
        aSplit_6_num_data_valid => ap_const_lv11_0,
        aSplit_6_fifo_cap => ap_const_lv11_0,
        aSplit_6_full_n => aSplit_6_full_n,
        aSplit_6_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_write,
        aSplit_7_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_din,
        aSplit_7_num_data_valid => ap_const_lv11_0,
        aSplit_7_fifo_cap => ap_const_lv11_0,
        aSplit_7_full_n => aSplit_7_full_n,
        aSplit_7_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_write,
        aSplit_8_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_din,
        aSplit_8_num_data_valid => ap_const_lv11_0,
        aSplit_8_fifo_cap => ap_const_lv11_0,
        aSplit_8_full_n => aSplit_8_full_n,
        aSplit_8_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_write,
        aSplit_9_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_din,
        aSplit_9_num_data_valid => ap_const_lv11_0,
        aSplit_9_fifo_cap => ap_const_lv11_0,
        aSplit_9_full_n => aSplit_9_full_n,
        aSplit_9_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_write,
        aSplit_10_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_din,
        aSplit_10_num_data_valid => ap_const_lv11_0,
        aSplit_10_fifo_cap => ap_const_lv11_0,
        aSplit_10_full_n => aSplit_10_full_n,
        aSplit_10_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_write,
        aSplit_11_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_din,
        aSplit_11_num_data_valid => ap_const_lv11_0,
        aSplit_11_fifo_cap => ap_const_lv11_0,
        aSplit_11_full_n => aSplit_11_full_n,
        aSplit_11_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_write,
        aSplit_12_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_din,
        aSplit_12_num_data_valid => ap_const_lv11_0,
        aSplit_12_fifo_cap => ap_const_lv11_0,
        aSplit_12_full_n => aSplit_12_full_n,
        aSplit_12_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_write,
        aSplit_13_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_din,
        aSplit_13_num_data_valid => ap_const_lv11_0,
        aSplit_13_fifo_cap => ap_const_lv11_0,
        aSplit_13_full_n => aSplit_13_full_n,
        aSplit_13_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_write,
        aSplit_14_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_din,
        aSplit_14_num_data_valid => ap_const_lv11_0,
        aSplit_14_fifo_cap => ap_const_lv11_0,
        aSplit_14_full_n => aSplit_14_full_n,
        aSplit_14_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_write,
        aSplit_15_din => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_din,
        aSplit_15_num_data_valid => ap_const_lv11_0,
        aSplit_15_fifo_cap => ap_const_lv11_0,
        aSplit_15_full_n => aSplit_15_full_n,
        aSplit_15_write => grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_write,
        bound40 => bound40_reg_331,
        bound17 => bound17_reg_310,
        lshr_ln2 => lshr_ln2_reg_288,
        bound4 => tmp_s_reg_295,
        zext_ln109_3 => lshr_ln2_reg_288,
        a => a);

    mul_24ns_37ns_60_2_1_U28 : component MatrixMultiplicationKernel_mul_24ns_37ns_60_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 24,
        din1_WIDTH => 37,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    mul_24ns_60ns_83_5_1_U29 : component MatrixMultiplicationKernel_mul_24ns_60ns_83_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 24,
        din1_WIDTH => 60,
        dout_WIDTH => 83)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_ready = ap_const_logic_1)) then 
                    grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound17_reg_310 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bound40_reg_331 <= grp_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                lshr_ln1_reg_283 <= add_ln116_fu_228_p2(32 downto 9);
                lshr_ln2_reg_288 <= size_k(31 downto 4);
                lshr_ln_reg_278 <= add_ln111_fu_208_p2(32 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_s_reg_295(36 downto 9) <= tmp_s_fu_254_p3(36 downto 9);
            end if;
        end if;
    end process;
    tmp_s_reg_295(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    aSplit_0_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_din;

    aSplit_0_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_0_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_0_write;
        else 
            aSplit_0_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_10_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_din;

    aSplit_10_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_10_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_10_write;
        else 
            aSplit_10_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_11_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_din;

    aSplit_11_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_11_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_11_write;
        else 
            aSplit_11_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_12_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_din;

    aSplit_12_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_12_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_12_write;
        else 
            aSplit_12_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_13_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_din;

    aSplit_13_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_13_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_13_write;
        else 
            aSplit_13_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_14_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_din;

    aSplit_14_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_14_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_14_write;
        else 
            aSplit_14_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_15_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_din;

    aSplit_15_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_15_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_15_write;
        else 
            aSplit_15_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_1_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_din;

    aSplit_1_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_1_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_1_write;
        else 
            aSplit_1_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_2_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_din;

    aSplit_2_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_2_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_2_write;
        else 
            aSplit_2_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_3_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_din;

    aSplit_3_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_3_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_3_write;
        else 
            aSplit_3_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_4_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_din;

    aSplit_4_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_4_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_4_write;
        else 
            aSplit_4_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_5_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_din;

    aSplit_5_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_5_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_5_write;
        else 
            aSplit_5_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_6_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_din;

    aSplit_6_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_6_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_6_write;
        else 
            aSplit_6_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_7_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_din;

    aSplit_7_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_7_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_7_write;
        else 
            aSplit_7_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_8_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_din;

    aSplit_8_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_8_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_8_write;
        else 
            aSplit_8_write <= ap_const_logic_0;
        end if; 
    end process;

    aSplit_9_din <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_din;

    aSplit_9_write_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            aSplit_9_write <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_aSplit_9_write;
        else 
            aSplit_9_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln111_fu_208_p2 <= std_logic_vector(unsigned(zext_ln111_fu_204_p1) + unsigned(ap_const_lv33_1FF));
    add_ln116_fu_228_p2 <= std_logic_vector(unsigned(zext_ln116_fu_224_p1) + unsigned(ap_const_lv33_1FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done)
    begin
        if ((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, size_n_c5_full_n, size_k_c8_full_n, size_m_c13_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (size_m_c13_full_n = ap_const_logic_0) or (size_k_c8_full_n = ap_const_logic_0) or (size_n_c5_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done, ap_CS_fsm_state10)
    begin
        if (((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_start_reg;
    grp_fu_196_p0 <= grp_fu_196_p00(24 - 1 downto 0);
    grp_fu_196_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_283),60));
    grp_fu_196_p1 <= grp_fu_196_p10(37 - 1 downto 0);
    grp_fu_196_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_254_p3),60));
    grp_fu_200_p0 <= grp_fu_200_p00(24 - 1 downto 0);
    grp_fu_200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_278),83));
    grp_fu_200_p1 <= grp_fu_200_p10(60 - 1 downto 0);
    grp_fu_200_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound17_reg_310),83));

    internal_ap_ready_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done, ap_CS_fsm_state10)
    begin
        if (((grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARUSER;

    m_axi_gmem0_ARVALID_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARVALID, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem0_ARVALID <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_ARVALID;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_RREADY, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem0_RREADY <= grp_ReadA_Pipeline_ReadA_N0_ReadA_M0_ReadA_K0_ReadA_N1_ReadA_N2_fu_152_m_axi_gmem0_RREADY;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv64_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    size_k_c8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_k_c8_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_c8_blk_n <= size_k_c8_full_n;
        else 
            size_k_c8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_k_c8_din <= size_k;
    size_k_c8_write <= size_k_c8_write_local;

    size_k_c8_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_c8_write_local <= ap_const_logic_1;
        else 
            size_k_c8_write_local <= ap_const_logic_0;
        end if; 
    end process;


    size_m_c13_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_m_c13_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c13_blk_n <= size_m_c13_full_n;
        else 
            size_m_c13_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_m_c13_din <= size_m;
    size_m_c13_write <= size_m_c13_write_local;

    size_m_c13_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_c13_write_local <= ap_const_logic_1;
        else 
            size_m_c13_write_local <= ap_const_logic_0;
        end if; 
    end process;


    size_n_c5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, size_n_c5_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c5_blk_n <= size_n_c5_full_n;
        else 
            size_n_c5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_n_c5_din <= size_n;
    size_n_c5_write <= size_n_c5_write_local;

    size_n_c5_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_c5_write_local <= ap_const_logic_1;
        else 
            size_n_c5_write_local <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_254_p3 <= (lshr_ln2_reg_288 & ap_const_lv9_0);
    zext_ln111_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_n),33));
    zext_ln116_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_m),33));
end behav;
