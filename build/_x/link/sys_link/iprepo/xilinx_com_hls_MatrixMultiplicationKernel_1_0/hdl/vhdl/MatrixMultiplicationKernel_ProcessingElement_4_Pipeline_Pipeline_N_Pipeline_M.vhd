-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ProcessingElement_4_Pipeline_Pipeline_N_Pipeline_M is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    aPipes_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    aPipes_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_3_empty_n : IN STD_LOGIC;
    aPipes_3_read : OUT STD_LOGIC;
    aPipes_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    aPipes_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    aPipes_4_full_n : IN STD_LOGIC;
    aPipes_4_write : OUT STD_LOGIC;
    bPipes_3_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bPipes_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_3_empty_n : IN STD_LOGIC;
    bPipes_3_read : OUT STD_LOGIC;
    bPipes_4_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bPipes_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_4_full_n : IN STD_LOGIC;
    bPipes_4_write : OUT STD_LOGIC;
    m0 : IN STD_LOGIC_VECTOR (22 downto 0);
    cBuffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce0 : OUT STD_LOGIC;
    cBuffer_we0 : OUT STD_LOGIC;
    cBuffer_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    cBuffer_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cBuffer_ce1 : OUT STD_LOGIC;
    cBuffer_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    cmp111 : IN STD_LOGIC_VECTOR (0 downto 0);
    size_m : IN STD_LOGIC_VECTOR (31 downto 0);
    cond90 : IN STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce0 : OUT STD_LOGIC;
    aBuffer_we0 : OUT STD_LOGIC;
    aBuffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    aBuffer_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    aBuffer_ce1 : OUT STD_LOGIC;
    aBuffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (26 downto 0);
    cond : IN STD_LOGIC_VECTOR (4 downto 0);
    size_n : IN STD_LOGIC_VECTOR (31 downto 0);
    brmerge282 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ProcessingElement_4_Pipeline_Pipeline_N_Pipeline_M is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln80_6_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op66_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bPipes_3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bPipes_4_blk_n : STD_LOGIC;
    signal aPipes_3_blk_n : STD_LOGIC;
    signal aPipes_4_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln67_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_393_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln64_reg_1095_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln80_6_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_6_fu_460_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln64_6_reg_1109 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_185_fu_467_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_185_reg_1115 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_185_reg_1115_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_185_reg_1115_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_185_reg_1115_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_185_reg_1115_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inBoundsN_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsN_reg_1125_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal aVal_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cBuffer_addr_reg_1234 : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal cBuffer_addr_reg_1234_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inBoundsM_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_reg_1240_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_43_reg_1245_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_44_reg_1250_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_45_reg_1255_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_46_reg_1260_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_47_reg_1265_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_48_reg_1270_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inBoundsM_49_reg_1275_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_154_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_7_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln170_7_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_155_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_156_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_157_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_158_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_159_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_160_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_reg_1345 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_161_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_82_reg_1360_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_84_reg_1366_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_86_reg_1372_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_88_reg_1378_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_90_reg_1384_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_fu_866_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_92_reg_1390_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_fu_870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_94_reg_1396_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_96_reg_1402_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_141_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_143_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_145_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_147_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_149_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_151_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_153_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_cast_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add91_cast_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add115_cast_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m1_fu_154 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln67_fu_440_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal n1_fu_158 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten6_fu_162 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln64_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (10 downto 0);
    signal aPipes_3_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal aPipes_4_write_local : STD_LOGIC;
    signal bPipes_3_read_local : STD_LOGIC;
    signal bPipes_4_write_local : STD_LOGIC;
    signal aBuffer_we0_local : STD_LOGIC;
    signal aBuffer_ce0_local : STD_LOGIC;
    signal aBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_ce1_local : STD_LOGIC;
    signal cBuffer_we0_local : STD_LOGIC;
    signal tmp_98_fu_990_p9 : STD_LOGIC_VECTOR (255 downto 0);
    signal cBuffer_ce0_local : STD_LOGIC;
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_407_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln82_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_6_fu_454_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add91_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_fu_486_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_fu_498_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add106_cast_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_fu_629_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln67_fu_636_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add115_fu_639_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_650_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add6_fu_653_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_667_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_s_fu_681_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_16_fu_695_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_17_fu_709_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_18_fu_723_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_19_fu_737_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_20_fu_751_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal cPrev_2_fu_765_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal inBounds_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_fu_882_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_43_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_36_fu_896_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_44_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_37_fu_910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_45_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_38_fu_924_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_46_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_39_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_47_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_40_fu_952_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_48_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_41_fu_966_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal inBounds_49_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_42_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_42_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_41_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_40_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_39_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_38_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_37_fu_916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_36_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln36_fu_888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal grp_fu_305_ce : STD_LOGIC;
    signal grp_fu_309_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal grp_fu_321_ce : STD_LOGIC;
    signal grp_fu_325_ce : STD_LOGIC;
    signal grp_fu_329_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_337_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_345_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op68_store_state3 : BOOLEAN;
    signal ap_enable_operation_68 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_78 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_79 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_7_full_dsp_1_U302 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => res_154_reg_1280,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U303 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => res_155_reg_1290,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U304 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => res_156_reg_1300,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U305 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => res_157_reg_1310,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U306 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => res_158_reg_1320,
        ce => grp_fu_301_ce,
        dout => grp_fu_301_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U307 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => res_159_reg_1330,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U308 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => res_160_reg_1340,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U309 : component MatrixMultiplicationKernel_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        din1 => res_161_reg_1350,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U310 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_317_p1,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U311 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_321_p1,
        ce => grp_fu_321_ce,
        dout => grp_fu_321_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U312 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U313 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_329_p1,
        ce => grp_fu_329_ce,
        dout => grp_fu_329_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U314 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_333_p1,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U315 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_337_p1,
        ce => grp_fu_337_ce,
        dout => grp_fu_337_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U316 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U317 : component MatrixMultiplicationKernel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bitcast_ln32_fu_586_p1,
        din1 => grp_fu_345_p1,
        ce => grp_fu_345_ce,
        dout => grp_fu_345_p2);

    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten6_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln64_fu_367_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_162 <= add_ln64_fu_373_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_162 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    m1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m1_fu_154 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    m1_fu_154 <= add_ln67_fu_440_p2;
                end if;
            end if; 
        end if;
    end process;

    n1_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n1_fu_158 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    n1_fu_158 <= select_ln64_6_fu_460_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                aVal_reg_1137 <= aBuffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln80_6_reg_1101 <= and_ln80_6_fu_428_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln67_reg_1090 <= icmp_ln67_fu_387_p2;
                icmp_ln85_reg_1105 <= icmp_ln85_fu_434_p2;
                select_ln64_reg_1095 <= select_ln64_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln32_82_reg_1360 <= bitcast_ln32_82_fu_846_p1;
                bitcast_ln32_82_reg_1360_pp0_iter10_reg <= bitcast_ln32_82_reg_1360;
                bitcast_ln32_82_reg_1360_pp0_iter11_reg <= bitcast_ln32_82_reg_1360_pp0_iter10_reg;
                bitcast_ln32_82_reg_1360_pp0_iter12_reg <= bitcast_ln32_82_reg_1360_pp0_iter11_reg;
                bitcast_ln32_82_reg_1360_pp0_iter13_reg <= bitcast_ln32_82_reg_1360_pp0_iter12_reg;
                bitcast_ln32_82_reg_1360_pp0_iter14_reg <= bitcast_ln32_82_reg_1360_pp0_iter13_reg;
                bitcast_ln32_82_reg_1360_pp0_iter15_reg <= bitcast_ln32_82_reg_1360_pp0_iter14_reg;
                bitcast_ln32_84_reg_1366 <= bitcast_ln32_84_fu_850_p1;
                bitcast_ln32_84_reg_1366_pp0_iter10_reg <= bitcast_ln32_84_reg_1366;
                bitcast_ln32_84_reg_1366_pp0_iter11_reg <= bitcast_ln32_84_reg_1366_pp0_iter10_reg;
                bitcast_ln32_84_reg_1366_pp0_iter12_reg <= bitcast_ln32_84_reg_1366_pp0_iter11_reg;
                bitcast_ln32_84_reg_1366_pp0_iter13_reg <= bitcast_ln32_84_reg_1366_pp0_iter12_reg;
                bitcast_ln32_84_reg_1366_pp0_iter14_reg <= bitcast_ln32_84_reg_1366_pp0_iter13_reg;
                bitcast_ln32_84_reg_1366_pp0_iter15_reg <= bitcast_ln32_84_reg_1366_pp0_iter14_reg;
                bitcast_ln32_86_reg_1372 <= bitcast_ln32_86_fu_854_p1;
                bitcast_ln32_86_reg_1372_pp0_iter10_reg <= bitcast_ln32_86_reg_1372;
                bitcast_ln32_86_reg_1372_pp0_iter11_reg <= bitcast_ln32_86_reg_1372_pp0_iter10_reg;
                bitcast_ln32_86_reg_1372_pp0_iter12_reg <= bitcast_ln32_86_reg_1372_pp0_iter11_reg;
                bitcast_ln32_86_reg_1372_pp0_iter13_reg <= bitcast_ln32_86_reg_1372_pp0_iter12_reg;
                bitcast_ln32_86_reg_1372_pp0_iter14_reg <= bitcast_ln32_86_reg_1372_pp0_iter13_reg;
                bitcast_ln32_86_reg_1372_pp0_iter15_reg <= bitcast_ln32_86_reg_1372_pp0_iter14_reg;
                bitcast_ln32_88_reg_1378 <= bitcast_ln32_88_fu_858_p1;
                bitcast_ln32_88_reg_1378_pp0_iter10_reg <= bitcast_ln32_88_reg_1378;
                bitcast_ln32_88_reg_1378_pp0_iter11_reg <= bitcast_ln32_88_reg_1378_pp0_iter10_reg;
                bitcast_ln32_88_reg_1378_pp0_iter12_reg <= bitcast_ln32_88_reg_1378_pp0_iter11_reg;
                bitcast_ln32_88_reg_1378_pp0_iter13_reg <= bitcast_ln32_88_reg_1378_pp0_iter12_reg;
                bitcast_ln32_88_reg_1378_pp0_iter14_reg <= bitcast_ln32_88_reg_1378_pp0_iter13_reg;
                bitcast_ln32_88_reg_1378_pp0_iter15_reg <= bitcast_ln32_88_reg_1378_pp0_iter14_reg;
                bitcast_ln32_90_reg_1384 <= bitcast_ln32_90_fu_862_p1;
                bitcast_ln32_90_reg_1384_pp0_iter10_reg <= bitcast_ln32_90_reg_1384;
                bitcast_ln32_90_reg_1384_pp0_iter11_reg <= bitcast_ln32_90_reg_1384_pp0_iter10_reg;
                bitcast_ln32_90_reg_1384_pp0_iter12_reg <= bitcast_ln32_90_reg_1384_pp0_iter11_reg;
                bitcast_ln32_90_reg_1384_pp0_iter13_reg <= bitcast_ln32_90_reg_1384_pp0_iter12_reg;
                bitcast_ln32_90_reg_1384_pp0_iter14_reg <= bitcast_ln32_90_reg_1384_pp0_iter13_reg;
                bitcast_ln32_90_reg_1384_pp0_iter15_reg <= bitcast_ln32_90_reg_1384_pp0_iter14_reg;
                bitcast_ln32_92_reg_1390 <= bitcast_ln32_92_fu_866_p1;
                bitcast_ln32_92_reg_1390_pp0_iter10_reg <= bitcast_ln32_92_reg_1390;
                bitcast_ln32_92_reg_1390_pp0_iter11_reg <= bitcast_ln32_92_reg_1390_pp0_iter10_reg;
                bitcast_ln32_92_reg_1390_pp0_iter12_reg <= bitcast_ln32_92_reg_1390_pp0_iter11_reg;
                bitcast_ln32_92_reg_1390_pp0_iter13_reg <= bitcast_ln32_92_reg_1390_pp0_iter12_reg;
                bitcast_ln32_92_reg_1390_pp0_iter14_reg <= bitcast_ln32_92_reg_1390_pp0_iter13_reg;
                bitcast_ln32_92_reg_1390_pp0_iter15_reg <= bitcast_ln32_92_reg_1390_pp0_iter14_reg;
                bitcast_ln32_94_reg_1396 <= bitcast_ln32_94_fu_870_p1;
                bitcast_ln32_94_reg_1396_pp0_iter10_reg <= bitcast_ln32_94_reg_1396;
                bitcast_ln32_94_reg_1396_pp0_iter11_reg <= bitcast_ln32_94_reg_1396_pp0_iter10_reg;
                bitcast_ln32_94_reg_1396_pp0_iter12_reg <= bitcast_ln32_94_reg_1396_pp0_iter11_reg;
                bitcast_ln32_94_reg_1396_pp0_iter13_reg <= bitcast_ln32_94_reg_1396_pp0_iter12_reg;
                bitcast_ln32_94_reg_1396_pp0_iter14_reg <= bitcast_ln32_94_reg_1396_pp0_iter13_reg;
                bitcast_ln32_94_reg_1396_pp0_iter15_reg <= bitcast_ln32_94_reg_1396_pp0_iter14_reg;
                bitcast_ln32_96_reg_1402 <= bitcast_ln32_96_fu_874_p1;
                bitcast_ln32_96_reg_1402_pp0_iter10_reg <= bitcast_ln32_96_reg_1402;
                bitcast_ln32_96_reg_1402_pp0_iter11_reg <= bitcast_ln32_96_reg_1402_pp0_iter10_reg;
                bitcast_ln32_96_reg_1402_pp0_iter12_reg <= bitcast_ln32_96_reg_1402_pp0_iter11_reg;
                bitcast_ln32_96_reg_1402_pp0_iter13_reg <= bitcast_ln32_96_reg_1402_pp0_iter12_reg;
                bitcast_ln32_96_reg_1402_pp0_iter14_reg <= bitcast_ln32_96_reg_1402_pp0_iter13_reg;
                bitcast_ln32_96_reg_1402_pp0_iter15_reg <= bitcast_ln32_96_reg_1402_pp0_iter14_reg;
                cBuffer_addr_reg_1234 <= add115_cast_fu_645_p1(10 - 1 downto 0);
                cBuffer_addr_reg_1234_pp0_iter10_reg <= cBuffer_addr_reg_1234_pp0_iter9_reg;
                cBuffer_addr_reg_1234_pp0_iter11_reg <= cBuffer_addr_reg_1234_pp0_iter10_reg;
                cBuffer_addr_reg_1234_pp0_iter12_reg <= cBuffer_addr_reg_1234_pp0_iter11_reg;
                cBuffer_addr_reg_1234_pp0_iter13_reg <= cBuffer_addr_reg_1234_pp0_iter12_reg;
                cBuffer_addr_reg_1234_pp0_iter14_reg <= cBuffer_addr_reg_1234_pp0_iter13_reg;
                cBuffer_addr_reg_1234_pp0_iter15_reg <= cBuffer_addr_reg_1234_pp0_iter14_reg;
                cBuffer_addr_reg_1234_pp0_iter8_reg <= cBuffer_addr_reg_1234;
                cBuffer_addr_reg_1234_pp0_iter9_reg <= cBuffer_addr_reg_1234_pp0_iter8_reg;
                empty_185_reg_1115 <= empty_185_fu_467_p1;
                empty_185_reg_1115_pp0_iter3_reg <= empty_185_reg_1115;
                empty_185_reg_1115_pp0_iter4_reg <= empty_185_reg_1115_pp0_iter3_reg;
                empty_185_reg_1115_pp0_iter5_reg <= empty_185_reg_1115_pp0_iter4_reg;
                empty_185_reg_1115_pp0_iter6_reg <= empty_185_reg_1115_pp0_iter5_reg;
                inBoundsM_43_reg_1245 <= inBoundsM_43_fu_676_p2;
                inBoundsM_43_reg_1245_pp0_iter10_reg <= inBoundsM_43_reg_1245_pp0_iter9_reg;
                inBoundsM_43_reg_1245_pp0_iter11_reg <= inBoundsM_43_reg_1245_pp0_iter10_reg;
                inBoundsM_43_reg_1245_pp0_iter12_reg <= inBoundsM_43_reg_1245_pp0_iter11_reg;
                inBoundsM_43_reg_1245_pp0_iter13_reg <= inBoundsM_43_reg_1245_pp0_iter12_reg;
                inBoundsM_43_reg_1245_pp0_iter14_reg <= inBoundsM_43_reg_1245_pp0_iter13_reg;
                inBoundsM_43_reg_1245_pp0_iter15_reg <= inBoundsM_43_reg_1245_pp0_iter14_reg;
                inBoundsM_43_reg_1245_pp0_iter8_reg <= inBoundsM_43_reg_1245;
                inBoundsM_43_reg_1245_pp0_iter9_reg <= inBoundsM_43_reg_1245_pp0_iter8_reg;
                inBoundsM_44_reg_1250 <= inBoundsM_44_fu_690_p2;
                inBoundsM_44_reg_1250_pp0_iter10_reg <= inBoundsM_44_reg_1250_pp0_iter9_reg;
                inBoundsM_44_reg_1250_pp0_iter11_reg <= inBoundsM_44_reg_1250_pp0_iter10_reg;
                inBoundsM_44_reg_1250_pp0_iter12_reg <= inBoundsM_44_reg_1250_pp0_iter11_reg;
                inBoundsM_44_reg_1250_pp0_iter13_reg <= inBoundsM_44_reg_1250_pp0_iter12_reg;
                inBoundsM_44_reg_1250_pp0_iter14_reg <= inBoundsM_44_reg_1250_pp0_iter13_reg;
                inBoundsM_44_reg_1250_pp0_iter15_reg <= inBoundsM_44_reg_1250_pp0_iter14_reg;
                inBoundsM_44_reg_1250_pp0_iter8_reg <= inBoundsM_44_reg_1250;
                inBoundsM_44_reg_1250_pp0_iter9_reg <= inBoundsM_44_reg_1250_pp0_iter8_reg;
                inBoundsM_45_reg_1255 <= inBoundsM_45_fu_704_p2;
                inBoundsM_45_reg_1255_pp0_iter10_reg <= inBoundsM_45_reg_1255_pp0_iter9_reg;
                inBoundsM_45_reg_1255_pp0_iter11_reg <= inBoundsM_45_reg_1255_pp0_iter10_reg;
                inBoundsM_45_reg_1255_pp0_iter12_reg <= inBoundsM_45_reg_1255_pp0_iter11_reg;
                inBoundsM_45_reg_1255_pp0_iter13_reg <= inBoundsM_45_reg_1255_pp0_iter12_reg;
                inBoundsM_45_reg_1255_pp0_iter14_reg <= inBoundsM_45_reg_1255_pp0_iter13_reg;
                inBoundsM_45_reg_1255_pp0_iter15_reg <= inBoundsM_45_reg_1255_pp0_iter14_reg;
                inBoundsM_45_reg_1255_pp0_iter8_reg <= inBoundsM_45_reg_1255;
                inBoundsM_45_reg_1255_pp0_iter9_reg <= inBoundsM_45_reg_1255_pp0_iter8_reg;
                inBoundsM_46_reg_1260 <= inBoundsM_46_fu_718_p2;
                inBoundsM_46_reg_1260_pp0_iter10_reg <= inBoundsM_46_reg_1260_pp0_iter9_reg;
                inBoundsM_46_reg_1260_pp0_iter11_reg <= inBoundsM_46_reg_1260_pp0_iter10_reg;
                inBoundsM_46_reg_1260_pp0_iter12_reg <= inBoundsM_46_reg_1260_pp0_iter11_reg;
                inBoundsM_46_reg_1260_pp0_iter13_reg <= inBoundsM_46_reg_1260_pp0_iter12_reg;
                inBoundsM_46_reg_1260_pp0_iter14_reg <= inBoundsM_46_reg_1260_pp0_iter13_reg;
                inBoundsM_46_reg_1260_pp0_iter15_reg <= inBoundsM_46_reg_1260_pp0_iter14_reg;
                inBoundsM_46_reg_1260_pp0_iter8_reg <= inBoundsM_46_reg_1260;
                inBoundsM_46_reg_1260_pp0_iter9_reg <= inBoundsM_46_reg_1260_pp0_iter8_reg;
                inBoundsM_47_reg_1265 <= inBoundsM_47_fu_732_p2;
                inBoundsM_47_reg_1265_pp0_iter10_reg <= inBoundsM_47_reg_1265_pp0_iter9_reg;
                inBoundsM_47_reg_1265_pp0_iter11_reg <= inBoundsM_47_reg_1265_pp0_iter10_reg;
                inBoundsM_47_reg_1265_pp0_iter12_reg <= inBoundsM_47_reg_1265_pp0_iter11_reg;
                inBoundsM_47_reg_1265_pp0_iter13_reg <= inBoundsM_47_reg_1265_pp0_iter12_reg;
                inBoundsM_47_reg_1265_pp0_iter14_reg <= inBoundsM_47_reg_1265_pp0_iter13_reg;
                inBoundsM_47_reg_1265_pp0_iter15_reg <= inBoundsM_47_reg_1265_pp0_iter14_reg;
                inBoundsM_47_reg_1265_pp0_iter8_reg <= inBoundsM_47_reg_1265;
                inBoundsM_47_reg_1265_pp0_iter9_reg <= inBoundsM_47_reg_1265_pp0_iter8_reg;
                inBoundsM_48_reg_1270 <= inBoundsM_48_fu_746_p2;
                inBoundsM_48_reg_1270_pp0_iter10_reg <= inBoundsM_48_reg_1270_pp0_iter9_reg;
                inBoundsM_48_reg_1270_pp0_iter11_reg <= inBoundsM_48_reg_1270_pp0_iter10_reg;
                inBoundsM_48_reg_1270_pp0_iter12_reg <= inBoundsM_48_reg_1270_pp0_iter11_reg;
                inBoundsM_48_reg_1270_pp0_iter13_reg <= inBoundsM_48_reg_1270_pp0_iter12_reg;
                inBoundsM_48_reg_1270_pp0_iter14_reg <= inBoundsM_48_reg_1270_pp0_iter13_reg;
                inBoundsM_48_reg_1270_pp0_iter15_reg <= inBoundsM_48_reg_1270_pp0_iter14_reg;
                inBoundsM_48_reg_1270_pp0_iter8_reg <= inBoundsM_48_reg_1270;
                inBoundsM_48_reg_1270_pp0_iter9_reg <= inBoundsM_48_reg_1270_pp0_iter8_reg;
                inBoundsM_49_reg_1275 <= inBoundsM_49_fu_760_p2;
                inBoundsM_49_reg_1275_pp0_iter10_reg <= inBoundsM_49_reg_1275_pp0_iter9_reg;
                inBoundsM_49_reg_1275_pp0_iter11_reg <= inBoundsM_49_reg_1275_pp0_iter10_reg;
                inBoundsM_49_reg_1275_pp0_iter12_reg <= inBoundsM_49_reg_1275_pp0_iter11_reg;
                inBoundsM_49_reg_1275_pp0_iter13_reg <= inBoundsM_49_reg_1275_pp0_iter12_reg;
                inBoundsM_49_reg_1275_pp0_iter14_reg <= inBoundsM_49_reg_1275_pp0_iter13_reg;
                inBoundsM_49_reg_1275_pp0_iter15_reg <= inBoundsM_49_reg_1275_pp0_iter14_reg;
                inBoundsM_49_reg_1275_pp0_iter8_reg <= inBoundsM_49_reg_1275;
                inBoundsM_49_reg_1275_pp0_iter9_reg <= inBoundsM_49_reg_1275_pp0_iter8_reg;
                inBoundsM_reg_1240 <= inBoundsM_fu_662_p2;
                inBoundsM_reg_1240_pp0_iter10_reg <= inBoundsM_reg_1240_pp0_iter9_reg;
                inBoundsM_reg_1240_pp0_iter11_reg <= inBoundsM_reg_1240_pp0_iter10_reg;
                inBoundsM_reg_1240_pp0_iter12_reg <= inBoundsM_reg_1240_pp0_iter11_reg;
                inBoundsM_reg_1240_pp0_iter13_reg <= inBoundsM_reg_1240_pp0_iter12_reg;
                inBoundsM_reg_1240_pp0_iter14_reg <= inBoundsM_reg_1240_pp0_iter13_reg;
                inBoundsM_reg_1240_pp0_iter15_reg <= inBoundsM_reg_1240_pp0_iter14_reg;
                inBoundsM_reg_1240_pp0_iter8_reg <= inBoundsM_reg_1240;
                inBoundsM_reg_1240_pp0_iter9_reg <= inBoundsM_reg_1240_pp0_iter8_reg;
                inBoundsN_reg_1125 <= inBoundsN_fu_507_p2;
                inBoundsN_reg_1125_pp0_iter10_reg <= inBoundsN_reg_1125_pp0_iter9_reg;
                inBoundsN_reg_1125_pp0_iter11_reg <= inBoundsN_reg_1125_pp0_iter10_reg;
                inBoundsN_reg_1125_pp0_iter12_reg <= inBoundsN_reg_1125_pp0_iter11_reg;
                inBoundsN_reg_1125_pp0_iter13_reg <= inBoundsN_reg_1125_pp0_iter12_reg;
                inBoundsN_reg_1125_pp0_iter14_reg <= inBoundsN_reg_1125_pp0_iter13_reg;
                inBoundsN_reg_1125_pp0_iter15_reg <= inBoundsN_reg_1125_pp0_iter14_reg;
                inBoundsN_reg_1125_pp0_iter4_reg <= inBoundsN_reg_1125;
                inBoundsN_reg_1125_pp0_iter5_reg <= inBoundsN_reg_1125_pp0_iter4_reg;
                inBoundsN_reg_1125_pp0_iter6_reg <= inBoundsN_reg_1125_pp0_iter5_reg;
                inBoundsN_reg_1125_pp0_iter7_reg <= inBoundsN_reg_1125_pp0_iter6_reg;
                inBoundsN_reg_1125_pp0_iter8_reg <= inBoundsN_reg_1125_pp0_iter7_reg;
                inBoundsN_reg_1125_pp0_iter9_reg <= inBoundsN_reg_1125_pp0_iter8_reg;
                res_141_reg_1413 <= grp_fu_289_p2;
                res_143_reg_1418 <= grp_fu_293_p2;
                res_145_reg_1423 <= grp_fu_297_p2;
                res_147_reg_1428 <= grp_fu_301_p2;
                res_149_reg_1433 <= grp_fu_305_p2;
                res_151_reg_1438 <= grp_fu_309_p2;
                res_153_reg_1443 <= grp_fu_313_p2;
                res_154_reg_1280 <= grp_fu_317_p2;
                res_155_reg_1290 <= grp_fu_321_p2;
                res_156_reg_1300 <= grp_fu_325_p2;
                res_157_reg_1310 <= grp_fu_329_p2;
                res_158_reg_1320 <= grp_fu_333_p2;
                res_159_reg_1330 <= grp_fu_337_p2;
                res_160_reg_1340 <= grp_fu_341_p2;
                res_161_reg_1350 <= grp_fu_345_p2;
                res_reg_1408 <= grp_fu_285_p2;
                select_ln64_6_reg_1109 <= select_ln64_6_fu_460_p3;
                select_ln64_reg_1095_pp0_iter2_reg <= select_ln64_reg_1095;
                select_ln64_reg_1095_pp0_iter3_reg <= select_ln64_reg_1095_pp0_iter2_reg;
                select_ln64_reg_1095_pp0_iter4_reg <= select_ln64_reg_1095_pp0_iter3_reg;
                select_ln64_reg_1095_pp0_iter5_reg <= select_ln64_reg_1095_pp0_iter4_reg;
                select_ln64_reg_1095_pp0_iter6_reg <= select_ln64_reg_1095_pp0_iter5_reg;
                tmp_85_reg_1295 <= cPrev_2_fu_765_p3(63 downto 32);
                tmp_86_reg_1152 <= bPipes_3_dout(95 downto 64);
                tmp_87_reg_1305 <= cPrev_2_fu_765_p3(95 downto 64);
                tmp_88_reg_1157 <= bPipes_3_dout(127 downto 96);
                tmp_89_reg_1315 <= cPrev_2_fu_765_p3(127 downto 96);
                tmp_90_reg_1162 <= bPipes_3_dout(159 downto 128);
                tmp_91_reg_1325 <= cPrev_2_fu_765_p3(159 downto 128);
                tmp_92_reg_1167 <= bPipes_3_dout(191 downto 160);
                tmp_93_reg_1335 <= cPrev_2_fu_765_p3(191 downto 160);
                tmp_94_reg_1172 <= bPipes_3_dout(223 downto 192);
                tmp_95_reg_1345 <= cPrev_2_fu_765_p3(223 downto 192);
                tmp_96_reg_1177 <= bPipes_3_dout(255 downto 224);
                tmp_97_reg_1355 <= cPrev_2_fu_765_p3(255 downto 224);
                tmp_s_reg_1147 <= bPipes_3_dout(63 downto 32);
                trunc_ln170_7_reg_1285 <= trunc_ln170_7_fu_772_p1;
                trunc_ln170_reg_1142 <= trunc_ln170_fu_512_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    aBuffer_address0 <= add_cast_fu_476_p1(5 - 1 downto 0);
    aBuffer_address1 <= add91_cast_fu_493_p1(5 - 1 downto 0);
    aBuffer_ce0 <= aBuffer_ce0_local;

    aBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce0_local <= ap_const_logic_1;
        else 
            aBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_ce1 <= aBuffer_ce1_local;

    aBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_ce1_local <= ap_const_logic_1;
        else 
            aBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    aBuffer_d0 <= aPipes_3_dout;
    aBuffer_we0 <= aBuffer_we0_local;

    aBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln80_6_reg_1101, icmp_ln85_reg_1105, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln85_reg_1105 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_6_reg_1101) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aBuffer_we0_local <= ap_const_logic_1;
        else 
            aBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, aPipes_3_empty_n, and_ln80_6_reg_1101, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_1 = and_ln80_6_reg_1101) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_3_blk_n <= aPipes_3_empty_n;
        else 
            aPipes_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_3_read <= aPipes_3_read_local;

    aPipes_3_read_local_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln80_6_reg_1101, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln80_6_reg_1101) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_3_read_local <= ap_const_logic_1;
        else 
            aPipes_3_read_local <= ap_const_logic_0;
        end if; 
    end process;


    aPipes_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, aPipes_4_full_n, ap_predicate_op66_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op66_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            aPipes_4_blk_n <= aPipes_4_full_n;
        else 
            aPipes_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    aPipes_4_din <= aPipes_3_dout;
    aPipes_4_write <= aPipes_4_write_local;

    aPipes_4_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op66_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op66_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            aPipes_4_write_local <= ap_const_logic_1;
        else 
            aPipes_4_write_local <= ap_const_logic_0;
        end if; 
    end process;

    add106_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add106_fu_498_p2),32));
    add106_fu_498_p2 <= std_logic_vector(unsigned(mul) + unsigned(zext_ln64_fu_486_p1));
    add115_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add115_fu_639_p2),64));
    add115_fu_639_p2 <= std_logic_vector(unsigned(mul7_fu_629_p3) + unsigned(zext_ln67_fu_636_p1));
    add6_fu_653_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_0);
    add91_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add91_fu_489_p2),64));
    add91_fu_489_p2 <= std_logic_vector(unsigned(select_ln64_6_reg_1109) + unsigned(cond90));
    add_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_471_p2),64));
    add_fu_471_p2 <= std_logic_vector(unsigned(select_ln64_6_fu_460_p3) + unsigned(cond));
    add_ln64_6_fu_454_p2 <= std_logic_vector(unsigned(n1_fu_158) + unsigned(ap_const_lv5_1));
    add_ln64_fu_373_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv11_1));
    add_ln67_fu_440_p2 <= std_logic_vector(unsigned(select_ln64_fu_393_p3) + unsigned(ap_const_lv7_1));
    and_ln80_6_fu_428_p2 <= (icmp_ln83_fu_417_p2 and and_ln80_fu_423_p2);
    and_ln80_fu_423_p2 <= (icmp_ln82_fu_401_p2 and brmerge282);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(aPipes_3_empty_n, and_ln80_6_reg_1101, aPipes_4_full_n, ap_predicate_op66_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op66_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = aPipes_4_full_n)) or ((ap_const_lv1_1 = and_ln80_6_reg_1101) and (ap_const_logic_0 = aPipes_3_empty_n)));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(bPipes_3_empty_n, bPipes_4_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((bPipes_4_full_n = ap_const_logic_0) or (bPipes_3_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln64_fu_367_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_68_assign_proc : process(ap_predicate_op68_store_state3)
    begin
                ap_enable_operation_68 <= (ap_predicate_op68_store_state3 = ap_const_boolean_1);
    end process;

        ap_enable_operation_78 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_79 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op66_write_state3_assign_proc : process(and_ln80_6_reg_1101, icmp_ln85_reg_1105)
    begin
                ap_predicate_op66_write_state3 <= ((icmp_ln85_reg_1105 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln80_6_reg_1101));
    end process;


    ap_predicate_op68_store_state3_assign_proc : process(and_ln80_6_reg_1101, icmp_ln85_reg_1105)
    begin
                ap_predicate_op68_store_state3 <= ((icmp_ln85_reg_1105 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln80_6_reg_1101));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_162)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_162;
        end if; 
    end process;


    bPipes_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, bPipes_3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_3_blk_n <= bPipes_3_empty_n;
        else 
            bPipes_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_3_read <= bPipes_3_read_local;

    bPipes_3_read_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_3_read_local <= ap_const_logic_1;
        else 
            bPipes_3_read_local <= ap_const_logic_0;
        end if; 
    end process;


    bPipes_4_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, bPipes_4_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bPipes_4_blk_n <= bPipes_4_full_n;
        else 
            bPipes_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bPipes_4_din <= bPipes_3_dout;
    bPipes_4_write <= bPipes_4_write_local;

    bPipes_4_write_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bPipes_4_write_local <= ap_const_logic_1;
        else 
            bPipes_4_write_local <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_82_fu_846_p1 <= trunc_ln170_7_reg_1285;
    bitcast_ln32_84_fu_850_p1 <= tmp_85_reg_1295;
    bitcast_ln32_86_fu_854_p1 <= tmp_87_reg_1305;
    bitcast_ln32_88_fu_858_p1 <= tmp_89_reg_1315;
    bitcast_ln32_90_fu_862_p1 <= tmp_91_reg_1325;
    bitcast_ln32_92_fu_866_p1 <= tmp_93_reg_1335;
    bitcast_ln32_94_fu_870_p1 <= tmp_95_reg_1345;
    bitcast_ln32_96_fu_874_p1 <= tmp_97_reg_1355;
    bitcast_ln32_fu_586_p1 <= aVal_reg_1137;
    bitcast_ln36_36_fu_902_p1 <= select_ln296_36_fu_896_p3;
    bitcast_ln36_37_fu_916_p1 <= select_ln296_37_fu_910_p3;
    bitcast_ln36_38_fu_930_p1 <= select_ln296_38_fu_924_p3;
    bitcast_ln36_39_fu_944_p1 <= select_ln296_39_fu_938_p3;
    bitcast_ln36_40_fu_958_p1 <= select_ln296_40_fu_952_p3;
    bitcast_ln36_41_fu_972_p1 <= select_ln296_41_fu_966_p3;
    bitcast_ln36_42_fu_986_p1 <= select_ln296_42_fu_980_p3;
    bitcast_ln36_fu_888_p1 <= select_ln296_fu_882_p3;
    cBuffer_address0 <= cBuffer_addr_reg_1234_pp0_iter15_reg;
    cBuffer_address1 <= add115_cast_fu_645_p1(10 - 1 downto 0);
    cBuffer_ce0 <= cBuffer_ce0_local;

    cBuffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce0_local <= ap_const_logic_1;
        else 
            cBuffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_ce1 <= cBuffer_ce1_local;

    cBuffer_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_ce1_local <= ap_const_logic_1;
        else 
            cBuffer_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    cBuffer_d0 <= tmp_98_fu_990_p9;
    cBuffer_we0 <= cBuffer_we0_local;

    cBuffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cBuffer_we0_local <= ap_const_logic_1;
        else 
            cBuffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    cPrev_2_fu_765_p3 <= 
        ap_const_lv256_lc_1 when (cmp111(0) = '1') else 
        cBuffer_q1;
    empty_185_fu_467_p1 <= select_ln64_6_fu_460_p3(4 - 1 downto 0);
    empty_fu_650_p1 <= select_ln64_reg_1095_pp0_iter6_reg(6 - 1 downto 0);

    grp_fu_285_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= trunc_ln170_7_reg_1285;

    grp_fu_289_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_289_ce <= ap_const_logic_1;
        else 
            grp_fu_289_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p0 <= tmp_85_reg_1295;

    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= tmp_87_reg_1305;

    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= tmp_89_reg_1315;

    grp_fu_301_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_301_ce <= ap_const_logic_1;
        else 
            grp_fu_301_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_301_p0 <= tmp_91_reg_1325;

    grp_fu_305_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_305_ce <= ap_const_logic_1;
        else 
            grp_fu_305_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_305_p0 <= tmp_93_reg_1335;

    grp_fu_309_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_309_ce <= ap_const_logic_1;
        else 
            grp_fu_309_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= tmp_95_reg_1345;

    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_313_p0 <= tmp_97_reg_1355;

    grp_fu_317_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_317_ce <= ap_const_logic_1;
        else 
            grp_fu_317_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_317_p1 <= trunc_ln170_reg_1142;

    grp_fu_321_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_321_ce <= ap_const_logic_1;
        else 
            grp_fu_321_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_321_p1 <= tmp_s_reg_1147;

    grp_fu_325_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_325_ce <= ap_const_logic_1;
        else 
            grp_fu_325_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_325_p1 <= tmp_86_reg_1152;

    grp_fu_329_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_329_ce <= ap_const_logic_1;
        else 
            grp_fu_329_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_329_p1 <= tmp_88_reg_1157;

    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p1 <= tmp_90_reg_1162;

    grp_fu_337_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_337_ce <= ap_const_logic_1;
        else 
            grp_fu_337_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_337_p1 <= tmp_92_reg_1167;

    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_p1 <= tmp_94_reg_1172;

    grp_fu_345_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_345_ce <= ap_const_logic_1;
        else 
            grp_fu_345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_345_p1 <= tmp_96_reg_1177;
    icmp_ln64_fu_367_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv11_400) else "0";
    icmp_ln67_fu_387_p2 <= "1" when (m1_fu_154 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_401_p2 <= "1" when (unsigned(select_ln64_fu_393_p3) > unsigned(ap_const_lv7_2)) else "0";
    icmp_ln83_fu_417_p2 <= "1" when (tmp_fu_407_p4 = ap_const_lv2_0) else "0";
    icmp_ln85_fu_434_p2 <= "1" when (select_ln64_fu_393_p3 = ap_const_lv7_3) else "0";
    inBoundsM_43_fu_676_p2 <= "1" when (unsigned(or_ln_fu_667_p4) < unsigned(size_m)) else "0";
    inBoundsM_44_fu_690_p2 <= "1" when (unsigned(or_ln125_s_fu_681_p4) < unsigned(size_m)) else "0";
    inBoundsM_45_fu_704_p2 <= "1" when (unsigned(or_ln125_16_fu_695_p4) < unsigned(size_m)) else "0";
    inBoundsM_46_fu_718_p2 <= "1" when (unsigned(or_ln125_17_fu_709_p4) < unsigned(size_m)) else "0";
    inBoundsM_47_fu_732_p2 <= "1" when (unsigned(or_ln125_18_fu_723_p4) < unsigned(size_m)) else "0";
    inBoundsM_48_fu_746_p2 <= "1" when (unsigned(or_ln125_19_fu_737_p4) < unsigned(size_m)) else "0";
    inBoundsM_49_fu_760_p2 <= "1" when (unsigned(or_ln125_20_fu_751_p4) < unsigned(size_m)) else "0";
    inBoundsM_fu_662_p2 <= "1" when (unsigned(add6_fu_653_p4) < unsigned(size_m)) else "0";
    inBoundsN_fu_507_p2 <= "1" when (unsigned(add106_cast_fu_503_p1) < unsigned(size_n)) else "0";
    inBounds_43_fu_892_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_43_reg_1245_pp0_iter15_reg);
    inBounds_44_fu_906_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_44_reg_1250_pp0_iter15_reg);
    inBounds_45_fu_920_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_45_reg_1255_pp0_iter15_reg);
    inBounds_46_fu_934_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_46_reg_1260_pp0_iter15_reg);
    inBounds_47_fu_948_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_47_reg_1265_pp0_iter15_reg);
    inBounds_48_fu_962_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_48_reg_1270_pp0_iter15_reg);
    inBounds_49_fu_976_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_49_reg_1275_pp0_iter15_reg);
    inBounds_fu_878_p2 <= (inBoundsN_reg_1125_pp0_iter15_reg and inBoundsM_reg_1240_pp0_iter15_reg);
    mul7_fu_629_p3 <= (empty_185_reg_1115_pp0_iter6_reg & ap_const_lv6_0);
    or_ln125_16_fu_695_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_3);
    or_ln125_17_fu_709_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_4);
    or_ln125_18_fu_723_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_5);
    or_ln125_19_fu_737_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_6);
    or_ln125_20_fu_751_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_7);
    or_ln125_s_fu_681_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_2);
    or_ln_fu_667_p4 <= ((m0 & empty_fu_650_p1) & ap_const_lv3_1);
    select_ln296_36_fu_896_p3 <= 
        res_141_reg_1413 when (inBounds_43_fu_892_p2(0) = '1') else 
        bitcast_ln32_84_reg_1366_pp0_iter15_reg;
    select_ln296_37_fu_910_p3 <= 
        res_143_reg_1418 when (inBounds_44_fu_906_p2(0) = '1') else 
        bitcast_ln32_86_reg_1372_pp0_iter15_reg;
    select_ln296_38_fu_924_p3 <= 
        res_145_reg_1423 when (inBounds_45_fu_920_p2(0) = '1') else 
        bitcast_ln32_88_reg_1378_pp0_iter15_reg;
    select_ln296_39_fu_938_p3 <= 
        res_147_reg_1428 when (inBounds_46_fu_934_p2(0) = '1') else 
        bitcast_ln32_90_reg_1384_pp0_iter15_reg;
    select_ln296_40_fu_952_p3 <= 
        res_149_reg_1433 when (inBounds_47_fu_948_p2(0) = '1') else 
        bitcast_ln32_92_reg_1390_pp0_iter15_reg;
    select_ln296_41_fu_966_p3 <= 
        res_151_reg_1438 when (inBounds_48_fu_962_p2(0) = '1') else 
        bitcast_ln32_94_reg_1396_pp0_iter15_reg;
    select_ln296_42_fu_980_p3 <= 
        res_153_reg_1443 when (inBounds_49_fu_976_p2(0) = '1') else 
        bitcast_ln32_96_reg_1402_pp0_iter15_reg;
    select_ln296_fu_882_p3 <= 
        res_reg_1408 when (inBounds_fu_878_p2(0) = '1') else 
        bitcast_ln32_82_reg_1360_pp0_iter15_reg;
    select_ln64_6_fu_460_p3 <= 
        add_ln64_6_fu_454_p2 when (icmp_ln67_reg_1090(0) = '1') else 
        n1_fu_158;
    select_ln64_fu_393_p3 <= 
        ap_const_lv7_0 when (icmp_ln67_fu_387_p2(0) = '1') else 
        m1_fu_154;
    tmp_98_fu_990_p9 <= (((((((bitcast_ln36_42_fu_986_p1 & bitcast_ln36_41_fu_972_p1) & bitcast_ln36_40_fu_958_p1) & bitcast_ln36_39_fu_944_p1) & bitcast_ln36_38_fu_930_p1) & bitcast_ln36_37_fu_916_p1) & bitcast_ln36_36_fu_902_p1) & bitcast_ln36_fu_888_p1);
    tmp_fu_407_p4 <= select_ln64_fu_393_p3(6 downto 5);
    trunc_ln170_7_fu_772_p1 <= cPrev_2_fu_765_p3(32 - 1 downto 0);
    trunc_ln170_fu_512_p1 <= bPipes_3_dout(32 - 1 downto 0);
    zext_ln64_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_6_reg_1109),27));
    zext_ln67_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_reg_1095_pp0_iter6_reg),10));
end behav;
