-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cPipes_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    cPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cPipes_0_empty_n : IN STD_LOGIC;
    cPipes_0_read : OUT STD_LOGIC;
    cMemory_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    cMemory_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    cMemory_full_n : IN STD_LOGIC;
    cMemory_write : OUT STD_LOGIC;
    bound4 : IN STD_LOGIC_VECTOR (62 downto 0);
    bound : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv512_lc_4 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln348_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln348_reg_835_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln333_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cPipes_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal cMemory_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bound_cast_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_cast_reg_743 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln335_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln335_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln335_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_248_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln183_fu_268_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_reg_770 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_1_fu_278_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_1_reg_775 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_2_fu_306_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_2_reg_780 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_3_fu_316_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_3_reg_785 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_4_fu_344_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_4_reg_790 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_5_fu_354_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_5_reg_795 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_6_fu_382_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_6_reg_800 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_7_fu_392_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_7_reg_805 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_8_fu_420_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_8_reg_810 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_9_fu_430_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_9_reg_815 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_452_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_453_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_454_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln348_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln183_13_fu_699_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_13_reg_839 : STD_LOGIC_VECTOR (511 downto 0);
    signal j_fu_104 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal j_1_fu_472_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_lcssa9_fu_108 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln335_2_fu_197_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten11_fu_116 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln333_fu_180_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal cPipes_0_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cMemory_write_local : STD_LOGIC;
    signal add_ln335_fu_191_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln339_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln333_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln333_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln335_1_fu_240_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_assign_fu_252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_fu_264_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln170_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_1_fu_274_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln_fu_294_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_2_fu_302_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_s_fu_284_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_3_fu_312_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_1_fu_332_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_4_fu_340_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_449_fu_322_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_5_fu_350_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_2_fu_370_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_6_fu_378_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_450_fu_360_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_7_fu_388_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_3_fu_408_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_8_fu_416_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_451_fu_398_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln183_9_fu_426_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln335_fu_486_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_fu_493_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_fu_498_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_fu_504_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_1_fu_509_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_1_fu_514_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_7_fu_520_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_2_fu_525_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_2_fu_530_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_8_fu_536_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_3_fu_541_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_3_fu_546_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_9_fu_552_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_4_fu_557_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_4_fu_562_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_4_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_10_fu_580_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_10_fu_584_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_10_fu_568_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_5_fu_590_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln183_11_fu_602_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_5_fu_596_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_11_fu_605_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_5_fu_617_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_12_fu_624_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_12_fu_628_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_11_fu_611_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_6_fu_634_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln183_13_fu_646_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_6_fu_640_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_13_fu_649_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_6_fu_661_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln183_14_fu_668_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_14_fu_672_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln183_12_fu_655_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln183_7_fu_678_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln183_15_fu_690_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln183_7_fu_684_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln183_15_fu_693_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten11_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten11_fu_116 <= ap_const_lv63_0;
                elsif (((icmp_ln333_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten11_fu_116 <= add_ln333_fu_180_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_112 <= ap_const_lv31_0;
                elsif (((icmp_ln333_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_112 <= select_ln335_2_fu_197_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_104 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_104 <= j_1_fu_472_p2;
                end if;
            end if; 
        end if;
    end process;

    p_lcssa9_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_lcssa9_fu_108 <= ap_const_lv512_lc_1;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    p_lcssa9_fu_108 <= or_ln183_13_fu_699_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    bound_cast_reg_743(29 downto 0) <= bound_cast_fu_145_p1(29 downto 0);
                icmp_ln335_reg_752 <= icmp_ln335_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                empty_reg_763 <= empty_fu_248_p1;
                icmp_ln348_reg_835 <= icmp_ln348_fu_466_p2;
                icmp_ln348_reg_835_pp0_iter3_reg <= icmp_ln348_reg_835;
                or_ln183_13_reg_839 <= or_ln183_13_fu_699_p2;
                or_ln335_reg_758 <= or_ln335_fu_235_p2;
                shl_ln183_1_reg_775 <= shl_ln183_1_fu_278_p2;
                    shl_ln183_2_reg_780(511 downto 32) <= shl_ln183_2_fu_306_p2(511 downto 32);
                    shl_ln183_3_reg_785(511 downto 32) <= shl_ln183_3_fu_316_p2(511 downto 32);
                    shl_ln183_4_reg_790(511 downto 64) <= shl_ln183_4_fu_344_p2(511 downto 64);
                    shl_ln183_5_reg_795(511 downto 64) <= shl_ln183_5_fu_354_p2(511 downto 64);
                    shl_ln183_6_reg_800(511 downto 96) <= shl_ln183_6_fu_382_p2(511 downto 96);
                    shl_ln183_7_reg_805(511 downto 96) <= shl_ln183_7_fu_392_p2(511 downto 96);
                    shl_ln183_8_reg_810(511 downto 128) <= shl_ln183_8_fu_420_p2(511 downto 128);
                    shl_ln183_9_reg_815(511 downto 128) <= shl_ln183_9_fu_430_p2(511 downto 128);
                shl_ln183_reg_770 <= shl_ln183_fu_268_p2;
                tmp_452_reg_820 <= cPipes_0_dout(191 downto 160);
                tmp_453_reg_825 <= cPipes_0_dout(223 downto 192);
                tmp_454_reg_830 <= cPipes_0_dout(255 downto 224);
            end if;
        end if;
    end process;
    bound_cast_reg_743(30) <= '0';
    shl_ln183_2_reg_780(31 downto 0) <= "00000000000000000000000000000000";
    shl_ln183_3_reg_785(31 downto 0) <= "00000000000000000000000000000000";
    shl_ln183_4_reg_790(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    shl_ln183_5_reg_795(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";
    shl_ln183_6_reg_800(95 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    shl_ln183_7_reg_805(95 downto 0) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    shl_ln183_8_reg_810(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    shl_ln183_9_reg_815(127 downto 0) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln333_fu_180_p2 <= std_logic_vector(unsigned(indvar_flatten11_fu_116) + unsigned(ap_const_lv63_1));
    add_ln335_fu_191_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_112) + unsigned(ap_const_lv31_1));
    and_ln183_1_fu_514_p2 <= (xor_ln183_1_fu_509_p2 and or_ln183_fu_504_p2);
    and_ln183_2_fu_530_p2 <= (xor_ln183_2_fu_525_p2 and or_ln183_7_fu_520_p2);
    and_ln183_3_fu_546_p2 <= (xor_ln183_3_fu_541_p2 and or_ln183_8_fu_536_p2);
    and_ln183_4_fu_562_p2 <= (xor_ln183_4_fu_557_p2 and or_ln183_9_fu_552_p2);
    and_ln183_5_fu_596_p2 <= (xor_ln183_5_fu_590_p2 and or_ln183_10_fu_568_p2);
    and_ln183_6_fu_640_p2 <= (xor_ln183_6_fu_634_p2 and or_ln183_11_fu_611_p2);
    and_ln183_7_fu_684_p2 <= (xor_ln183_7_fu_678_p2 and or_ln183_12_fu_655_p2);
    and_ln183_fu_498_p2 <= (xor_ln183_fu_493_p2 and select_ln335_fu_486_p3);
    and_ln333_fu_229_p2 <= (xor_ln333_fu_218_p2 and icmp_ln339_fu_223_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state3_pp0_stage0_iter2, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(cPipes_0_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (cPipes_0_empty_n = ap_const_logic_0);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(cMemory_full_n, icmp_ln348_reg_835_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln348_reg_835_pp0_iter3_reg = ap_const_lv1_1) and (cMemory_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln333_fu_175_p2)
    begin
        if (((icmp_ln333_fu_175_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bound_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound),31));

    cMemory_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, cMemory_full_n, icmp_ln348_reg_835_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln348_reg_835_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            cMemory_blk_n <= cMemory_full_n;
        else 
            cMemory_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cMemory_din <= or_ln183_13_reg_839;
    cMemory_write <= cMemory_write_local;

    cMemory_write_local_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln348_reg_835_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln348_reg_835_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            cMemory_write_local <= ap_const_logic_1;
        else 
            cMemory_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cPipes_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, cPipes_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cPipes_0_blk_n <= cPipes_0_empty_n;
        else 
            cPipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cPipes_0_read <= cPipes_0_read_local;

    cPipes_0_read_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            cPipes_0_read_local <= ap_const_logic_1;
        else 
            cPipes_0_read_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_248_p1 <= select_ln335_1_fu_240_p3(1 - 1 downto 0);
    i_assign_fu_252_p3 <= (empty_fu_248_p1 & ap_const_lv8_0);
    icmp_ln333_fu_175_p2 <= "1" when (indvar_flatten11_fu_116 = bound4) else "0";
    icmp_ln335_fu_186_p2 <= "1" when (indvar_flatten_fu_112 = bound_cast_reg_743) else "0";
    icmp_ln339_fu_223_p2 <= "1" when (j_fu_104 = ap_const_lv2_2) else "0";
    icmp_ln348_fu_466_p2 <= "1" when (select_ln335_1_fu_240_p3 = ap_const_lv2_1) else "0";
    j_1_fu_472_p2 <= std_logic_vector(unsigned(select_ln335_1_fu_240_p3) + unsigned(ap_const_lv2_1));
    or_ln183_10_fu_568_p2 <= (shl_ln183_9_reg_815 or and_ln183_4_fu_562_p2);
    or_ln183_11_fu_611_p2 <= (shl_ln183_11_fu_605_p2 or and_ln183_5_fu_596_p2);
    or_ln183_12_fu_655_p2 <= (shl_ln183_13_fu_649_p2 or and_ln183_6_fu_640_p2);
    or_ln183_13_fu_699_p2 <= (shl_ln183_15_fu_693_p2 or and_ln183_7_fu_684_p2);
    or_ln183_1_fu_332_p3 <= (empty_fu_248_p1 & ap_const_lv8_40);
    or_ln183_2_fu_370_p3 <= (empty_fu_248_p1 & ap_const_lv8_60);
    or_ln183_3_fu_408_p3 <= (empty_fu_248_p1 & ap_const_lv8_80);
    or_ln183_4_fu_573_p3 <= (empty_reg_763 & ap_const_lv8_A0);
    or_ln183_5_fu_617_p3 <= (empty_reg_763 & ap_const_lv8_C0);
    or_ln183_6_fu_661_p3 <= (empty_reg_763 & ap_const_lv8_E0);
    or_ln183_7_fu_520_p2 <= (shl_ln183_3_reg_785 or and_ln183_1_fu_514_p2);
    or_ln183_8_fu_536_p2 <= (shl_ln183_5_reg_795 or and_ln183_2_fu_530_p2);
    or_ln183_9_fu_552_p2 <= (shl_ln183_7_reg_805 or and_ln183_3_fu_546_p2);
    or_ln183_fu_504_p2 <= (shl_ln183_1_reg_775 or and_ln183_fu_498_p2);
    or_ln335_fu_235_p2 <= (icmp_ln335_reg_752 or and_ln333_fu_229_p2);
    or_ln_fu_294_p3 <= (empty_fu_248_p1 & ap_const_lv8_20);
    select_ln335_1_fu_240_p3 <= 
        ap_const_lv2_0 when (or_ln335_fu_235_p2(0) = '1') else 
        j_fu_104;
    select_ln335_2_fu_197_p3 <= 
        ap_const_lv31_1 when (icmp_ln335_fu_186_p2(0) = '1') else 
        add_ln335_fu_191_p2;
    select_ln335_fu_486_p3 <= 
        ap_const_lv512_lc_1 when (or_ln335_reg_758(0) = '1') else 
        p_lcssa9_fu_108;
    shl_ln183_10_fu_584_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_10_fu_580_p1(31-1 downto 0)))));
    shl_ln183_11_fu_605_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_11_fu_602_p1),to_integer(unsigned('0' & zext_ln183_10_fu_580_p1(31-1 downto 0)))));
    shl_ln183_12_fu_628_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_12_fu_624_p1(31-1 downto 0)))));
    shl_ln183_13_fu_649_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_13_fu_646_p1),to_integer(unsigned('0' & zext_ln183_12_fu_624_p1(31-1 downto 0)))));
    shl_ln183_14_fu_672_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_14_fu_668_p1(31-1 downto 0)))));
    shl_ln183_15_fu_693_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_15_fu_690_p1),to_integer(unsigned('0' & zext_ln183_14_fu_668_p1(31-1 downto 0)))));
    shl_ln183_1_fu_278_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_1_fu_274_p1),to_integer(unsigned('0' & zext_ln183_fu_264_p1(31-1 downto 0)))));
    shl_ln183_2_fu_306_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_2_fu_302_p1(31-1 downto 0)))));
    shl_ln183_3_fu_316_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_3_fu_312_p1),to_integer(unsigned('0' & zext_ln183_2_fu_302_p1(31-1 downto 0)))));
    shl_ln183_4_fu_344_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_4_fu_340_p1(31-1 downto 0)))));
    shl_ln183_5_fu_354_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_5_fu_350_p1),to_integer(unsigned('0' & zext_ln183_4_fu_340_p1(31-1 downto 0)))));
    shl_ln183_6_fu_382_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_6_fu_378_p1(31-1 downto 0)))));
    shl_ln183_7_fu_392_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_7_fu_388_p1),to_integer(unsigned('0' & zext_ln183_6_fu_378_p1(31-1 downto 0)))));
    shl_ln183_8_fu_420_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_8_fu_416_p1(31-1 downto 0)))));
    shl_ln183_9_fu_430_p2 <= std_logic_vector(shift_left(unsigned(zext_ln183_9_fu_426_p1),to_integer(unsigned('0' & zext_ln183_8_fu_416_p1(31-1 downto 0)))));
    shl_ln183_fu_268_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & zext_ln183_fu_264_p1(31-1 downto 0)))));
    tmp_449_fu_322_p4 <= cPipes_0_dout(95 downto 64);
    tmp_450_fu_360_p4 <= cPipes_0_dout(127 downto 96);
    tmp_451_fu_398_p4 <= cPipes_0_dout(159 downto 128);
    tmp_s_fu_284_p4 <= cPipes_0_dout(63 downto 32);
    trunc_ln170_fu_260_p1 <= cPipes_0_dout(32 - 1 downto 0);
    xor_ln183_1_fu_509_p2 <= (shl_ln183_2_reg_780 xor ap_const_lv512_lc_4);
    xor_ln183_2_fu_525_p2 <= (shl_ln183_4_reg_790 xor ap_const_lv512_lc_4);
    xor_ln183_3_fu_541_p2 <= (shl_ln183_6_reg_800 xor ap_const_lv512_lc_4);
    xor_ln183_4_fu_557_p2 <= (shl_ln183_8_reg_810 xor ap_const_lv512_lc_4);
    xor_ln183_5_fu_590_p2 <= (shl_ln183_10_fu_584_p2 xor ap_const_lv512_lc_4);
    xor_ln183_6_fu_634_p2 <= (shl_ln183_12_fu_628_p2 xor ap_const_lv512_lc_4);
    xor_ln183_7_fu_678_p2 <= (shl_ln183_14_fu_672_p2 xor ap_const_lv512_lc_4);
    xor_ln183_fu_493_p2 <= (shl_ln183_reg_770 xor ap_const_lv512_lc_4);
    xor_ln333_fu_218_p2 <= (icmp_ln335_reg_752 xor ap_const_lv1_1);
    zext_ln183_10_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_4_fu_573_p3),512));
    zext_ln183_11_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_452_reg_820),512));
    zext_ln183_12_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_5_fu_617_p3),512));
    zext_ln183_13_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_reg_825),512));
    zext_ln183_14_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_6_fu_661_p3),512));
    zext_ln183_15_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_454_reg_830),512));
    zext_ln183_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln170_fu_260_p1),512));
    zext_ln183_2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_294_p3),512));
    zext_ln183_3_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_284_p4),512));
    zext_ln183_4_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_1_fu_332_p3),512));
    zext_ln183_5_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_449_fu_322_p4),512));
    zext_ln183_6_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_2_fu_370_p3),512));
    zext_ln183_7_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_450_fu_360_p4),512));
    zext_ln183_8_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln183_3_fu_408_p3),512));
    zext_ln183_9_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_451_fu_398_p4),512));
    zext_ln183_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_assign_fu_252_p3),512));
end behav;
