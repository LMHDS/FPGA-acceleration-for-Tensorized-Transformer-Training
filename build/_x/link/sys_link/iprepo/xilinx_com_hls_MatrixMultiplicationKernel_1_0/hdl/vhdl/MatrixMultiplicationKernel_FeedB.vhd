-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMultiplicationKernel_FeedB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bFeed_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bFeed_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bFeed_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bFeed_empty_n : IN STD_LOGIC;
    bFeed_read : OUT STD_LOGIC;
    bPipes_0_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    bPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    bPipes_0_full_n : IN STD_LOGIC;
    bPipes_0_write : OUT STD_LOGIC;
    size_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_n_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_n_empty_n : IN STD_LOGIC;
    size_n_read : OUT STD_LOGIC;
    size_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_k_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_k_empty_n : IN STD_LOGIC;
    size_k_read : OUT STD_LOGIC;
    size_m_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_m_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_m_empty_n : IN STD_LOGIC;
    size_m_read : OUT STD_LOGIC );
end;


architecture behav of MatrixMultiplicationKernel_FeedB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv33_1FF : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal size_n_blk_n : STD_LOGIC;
    signal size_k_blk_n : STD_LOGIC;
    signal size_m_blk_n : STD_LOGIC;
    signal size_k_2_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_reg_229 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln9_reg_234 : STD_LOGIC_VECTOR (23 downto 0);
    signal n0_34_fu_185_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal n0_34_reg_242 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m0_1_fu_196_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal m0_1_reg_250 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_q1 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_FeedB_Pipeline_1_fu_118_ap_start : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_ap_done : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_ap_idle : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_ap_ready : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_buffer_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0 : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_buffer_r_we0 : STD_LOGIC;
    signal grp_FeedB_Pipeline_1_fu_118_buffer_r_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_idle : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0 : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0 : STD_LOGIC;
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1 : STD_LOGIC;
    signal m0_reg_96 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln412_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln416_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_04_reg_107 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln414_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_FeedB_Pipeline_1_fu_118_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n0_fu_70 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal size_m_read_local : STD_LOGIC;
    signal size_k_read_local : STD_LOGIC;
    signal size_n_read_local : STD_LOGIC;
    signal zext_ln111_fu_132_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln111_fu_136_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln116_fu_152_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln116_fu_156_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMultiplicationKernel_FeedB_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component MatrixMultiplicationKernel_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bFeed_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        bFeed_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bFeed_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bFeed_empty_n : IN STD_LOGIC;
        bFeed_read : OUT STD_LOGIC;
        bPipes_0_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        bPipes_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bPipes_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bPipes_0_full_n : IN STD_LOGIC;
        bPipes_0_write : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_q1 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component MatrixMultiplicationKernel_FeedB_buffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    buffer_U : component MatrixMultiplicationKernel_FeedB_buffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        address1 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1,
        ce1 => buffer_ce1,
        q1 => buffer_q1);

    grp_FeedB_Pipeline_1_fu_118 : component MatrixMultiplicationKernel_FeedB_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FeedB_Pipeline_1_fu_118_ap_start,
        ap_done => grp_FeedB_Pipeline_1_fu_118_ap_done,
        ap_idle => grp_FeedB_Pipeline_1_fu_118_ap_idle,
        ap_ready => grp_FeedB_Pipeline_1_fu_118_ap_ready,
        buffer_r_address0 => grp_FeedB_Pipeline_1_fu_118_buffer_r_address0,
        buffer_r_ce0 => grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0,
        buffer_r_we0 => grp_FeedB_Pipeline_1_fu_118_buffer_r_we0,
        buffer_r_d0 => grp_FeedB_Pipeline_1_fu_118_buffer_r_d0);

    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123 : component MatrixMultiplicationKernel_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start,
        ap_done => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done,
        ap_idle => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_idle,
        ap_ready => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready,
        bFeed_dout => bFeed_dout,
        bFeed_num_data_valid => ap_const_lv3_0,
        bFeed_fifo_cap => ap_const_lv3_0,
        bFeed_empty_n => bFeed_empty_n,
        bFeed_read => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read,
        bPipes_0_din => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din,
        bPipes_0_num_data_valid => ap_const_lv3_0,
        bPipes_0_fifo_cap => ap_const_lv3_0,
        bPipes_0_full_n => bPipes_0_full_n,
        bPipes_0_write => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write,
        buffer_r_address0 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0,
        buffer_r_ce0 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0,
        buffer_r_we0 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0,
        buffer_r_d0 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0,
        buffer_r_address1 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address1,
        buffer_r_ce1 => grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1,
        buffer_r_q1 => buffer_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln412_fu_180_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_FeedB_Pipeline_1_fu_118_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln416_fu_206_p2 = ap_const_lv1_0))) then 
                    grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FeedB_Pipeline_1_fu_118_ap_ready = ap_const_logic_1)) then 
                    grp_FeedB_Pipeline_1_fu_118_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_ready = ap_const_logic_1)) then 
                    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_04_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done = ap_const_logic_1))) then 
                k_04_reg_107 <= k_reg_258;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln414_fu_191_p2 = ap_const_lv1_0))) then 
                k_04_reg_107 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m0_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln416_fu_206_p2 = ap_const_lv1_1))) then 
                m0_reg_96 <= m0_1_reg_250;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln412_fu_180_p2 = ap_const_lv1_0))) then 
                m0_reg_96 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    n0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n0_fu_70 <= ap_const_lv24_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln414_fu_191_p2 = ap_const_lv1_1))) then 
                n0_fu_70 <= n0_34_reg_242;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_258 <= k_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m0_1_reg_250 <= m0_1_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n0_34_reg_242 <= n0_34_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                size_k_2_reg_224 <= size_k_dout;
                trunc_ln9_reg_234 <= add_ln116_fu_156_p2(32 downto 9);
                trunc_ln_reg_229 <= add_ln111_fu_136_p2(32 downto 9);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_FeedB_Pipeline_1_fu_118_ap_done, grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done, icmp_ln412_fu_180_p2, icmp_ln416_fu_206_p2, icmp_ln414_fu_191_p2, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln412_fu_180_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln414_fu_191_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln416_fu_206_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_FeedB_Pipeline_1_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln111_fu_136_p2 <= std_logic_vector(unsigned(zext_ln111_fu_132_p1) + unsigned(ap_const_lv33_1FF));
    add_ln116_fu_156_p2 <= std_logic_vector(unsigned(zext_ln116_fu_152_p1) + unsigned(ap_const_lv33_1FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_FeedB_Pipeline_1_fu_118_ap_done)
    begin
        if ((grp_FeedB_Pipeline_1_fu_118_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done)
    begin
        if ((grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, size_n_empty_n, size_k_empty_n, size_m_empty_n)
    begin
                ap_block_state1 <= ((size_m_empty_n = ap_const_logic_0) or (size_k_empty_n = ap_const_logic_0) or (size_n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln412_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln412_fu_180_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln412_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln412_fu_180_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bFeed_read_assign_proc : process(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bFeed_read <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bFeed_read;
        else 
            bFeed_read <= ap_const_logic_0;
        end if; 
    end process;

    bPipes_0_din <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_din;

    bPipes_0_write_assign_proc : process(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bPipes_0_write <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_bPipes_0_write;
        else 
            bPipes_0_write <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(grp_FeedB_Pipeline_1_fu_118_buffer_r_address0, grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_address0 <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_address0 <= grp_FeedB_Pipeline_1_fu_118_buffer_r_address0;
        else 
            buffer_address0 <= "XXXXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0, grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_ce0 <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_ce0 <= grp_FeedB_Pipeline_1_fu_118_buffer_r_ce0;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_ce1 <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_ce1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(grp_FeedB_Pipeline_1_fu_118_buffer_r_d0, grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_d0 <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_d0 <= grp_FeedB_Pipeline_1_fu_118_buffer_r_d0;
        else 
            buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(grp_FeedB_Pipeline_1_fu_118_buffer_r_we0, grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer_we0 <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_buffer_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_we0 <= grp_FeedB_Pipeline_1_fu_118_buffer_r_we0;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_FeedB_Pipeline_1_fu_118_ap_start <= grp_FeedB_Pipeline_1_fu_118_ap_start_reg;
    grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start <= grp_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M_fu_123_ap_start_reg;
    icmp_ln412_fu_180_p2 <= "1" when (n0_fu_70 = trunc_ln_reg_229) else "0";
    icmp_ln414_fu_191_p2 <= "1" when (m0_reg_96 = trunc_ln9_reg_234) else "0";
    icmp_ln416_fu_206_p2 <= "1" when (k_04_reg_107 = size_k_2_reg_224) else "0";
    k_fu_211_p2 <= std_logic_vector(unsigned(k_04_reg_107) + unsigned(ap_const_lv32_1));
    m0_1_fu_196_p2 <= std_logic_vector(unsigned(m0_reg_96) + unsigned(ap_const_lv24_1));
    n0_34_fu_185_p2 <= std_logic_vector(unsigned(n0_fu_70) + unsigned(ap_const_lv24_1));

    size_k_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_k_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_blk_n <= size_k_empty_n;
        else 
            size_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_k_read <= size_k_read_local;

    size_k_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_k_read_local <= ap_const_logic_1;
        else 
            size_k_read_local <= ap_const_logic_0;
        end if; 
    end process;


    size_m_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_m_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_blk_n <= size_m_empty_n;
        else 
            size_m_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_m_read <= size_m_read_local;

    size_m_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_m_read_local <= ap_const_logic_1;
        else 
            size_m_read_local <= ap_const_logic_0;
        end if; 
    end process;


    size_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_n_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_blk_n <= size_n_empty_n;
        else 
            size_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_n_read <= size_n_read_local;

    size_n_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_n_read_local <= ap_const_logic_1;
        else 
            size_n_read_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln111_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_n_dout),33));
    zext_ln116_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(size_m_dout),33));
end behav;
