// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_ConvertWidthC (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cPipes_0_dout,
        cPipes_0_num_data_valid,
        cPipes_0_fifo_cap,
        cPipes_0_empty_n,
        cPipes_0_read,
        cMemory_din,
        cMemory_num_data_valid,
        cMemory_fifo_cap,
        cMemory_full_n,
        cMemory_write,
        size_n_dout,
        size_n_num_data_valid,
        size_n_fifo_cap,
        size_n_empty_n,
        size_n_read,
        size_m_dout,
        size_m_num_data_valid,
        size_m_fifo_cap,
        size_m_empty_n,
        size_m_read,
        size_n_c_din,
        size_n_c_num_data_valid,
        size_n_c_fifo_cap,
        size_n_c_full_n,
        size_n_c_write,
        size_m_c_din,
        size_m_c_num_data_valid,
        size_m_c_fifo_cap,
        size_m_c_full_n,
        size_m_c_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] cPipes_0_dout;
input  [2:0] cPipes_0_num_data_valid;
input  [2:0] cPipes_0_fifo_cap;
input   cPipes_0_empty_n;
output   cPipes_0_read;
output  [511:0] cMemory_din;
input  [6:0] cMemory_num_data_valid;
input  [6:0] cMemory_fifo_cap;
input   cMemory_full_n;
output   cMemory_write;
input  [31:0] size_n_dout;
input  [2:0] size_n_num_data_valid;
input  [2:0] size_n_fifo_cap;
input   size_n_empty_n;
output   size_n_read;
input  [31:0] size_m_dout;
input  [2:0] size_m_num_data_valid;
input  [2:0] size_m_fifo_cap;
input   size_m_empty_n;
output   size_m_read;
output  [31:0] size_n_c_din;
input  [2:0] size_n_c_num_data_valid;
input  [2:0] size_n_c_fifo_cap;
input   size_n_c_full_n;
output   size_n_c_write;
output  [31:0] size_m_c_din;
input  [2:0] size_m_c_num_data_valid;
input  [2:0] size_m_c_fifo_cap;
input   size_m_c_full_n;
output   size_m_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cPipes_0_read;
reg cMemory_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_n_blk_n;
reg    size_m_blk_n;
reg    size_n_c_blk_n;
reg    size_m_c_blk_n;
reg   [23:0] tmp_s_reg_163;
reg    ap_block_state1;
reg   [23:0] tmp_455_reg_168;
wire   [29:0] tmp_456_fu_146_p3;
reg   [29:0] tmp_456_reg_173;
wire    ap_CS_fsm_state2;
wire   [62:0] grp_fu_94_p2;
reg   [62:0] bound4_reg_188;
wire    ap_CS_fsm_state3;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_idle;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read;
wire   [511:0] grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din;
wire    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write;
reg    grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    size_m_read_local;
reg    size_m_c_write_local;
reg    size_n_read_local;
reg    size_n_c_write_local;
wire   [32:0] grp_fu_94_p0;
wire   [29:0] grp_fu_94_p1;
wire   [32:0] size_n_cast_fu_99_p1;
wire   [32:0] sub_i_fu_103_p2;
wire   [32:0] size_m_cast_fu_119_p1;
wire   [32:0] sub_i2_fu_123_p2;
wire   [32:0] div_i_fu_139_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [62:0] grp_fu_94_p00;
wire   [62:0] grp_fu_94_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg = 1'b0;
end

MatrixMultiplicationKernel_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1 grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start),
    .ap_done(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done),
    .ap_idle(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_idle),
    .ap_ready(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready),
    .cPipes_0_dout(cPipes_0_dout),
    .cPipes_0_num_data_valid(3'd0),
    .cPipes_0_fifo_cap(3'd0),
    .cPipes_0_empty_n(cPipes_0_empty_n),
    .cPipes_0_read(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read),
    .cMemory_din(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din),
    .cMemory_num_data_valid(7'd0),
    .cMemory_fifo_cap(7'd0),
    .cMemory_full_n(cMemory_full_n),
    .cMemory_write(grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write),
    .bound4(bound4_reg_188),
    .bound(tmp_456_reg_173)
);

MatrixMultiplicationKernel_mul_33ns_30ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 63 ))
mul_33ns_30ns_63_2_1_U1718(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_94_p0),
    .din1(grp_fu_94_p1),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_ready == 1'b1)) begin
            grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound4_reg_188 <= grp_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_455_reg_168 <= {{sub_i2_fu_123_p2[32:9]}};
        tmp_s_reg_163 <= {{sub_i_fu_103_p2[32:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_456_reg_173[29 : 6] <= tmp_456_fu_146_p3[29 : 6];
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cMemory_write = grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_write;
    end else begin
        cMemory_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cPipes_0_read = grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cPipes_0_read;
    end else begin
        cPipes_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_blk_n = size_m_empty_n;
    end else begin
        size_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_c_blk_n = size_m_c_full_n;
    end else begin
        size_m_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_c_write_local = 1'b1;
    end else begin
        size_m_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_read_local = 1'b1;
    end else begin
        size_m_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_blk_n = size_n_empty_n;
    end else begin
        size_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_c_blk_n = size_n_c_full_n;
    end else begin
        size_n_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_c_write_local = 1'b1;
    end else begin
        size_n_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_read_local = 1'b1;
    end else begin
        size_n_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_m_c_full_n == 1'b0) | (size_n_c_full_n == 1'b0) | (size_m_empty_n == 1'b0) | (size_n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cMemory_din = grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_cMemory_din;

assign div_i_fu_139_p3 = {{tmp_s_reg_163}, {9'd0}};

assign grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start = grp_ConvertWidthC_Pipeline_ConvertWidthC_N_ConvertWidthC_M_VITIS_LOOP_339_1_fu_84_ap_start_reg;

assign grp_fu_94_p0 = grp_fu_94_p00;

assign grp_fu_94_p00 = div_i_fu_139_p3;

assign grp_fu_94_p1 = grp_fu_94_p10;

assign grp_fu_94_p10 = tmp_456_fu_146_p3;

assign size_m_c_din = size_m_dout;

assign size_m_c_write = size_m_c_write_local;

assign size_m_cast_fu_119_p1 = size_m_dout;

assign size_m_read = size_m_read_local;

assign size_n_c_din = size_n_dout;

assign size_n_c_write = size_n_c_write_local;

assign size_n_cast_fu_99_p1 = size_n_dout;

assign size_n_read = size_n_read_local;

assign sub_i2_fu_123_p2 = (size_m_cast_fu_119_p1 + 33'd511);

assign sub_i_fu_103_p2 = (size_n_cast_fu_99_p1 + 33'd511);

assign tmp_456_fu_146_p3 = {{tmp_455_reg_168}, {6'd0}};

always @ (posedge ap_clk) begin
    tmp_456_reg_173[5:0] <= 6'b000000;
end

endmodule //MatrixMultiplicationKernel_ConvertWidthC
