// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_WriteC_Pipeline_WriteC_OuterTile_N_WriteC_OuterTile_M_WriteC_N1_WriteC_M1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cMemory_dout,
        cMemory_num_data_valid,
        cMemory_fifo_cap,
        cMemory_empty_n,
        cMemory_read,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        bound17,
        bound4,
        size_n_load,
        empty,
        div_i1,
        memory_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] cMemory_dout;
input  [6:0] cMemory_num_data_valid;
input  [6:0] cMemory_fifo_cap;
input   cMemory_empty_n;
output   cMemory_read;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [511:0] m_axi_gmem2_WDATA;
output  [63:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [511:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
input  [60:0] bound17;
input  [37:0] bound4;
input  [31:0] size_n_load;
input  [27:0] empty;
input  [27:0] div_i1;
input  [63:0] memory_load;

reg ap_idle;
reg m_axi_gmem2_AWVALID;
reg m_axi_gmem2_WVALID;
reg m_axi_gmem2_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg    ap_enable_reg_pp0_iter75;
reg    ap_idle_pp0;
reg    ap_block_state7_pp0_stage0_iter6;
reg   [0:0] cmp18_reg_701;
reg   [0:0] cmp18_reg_701_pp0_iter5_reg;
reg   [0:0] icmp_ln379_reg_716;
reg    ap_predicate_op173_writereq_state7;
reg    ap_block_state7_io;
reg   [0:0] cmp18_reg_701_pp0_iter6_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter6_reg;
reg    ap_predicate_op174_write_state8;
reg    ap_block_state8_io;
reg   [0:0] cmp18_reg_701_pp0_iter74_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter74_reg;
reg    ap_predicate_op242_writeresp_state76;
reg    ap_block_state76_pp0_stage0_iter75;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln368_fu_262_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cMemory_blk_n;
wire    ap_block_pp0_stage0;
reg    gmem2_blk_n_AW;
reg    gmem2_blk_n_W;
reg    gmem2_blk_n_B;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] p_cast_fu_210_p1;
reg   [31:0] p_cast_reg_647;
wire   [38:0] bound4_cast_fu_214_p1;
reg   [38:0] bound4_cast_reg_652;
wire   [0:0] icmp_ln370_fu_273_p2;
reg   [0:0] icmp_ln370_reg_661;
reg   [0:0] icmp_ln370_reg_661_pp0_iter2_reg;
reg   [0:0] icmp_ln370_reg_661_pp0_iter3_reg;
wire   [0:0] xor_ln368_fu_278_p2;
reg   [0:0] xor_ln368_reg_669;
wire   [0:0] icmp_ln372_fu_284_p2;
reg   [0:0] icmp_ln372_reg_674;
wire   [0:0] and_ln368_1_fu_290_p2;
reg   [0:0] and_ln368_1_reg_679;
reg   [0:0] and_ln368_1_reg_679_pp0_iter2_reg;
reg   [0:0] and_ln368_1_reg_679_pp0_iter3_reg;
wire   [0:0] empty_143_fu_296_p2;
reg   [0:0] empty_143_reg_685;
wire   [5:0] m1m_mid2_fu_417_p3;
reg   [5:0] m1m_mid2_reg_690;
reg   [5:0] m1m_mid2_reg_690_pp0_iter3_reg;
wire  signed [31:0] add_fu_449_p2;
reg  signed [31:0] add_reg_695;
wire   [0:0] cmp18_fu_476_p2;
reg   [0:0] cmp18_reg_701_pp0_iter4_reg;
reg   [0:0] cmp18_reg_701_pp0_iter7_reg;
reg   [0:0] cmp18_reg_701_pp0_iter8_reg;
reg   [0:0] cmp18_reg_701_pp0_iter9_reg;
reg   [0:0] cmp18_reg_701_pp0_iter10_reg;
reg   [0:0] cmp18_reg_701_pp0_iter11_reg;
reg   [0:0] cmp18_reg_701_pp0_iter12_reg;
reg   [0:0] cmp18_reg_701_pp0_iter13_reg;
reg   [0:0] cmp18_reg_701_pp0_iter14_reg;
reg   [0:0] cmp18_reg_701_pp0_iter15_reg;
reg   [0:0] cmp18_reg_701_pp0_iter16_reg;
reg   [0:0] cmp18_reg_701_pp0_iter17_reg;
reg   [0:0] cmp18_reg_701_pp0_iter18_reg;
reg   [0:0] cmp18_reg_701_pp0_iter19_reg;
reg   [0:0] cmp18_reg_701_pp0_iter20_reg;
reg   [0:0] cmp18_reg_701_pp0_iter21_reg;
reg   [0:0] cmp18_reg_701_pp0_iter22_reg;
reg   [0:0] cmp18_reg_701_pp0_iter23_reg;
reg   [0:0] cmp18_reg_701_pp0_iter24_reg;
reg   [0:0] cmp18_reg_701_pp0_iter25_reg;
reg   [0:0] cmp18_reg_701_pp0_iter26_reg;
reg   [0:0] cmp18_reg_701_pp0_iter27_reg;
reg   [0:0] cmp18_reg_701_pp0_iter28_reg;
reg   [0:0] cmp18_reg_701_pp0_iter29_reg;
reg   [0:0] cmp18_reg_701_pp0_iter30_reg;
reg   [0:0] cmp18_reg_701_pp0_iter31_reg;
reg   [0:0] cmp18_reg_701_pp0_iter32_reg;
reg   [0:0] cmp18_reg_701_pp0_iter33_reg;
reg   [0:0] cmp18_reg_701_pp0_iter34_reg;
reg   [0:0] cmp18_reg_701_pp0_iter35_reg;
reg   [0:0] cmp18_reg_701_pp0_iter36_reg;
reg   [0:0] cmp18_reg_701_pp0_iter37_reg;
reg   [0:0] cmp18_reg_701_pp0_iter38_reg;
reg   [0:0] cmp18_reg_701_pp0_iter39_reg;
reg   [0:0] cmp18_reg_701_pp0_iter40_reg;
reg   [0:0] cmp18_reg_701_pp0_iter41_reg;
reg   [0:0] cmp18_reg_701_pp0_iter42_reg;
reg   [0:0] cmp18_reg_701_pp0_iter43_reg;
reg   [0:0] cmp18_reg_701_pp0_iter44_reg;
reg   [0:0] cmp18_reg_701_pp0_iter45_reg;
reg   [0:0] cmp18_reg_701_pp0_iter46_reg;
reg   [0:0] cmp18_reg_701_pp0_iter47_reg;
reg   [0:0] cmp18_reg_701_pp0_iter48_reg;
reg   [0:0] cmp18_reg_701_pp0_iter49_reg;
reg   [0:0] cmp18_reg_701_pp0_iter50_reg;
reg   [0:0] cmp18_reg_701_pp0_iter51_reg;
reg   [0:0] cmp18_reg_701_pp0_iter52_reg;
reg   [0:0] cmp18_reg_701_pp0_iter53_reg;
reg   [0:0] cmp18_reg_701_pp0_iter54_reg;
reg   [0:0] cmp18_reg_701_pp0_iter55_reg;
reg   [0:0] cmp18_reg_701_pp0_iter56_reg;
reg   [0:0] cmp18_reg_701_pp0_iter57_reg;
reg   [0:0] cmp18_reg_701_pp0_iter58_reg;
reg   [0:0] cmp18_reg_701_pp0_iter59_reg;
reg   [0:0] cmp18_reg_701_pp0_iter60_reg;
reg   [0:0] cmp18_reg_701_pp0_iter61_reg;
reg   [0:0] cmp18_reg_701_pp0_iter62_reg;
reg   [0:0] cmp18_reg_701_pp0_iter63_reg;
reg   [0:0] cmp18_reg_701_pp0_iter64_reg;
reg   [0:0] cmp18_reg_701_pp0_iter65_reg;
reg   [0:0] cmp18_reg_701_pp0_iter66_reg;
reg   [0:0] cmp18_reg_701_pp0_iter67_reg;
reg   [0:0] cmp18_reg_701_pp0_iter68_reg;
reg   [0:0] cmp18_reg_701_pp0_iter69_reg;
reg   [0:0] cmp18_reg_701_pp0_iter70_reg;
reg   [0:0] cmp18_reg_701_pp0_iter71_reg;
reg   [0:0] cmp18_reg_701_pp0_iter72_reg;
reg   [0:0] cmp18_reg_701_pp0_iter73_reg;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] mul3_i_reg_705;
wire   [27:0] add_ln379_fu_518_p2;
reg   [27:0] add_ln379_reg_710;
wire   [0:0] icmp_ln379_fu_529_p2;
reg   [0:0] icmp_ln379_reg_716_pp0_iter7_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter8_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter9_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter10_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter11_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter12_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter13_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter14_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter15_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter16_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter17_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter18_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter19_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter20_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter21_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter22_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter23_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter24_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter25_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter26_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter27_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter28_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter29_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter30_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter31_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter32_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter33_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter34_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter35_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter36_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter37_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter38_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter39_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter40_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter41_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter42_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter43_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter44_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter45_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter46_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter47_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter48_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter49_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter50_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter51_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter52_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter53_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter54_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter55_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter56_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter57_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter58_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter59_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter60_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter61_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter62_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter63_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter64_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter65_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter66_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter67_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter68_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter69_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter70_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter71_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter72_reg;
reg   [0:0] icmp_ln379_reg_716_pp0_iter73_reg;
reg   [57:0] trunc_ln1_reg_720;
reg   [511:0] val_reg_725;
wire  signed [63:0] sext_ln150_fu_568_p1;
reg    ap_block_pp0_stage0_01001;
reg   [5:0] m1m_fu_120;
wire   [5:0] add_ln374_fu_455_p2;
wire    ap_loop_init;
reg   [9:0] n1_fu_124;
wire   [9:0] select_ln372_fu_425_p3;
reg   [15:0] indvar_flatten_fu_128;
wire   [15:0] select_ln372_1_fu_308_p3;
reg   [23:0] m0_fu_132;
wire   [23:0] select_ln370_fu_496_p3;
reg   [38:0] indvar_flatten12_fu_136;
wire   [38:0] select_ln370_1_fu_322_p3;
reg   [23:0] n0_fu_140;
wire   [23:0] select_ln368_1_fu_371_p3;
reg   [60:0] indvar_flatten35_fu_144;
wire   [60:0] add_ln368_fu_267_p2;
reg    cMemory_read_local;
wire   [27:0] grp_fu_206_p1;
wire   [15:0] add_ln372_1_fu_302_p2;
wire   [38:0] add_ln370_1_fu_316_p2;
wire   [0:0] icmp_ln374_fu_354_p2;
wire   [23:0] add_ln368_1_fu_365_p2;
wire   [0:0] exitcond_flatten_not_fu_385_p2;
wire   [0:0] and_ln368_fu_360_p2;
wire   [0:0] not_exitcond_flatten_mid234_fu_390_p2;
wire   [9:0] n1_mid26_fu_378_p3;
wire   [0:0] icmp_ln374_mid211_fu_395_p2;
wire   [0:0] empty_144_fu_407_p2;
wire   [0:0] empty_145_fu_412_p2;
wire   [9:0] add_ln372_fu_401_p2;
wire   [22:0] empty_146_fu_433_p1;
wire   [31:0] mul_fu_437_p3;
wire   [31:0] zext_ln372_fu_445_p1;
wire   [23:0] select_ln368_fu_483_p3;
wire   [23:0] add_ln370_fu_490_p2;
wire   [22:0] empty_147_fu_503_p1;
wire   [27:0] mul1_fu_507_p3;
wire   [27:0] zext_ln374_fu_515_p1;
wire   [31:0] zext_ln50_fu_533_p1;
wire   [31:0] add_ln50_fu_536_p2;
wire   [37:0] shl_ln_fu_541_p3;
wire   [63:0] zext_ln150_fu_549_p1;
wire   [63:0] add_ln150_fu_553_p2;
reg    grp_fu_206_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg    ap_loop_exit_ready_pp0_iter40_reg;
reg    ap_loop_exit_ready_pp0_iter41_reg;
reg    ap_loop_exit_ready_pp0_iter42_reg;
reg    ap_loop_exit_ready_pp0_iter43_reg;
reg    ap_loop_exit_ready_pp0_iter44_reg;
reg    ap_loop_exit_ready_pp0_iter45_reg;
reg    ap_loop_exit_ready_pp0_iter46_reg;
reg    ap_loop_exit_ready_pp0_iter47_reg;
reg    ap_loop_exit_ready_pp0_iter48_reg;
reg    ap_loop_exit_ready_pp0_iter49_reg;
reg    ap_loop_exit_ready_pp0_iter50_reg;
reg    ap_loop_exit_ready_pp0_iter51_reg;
reg    ap_loop_exit_ready_pp0_iter52_reg;
reg    ap_loop_exit_ready_pp0_iter53_reg;
reg    ap_loop_exit_ready_pp0_iter54_reg;
reg    ap_loop_exit_ready_pp0_iter55_reg;
reg    ap_loop_exit_ready_pp0_iter56_reg;
reg    ap_loop_exit_ready_pp0_iter57_reg;
reg    ap_loop_exit_ready_pp0_iter58_reg;
reg    ap_loop_exit_ready_pp0_iter59_reg;
reg    ap_loop_exit_ready_pp0_iter60_reg;
reg    ap_loop_exit_ready_pp0_iter61_reg;
reg    ap_loop_exit_ready_pp0_iter62_reg;
reg    ap_loop_exit_ready_pp0_iter63_reg;
reg    ap_loop_exit_ready_pp0_iter64_reg;
reg    ap_loop_exit_ready_pp0_iter65_reg;
reg    ap_loop_exit_ready_pp0_iter66_reg;
reg    ap_loop_exit_ready_pp0_iter67_reg;
reg    ap_loop_exit_ready_pp0_iter68_reg;
reg    ap_loop_exit_ready_pp0_iter69_reg;
reg    ap_loop_exit_ready_pp0_iter70_reg;
reg    ap_loop_exit_ready_pp0_iter71_reg;
reg    ap_loop_exit_ready_pp0_iter72_reg;
reg    ap_loop_exit_ready_pp0_iter73_reg;
reg    ap_loop_exit_ready_pp0_iter74_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 m1m_fu_120 = 6'd0;
#0 n1_fu_124 = 10'd0;
#0 indvar_flatten_fu_128 = 16'd0;
#0 m0_fu_132 = 24'd0;
#0 indvar_flatten12_fu_136 = 39'd0;
#0 n0_fu_140 = 24'd0;
#0 indvar_flatten35_fu_144 = 61'd0;
#0 ap_done_reg = 1'b0;
end

MatrixMultiplicationKernel_mul_32s_28ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_32s_28ns_32_2_1_U1726(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_695),
    .din1(grp_fu_206_p1),
    .ce(grp_fu_206_ce),
    .dout(grp_fu_206_p2)
);

MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter74_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_136 <= 39'd0;
        end else if (((icmp_ln368_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten12_fu_136 <= select_ln370_1_fu_322_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten35_fu_144 <= 61'd0;
        end else if (((icmp_ln368_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten35_fu_144 <= add_ln368_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_128 <= 16'd0;
        end else if (((icmp_ln368_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_128 <= select_ln372_1_fu_308_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m0_fu_132 <= 24'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            m0_fu_132 <= select_ln370_fu_496_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m1m_fu_120 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            m1m_fu_120 <= add_ln374_fu_455_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n0_fu_140 <= 24'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            n0_fu_140 <= select_ln368_1_fu_371_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n1_fu_124 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            n1_fu_124 <= select_ln372_fu_425_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln379_reg_710 <= add_ln379_fu_518_p2;
        add_reg_695 <= add_fu_449_p2;
        and_ln368_1_reg_679_pp0_iter2_reg <= and_ln368_1_reg_679;
        and_ln368_1_reg_679_pp0_iter3_reg <= and_ln368_1_reg_679_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
        ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
        ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
        ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
        ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
        ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
        ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
        ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
        ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
        ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
        ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
        ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
        ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
        ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
        ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
        ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
        ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
        ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
        ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
        ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
        ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
        ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
        ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
        ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
        ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
        ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
        ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
        ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
        ap_loop_exit_ready_pp0_iter71_reg <= ap_loop_exit_ready_pp0_iter70_reg;
        ap_loop_exit_ready_pp0_iter72_reg <= ap_loop_exit_ready_pp0_iter71_reg;
        ap_loop_exit_ready_pp0_iter73_reg <= ap_loop_exit_ready_pp0_iter72_reg;
        ap_loop_exit_ready_pp0_iter74_reg <= ap_loop_exit_ready_pp0_iter73_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        cmp18_reg_701 <= cmp18_fu_476_p2;
        cmp18_reg_701_pp0_iter10_reg <= cmp18_reg_701_pp0_iter9_reg;
        cmp18_reg_701_pp0_iter11_reg <= cmp18_reg_701_pp0_iter10_reg;
        cmp18_reg_701_pp0_iter12_reg <= cmp18_reg_701_pp0_iter11_reg;
        cmp18_reg_701_pp0_iter13_reg <= cmp18_reg_701_pp0_iter12_reg;
        cmp18_reg_701_pp0_iter14_reg <= cmp18_reg_701_pp0_iter13_reg;
        cmp18_reg_701_pp0_iter15_reg <= cmp18_reg_701_pp0_iter14_reg;
        cmp18_reg_701_pp0_iter16_reg <= cmp18_reg_701_pp0_iter15_reg;
        cmp18_reg_701_pp0_iter17_reg <= cmp18_reg_701_pp0_iter16_reg;
        cmp18_reg_701_pp0_iter18_reg <= cmp18_reg_701_pp0_iter17_reg;
        cmp18_reg_701_pp0_iter19_reg <= cmp18_reg_701_pp0_iter18_reg;
        cmp18_reg_701_pp0_iter20_reg <= cmp18_reg_701_pp0_iter19_reg;
        cmp18_reg_701_pp0_iter21_reg <= cmp18_reg_701_pp0_iter20_reg;
        cmp18_reg_701_pp0_iter22_reg <= cmp18_reg_701_pp0_iter21_reg;
        cmp18_reg_701_pp0_iter23_reg <= cmp18_reg_701_pp0_iter22_reg;
        cmp18_reg_701_pp0_iter24_reg <= cmp18_reg_701_pp0_iter23_reg;
        cmp18_reg_701_pp0_iter25_reg <= cmp18_reg_701_pp0_iter24_reg;
        cmp18_reg_701_pp0_iter26_reg <= cmp18_reg_701_pp0_iter25_reg;
        cmp18_reg_701_pp0_iter27_reg <= cmp18_reg_701_pp0_iter26_reg;
        cmp18_reg_701_pp0_iter28_reg <= cmp18_reg_701_pp0_iter27_reg;
        cmp18_reg_701_pp0_iter29_reg <= cmp18_reg_701_pp0_iter28_reg;
        cmp18_reg_701_pp0_iter30_reg <= cmp18_reg_701_pp0_iter29_reg;
        cmp18_reg_701_pp0_iter31_reg <= cmp18_reg_701_pp0_iter30_reg;
        cmp18_reg_701_pp0_iter32_reg <= cmp18_reg_701_pp0_iter31_reg;
        cmp18_reg_701_pp0_iter33_reg <= cmp18_reg_701_pp0_iter32_reg;
        cmp18_reg_701_pp0_iter34_reg <= cmp18_reg_701_pp0_iter33_reg;
        cmp18_reg_701_pp0_iter35_reg <= cmp18_reg_701_pp0_iter34_reg;
        cmp18_reg_701_pp0_iter36_reg <= cmp18_reg_701_pp0_iter35_reg;
        cmp18_reg_701_pp0_iter37_reg <= cmp18_reg_701_pp0_iter36_reg;
        cmp18_reg_701_pp0_iter38_reg <= cmp18_reg_701_pp0_iter37_reg;
        cmp18_reg_701_pp0_iter39_reg <= cmp18_reg_701_pp0_iter38_reg;
        cmp18_reg_701_pp0_iter40_reg <= cmp18_reg_701_pp0_iter39_reg;
        cmp18_reg_701_pp0_iter41_reg <= cmp18_reg_701_pp0_iter40_reg;
        cmp18_reg_701_pp0_iter42_reg <= cmp18_reg_701_pp0_iter41_reg;
        cmp18_reg_701_pp0_iter43_reg <= cmp18_reg_701_pp0_iter42_reg;
        cmp18_reg_701_pp0_iter44_reg <= cmp18_reg_701_pp0_iter43_reg;
        cmp18_reg_701_pp0_iter45_reg <= cmp18_reg_701_pp0_iter44_reg;
        cmp18_reg_701_pp0_iter46_reg <= cmp18_reg_701_pp0_iter45_reg;
        cmp18_reg_701_pp0_iter47_reg <= cmp18_reg_701_pp0_iter46_reg;
        cmp18_reg_701_pp0_iter48_reg <= cmp18_reg_701_pp0_iter47_reg;
        cmp18_reg_701_pp0_iter49_reg <= cmp18_reg_701_pp0_iter48_reg;
        cmp18_reg_701_pp0_iter4_reg <= cmp18_reg_701;
        cmp18_reg_701_pp0_iter50_reg <= cmp18_reg_701_pp0_iter49_reg;
        cmp18_reg_701_pp0_iter51_reg <= cmp18_reg_701_pp0_iter50_reg;
        cmp18_reg_701_pp0_iter52_reg <= cmp18_reg_701_pp0_iter51_reg;
        cmp18_reg_701_pp0_iter53_reg <= cmp18_reg_701_pp0_iter52_reg;
        cmp18_reg_701_pp0_iter54_reg <= cmp18_reg_701_pp0_iter53_reg;
        cmp18_reg_701_pp0_iter55_reg <= cmp18_reg_701_pp0_iter54_reg;
        cmp18_reg_701_pp0_iter56_reg <= cmp18_reg_701_pp0_iter55_reg;
        cmp18_reg_701_pp0_iter57_reg <= cmp18_reg_701_pp0_iter56_reg;
        cmp18_reg_701_pp0_iter58_reg <= cmp18_reg_701_pp0_iter57_reg;
        cmp18_reg_701_pp0_iter59_reg <= cmp18_reg_701_pp0_iter58_reg;
        cmp18_reg_701_pp0_iter5_reg <= cmp18_reg_701_pp0_iter4_reg;
        cmp18_reg_701_pp0_iter60_reg <= cmp18_reg_701_pp0_iter59_reg;
        cmp18_reg_701_pp0_iter61_reg <= cmp18_reg_701_pp0_iter60_reg;
        cmp18_reg_701_pp0_iter62_reg <= cmp18_reg_701_pp0_iter61_reg;
        cmp18_reg_701_pp0_iter63_reg <= cmp18_reg_701_pp0_iter62_reg;
        cmp18_reg_701_pp0_iter64_reg <= cmp18_reg_701_pp0_iter63_reg;
        cmp18_reg_701_pp0_iter65_reg <= cmp18_reg_701_pp0_iter64_reg;
        cmp18_reg_701_pp0_iter66_reg <= cmp18_reg_701_pp0_iter65_reg;
        cmp18_reg_701_pp0_iter67_reg <= cmp18_reg_701_pp0_iter66_reg;
        cmp18_reg_701_pp0_iter68_reg <= cmp18_reg_701_pp0_iter67_reg;
        cmp18_reg_701_pp0_iter69_reg <= cmp18_reg_701_pp0_iter68_reg;
        cmp18_reg_701_pp0_iter6_reg <= cmp18_reg_701_pp0_iter5_reg;
        cmp18_reg_701_pp0_iter70_reg <= cmp18_reg_701_pp0_iter69_reg;
        cmp18_reg_701_pp0_iter71_reg <= cmp18_reg_701_pp0_iter70_reg;
        cmp18_reg_701_pp0_iter72_reg <= cmp18_reg_701_pp0_iter71_reg;
        cmp18_reg_701_pp0_iter73_reg <= cmp18_reg_701_pp0_iter72_reg;
        cmp18_reg_701_pp0_iter74_reg <= cmp18_reg_701_pp0_iter73_reg;
        cmp18_reg_701_pp0_iter7_reg <= cmp18_reg_701_pp0_iter6_reg;
        cmp18_reg_701_pp0_iter8_reg <= cmp18_reg_701_pp0_iter7_reg;
        cmp18_reg_701_pp0_iter9_reg <= cmp18_reg_701_pp0_iter8_reg;
        icmp_ln370_reg_661_pp0_iter2_reg <= icmp_ln370_reg_661;
        icmp_ln370_reg_661_pp0_iter3_reg <= icmp_ln370_reg_661_pp0_iter2_reg;
        icmp_ln379_reg_716 <= icmp_ln379_fu_529_p2;
        icmp_ln379_reg_716_pp0_iter10_reg <= icmp_ln379_reg_716_pp0_iter9_reg;
        icmp_ln379_reg_716_pp0_iter11_reg <= icmp_ln379_reg_716_pp0_iter10_reg;
        icmp_ln379_reg_716_pp0_iter12_reg <= icmp_ln379_reg_716_pp0_iter11_reg;
        icmp_ln379_reg_716_pp0_iter13_reg <= icmp_ln379_reg_716_pp0_iter12_reg;
        icmp_ln379_reg_716_pp0_iter14_reg <= icmp_ln379_reg_716_pp0_iter13_reg;
        icmp_ln379_reg_716_pp0_iter15_reg <= icmp_ln379_reg_716_pp0_iter14_reg;
        icmp_ln379_reg_716_pp0_iter16_reg <= icmp_ln379_reg_716_pp0_iter15_reg;
        icmp_ln379_reg_716_pp0_iter17_reg <= icmp_ln379_reg_716_pp0_iter16_reg;
        icmp_ln379_reg_716_pp0_iter18_reg <= icmp_ln379_reg_716_pp0_iter17_reg;
        icmp_ln379_reg_716_pp0_iter19_reg <= icmp_ln379_reg_716_pp0_iter18_reg;
        icmp_ln379_reg_716_pp0_iter20_reg <= icmp_ln379_reg_716_pp0_iter19_reg;
        icmp_ln379_reg_716_pp0_iter21_reg <= icmp_ln379_reg_716_pp0_iter20_reg;
        icmp_ln379_reg_716_pp0_iter22_reg <= icmp_ln379_reg_716_pp0_iter21_reg;
        icmp_ln379_reg_716_pp0_iter23_reg <= icmp_ln379_reg_716_pp0_iter22_reg;
        icmp_ln379_reg_716_pp0_iter24_reg <= icmp_ln379_reg_716_pp0_iter23_reg;
        icmp_ln379_reg_716_pp0_iter25_reg <= icmp_ln379_reg_716_pp0_iter24_reg;
        icmp_ln379_reg_716_pp0_iter26_reg <= icmp_ln379_reg_716_pp0_iter25_reg;
        icmp_ln379_reg_716_pp0_iter27_reg <= icmp_ln379_reg_716_pp0_iter26_reg;
        icmp_ln379_reg_716_pp0_iter28_reg <= icmp_ln379_reg_716_pp0_iter27_reg;
        icmp_ln379_reg_716_pp0_iter29_reg <= icmp_ln379_reg_716_pp0_iter28_reg;
        icmp_ln379_reg_716_pp0_iter30_reg <= icmp_ln379_reg_716_pp0_iter29_reg;
        icmp_ln379_reg_716_pp0_iter31_reg <= icmp_ln379_reg_716_pp0_iter30_reg;
        icmp_ln379_reg_716_pp0_iter32_reg <= icmp_ln379_reg_716_pp0_iter31_reg;
        icmp_ln379_reg_716_pp0_iter33_reg <= icmp_ln379_reg_716_pp0_iter32_reg;
        icmp_ln379_reg_716_pp0_iter34_reg <= icmp_ln379_reg_716_pp0_iter33_reg;
        icmp_ln379_reg_716_pp0_iter35_reg <= icmp_ln379_reg_716_pp0_iter34_reg;
        icmp_ln379_reg_716_pp0_iter36_reg <= icmp_ln379_reg_716_pp0_iter35_reg;
        icmp_ln379_reg_716_pp0_iter37_reg <= icmp_ln379_reg_716_pp0_iter36_reg;
        icmp_ln379_reg_716_pp0_iter38_reg <= icmp_ln379_reg_716_pp0_iter37_reg;
        icmp_ln379_reg_716_pp0_iter39_reg <= icmp_ln379_reg_716_pp0_iter38_reg;
        icmp_ln379_reg_716_pp0_iter40_reg <= icmp_ln379_reg_716_pp0_iter39_reg;
        icmp_ln379_reg_716_pp0_iter41_reg <= icmp_ln379_reg_716_pp0_iter40_reg;
        icmp_ln379_reg_716_pp0_iter42_reg <= icmp_ln379_reg_716_pp0_iter41_reg;
        icmp_ln379_reg_716_pp0_iter43_reg <= icmp_ln379_reg_716_pp0_iter42_reg;
        icmp_ln379_reg_716_pp0_iter44_reg <= icmp_ln379_reg_716_pp0_iter43_reg;
        icmp_ln379_reg_716_pp0_iter45_reg <= icmp_ln379_reg_716_pp0_iter44_reg;
        icmp_ln379_reg_716_pp0_iter46_reg <= icmp_ln379_reg_716_pp0_iter45_reg;
        icmp_ln379_reg_716_pp0_iter47_reg <= icmp_ln379_reg_716_pp0_iter46_reg;
        icmp_ln379_reg_716_pp0_iter48_reg <= icmp_ln379_reg_716_pp0_iter47_reg;
        icmp_ln379_reg_716_pp0_iter49_reg <= icmp_ln379_reg_716_pp0_iter48_reg;
        icmp_ln379_reg_716_pp0_iter50_reg <= icmp_ln379_reg_716_pp0_iter49_reg;
        icmp_ln379_reg_716_pp0_iter51_reg <= icmp_ln379_reg_716_pp0_iter50_reg;
        icmp_ln379_reg_716_pp0_iter52_reg <= icmp_ln379_reg_716_pp0_iter51_reg;
        icmp_ln379_reg_716_pp0_iter53_reg <= icmp_ln379_reg_716_pp0_iter52_reg;
        icmp_ln379_reg_716_pp0_iter54_reg <= icmp_ln379_reg_716_pp0_iter53_reg;
        icmp_ln379_reg_716_pp0_iter55_reg <= icmp_ln379_reg_716_pp0_iter54_reg;
        icmp_ln379_reg_716_pp0_iter56_reg <= icmp_ln379_reg_716_pp0_iter55_reg;
        icmp_ln379_reg_716_pp0_iter57_reg <= icmp_ln379_reg_716_pp0_iter56_reg;
        icmp_ln379_reg_716_pp0_iter58_reg <= icmp_ln379_reg_716_pp0_iter57_reg;
        icmp_ln379_reg_716_pp0_iter59_reg <= icmp_ln379_reg_716_pp0_iter58_reg;
        icmp_ln379_reg_716_pp0_iter60_reg <= icmp_ln379_reg_716_pp0_iter59_reg;
        icmp_ln379_reg_716_pp0_iter61_reg <= icmp_ln379_reg_716_pp0_iter60_reg;
        icmp_ln379_reg_716_pp0_iter62_reg <= icmp_ln379_reg_716_pp0_iter61_reg;
        icmp_ln379_reg_716_pp0_iter63_reg <= icmp_ln379_reg_716_pp0_iter62_reg;
        icmp_ln379_reg_716_pp0_iter64_reg <= icmp_ln379_reg_716_pp0_iter63_reg;
        icmp_ln379_reg_716_pp0_iter65_reg <= icmp_ln379_reg_716_pp0_iter64_reg;
        icmp_ln379_reg_716_pp0_iter66_reg <= icmp_ln379_reg_716_pp0_iter65_reg;
        icmp_ln379_reg_716_pp0_iter67_reg <= icmp_ln379_reg_716_pp0_iter66_reg;
        icmp_ln379_reg_716_pp0_iter68_reg <= icmp_ln379_reg_716_pp0_iter67_reg;
        icmp_ln379_reg_716_pp0_iter69_reg <= icmp_ln379_reg_716_pp0_iter68_reg;
        icmp_ln379_reg_716_pp0_iter6_reg <= icmp_ln379_reg_716;
        icmp_ln379_reg_716_pp0_iter70_reg <= icmp_ln379_reg_716_pp0_iter69_reg;
        icmp_ln379_reg_716_pp0_iter71_reg <= icmp_ln379_reg_716_pp0_iter70_reg;
        icmp_ln379_reg_716_pp0_iter72_reg <= icmp_ln379_reg_716_pp0_iter71_reg;
        icmp_ln379_reg_716_pp0_iter73_reg <= icmp_ln379_reg_716_pp0_iter72_reg;
        icmp_ln379_reg_716_pp0_iter74_reg <= icmp_ln379_reg_716_pp0_iter73_reg;
        icmp_ln379_reg_716_pp0_iter7_reg <= icmp_ln379_reg_716_pp0_iter6_reg;
        icmp_ln379_reg_716_pp0_iter8_reg <= icmp_ln379_reg_716_pp0_iter7_reg;
        icmp_ln379_reg_716_pp0_iter9_reg <= icmp_ln379_reg_716_pp0_iter8_reg;
        m1m_mid2_reg_690 <= m1m_mid2_fu_417_p3;
        m1m_mid2_reg_690_pp0_iter3_reg <= m1m_mid2_reg_690;
        mul3_i_reg_705 <= grp_fu_206_p2;
        trunc_ln1_reg_720 <= {{add_ln150_fu_553_p2[63:6]}};
        val_reg_725 <= cMemory_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln368_1_reg_679 <= and_ln368_1_fu_290_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bound4_cast_reg_652[37 : 0] <= bound4_cast_fu_214_p1[37 : 0];
        empty_143_reg_685 <= empty_143_fu_296_p2;
        icmp_ln370_reg_661 <= icmp_ln370_fu_273_p2;
        icmp_ln372_reg_674 <= icmp_ln372_fu_284_p2;
        p_cast_reg_647[27 : 0] <= p_cast_fu_210_p1[27 : 0];
        xor_ln368_reg_669 <= xor_ln368_fu_278_p2;
    end
end

always @ (*) begin
    if (((icmp_ln368_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter74_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) 
    & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 
    == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cMemory_blk_n = cMemory_empty_n;
    end else begin
        cMemory_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMemory_read_local = 1'b1;
    end else begin
        cMemory_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op173_writereq_state7 == 1'b1))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op242_writeresp_state76 == 1'b1) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op174_write_state8 == 1'b1))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_206_ce = 1'b1;
    end else begin
        grp_fu_206_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op173_writereq_state7 == 1'b1))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op242_writeresp_state76 == 1'b1) & (ap_enable_reg_pp0_iter75 == 1'b1))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op174_write_state8 == 1'b1))) begin
        m_axi_gmem2_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_449_p2 = (mul_fu_437_p3 + zext_ln372_fu_445_p1);

assign add_ln150_fu_553_p2 = (memory_load + zext_ln150_fu_549_p1);

assign add_ln368_1_fu_365_p2 = (n0_fu_140 + 24'd1);

assign add_ln368_fu_267_p2 = (indvar_flatten35_fu_144 + 61'd1);

assign add_ln370_1_fu_316_p2 = (indvar_flatten12_fu_136 + 39'd1);

assign add_ln370_fu_490_p2 = (select_ln368_fu_483_p3 + 24'd1);

assign add_ln372_1_fu_302_p2 = (indvar_flatten_fu_128 + 16'd1);

assign add_ln372_fu_401_p2 = (n1_mid26_fu_378_p3 + 10'd1);

assign add_ln374_fu_455_p2 = (m1m_mid2_fu_417_p3 + 6'd1);

assign add_ln379_fu_518_p2 = (mul1_fu_507_p3 + zext_ln374_fu_515_p1);

assign add_ln50_fu_536_p2 = (mul3_i_reg_705 + zext_ln50_fu_533_p1);

assign and_ln368_1_fu_290_p2 = (xor_ln368_fu_278_p2 & icmp_ln372_fu_284_p2);

assign and_ln368_fu_360_p2 = (xor_ln368_reg_669 & icmp_ln374_fu_354_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter75 == 1'b1) & (1'b1 == ap_block_state76_pp0_stage0_iter75)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state7_pp0_stage0_iter6)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter75 == 1'b1) & (1'b1 == ap_block_state76_pp0_stage0_iter75)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state7_io) | (1'b1 == ap_block_state7_pp0_stage0_iter6))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter75 == 1'b1) & (1'b1 == ap_block_state76_pp0_stage0_iter75)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state7_io) | (1'b1 == ap_block_state7_pp0_stage0_iter6))));
end

always @ (*) begin
    ap_block_state76_pp0_stage0_iter75 = ((ap_predicate_op242_writeresp_state76 == 1'b1) & (m_axi_gmem2_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((ap_predicate_op173_writereq_state7 == 1'b1) & (m_axi_gmem2_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (cMemory_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state8_io = ((ap_predicate_op174_write_state8 == 1'b1) & (m_axi_gmem2_WREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op173_writereq_state7 = ((icmp_ln379_reg_716 == 1'd1) & (cmp18_reg_701_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op174_write_state8 = ((icmp_ln379_reg_716_pp0_iter6_reg == 1'd1) & (cmp18_reg_701_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op242_writeresp_state76 = ((icmp_ln379_reg_716_pp0_iter74_reg == 1'd1) & (cmp18_reg_701_pp0_iter74_reg == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign bound4_cast_fu_214_p1 = bound4;

assign cMemory_read = cMemory_read_local;

assign cmp18_fu_476_p2 = ((add_reg_695 < size_n_load) ? 1'b1 : 1'b0);

assign empty_143_fu_296_p2 = (icmp_ln370_fu_273_p2 | and_ln368_1_fu_290_p2);

assign empty_144_fu_407_p2 = (icmp_ln374_mid211_fu_395_p2 | and_ln368_1_reg_679);

assign empty_145_fu_412_p2 = (icmp_ln370_reg_661 | empty_144_fu_407_p2);

assign empty_146_fu_433_p1 = select_ln368_1_fu_371_p3[22:0];

assign empty_147_fu_503_p1 = select_ln370_fu_496_p3[22:0];

assign exitcond_flatten_not_fu_385_p2 = (icmp_ln372_reg_674 ^ 1'd1);

assign grp_fu_206_p1 = p_cast_reg_647;

assign icmp_ln368_fu_262_p2 = ((indvar_flatten35_fu_144 == bound17) ? 1'b1 : 1'b0);

assign icmp_ln370_fu_273_p2 = ((indvar_flatten12_fu_136 == bound4_cast_reg_652) ? 1'b1 : 1'b0);

assign icmp_ln372_fu_284_p2 = ((indvar_flatten_fu_128 == 16'd16384) ? 1'b1 : 1'b0);

assign icmp_ln374_fu_354_p2 = ((m1m_fu_120 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln374_mid211_fu_395_p2 = (not_exitcond_flatten_mid234_fu_390_p2 & and_ln368_fu_360_p2);

assign icmp_ln379_fu_529_p2 = ((add_ln379_reg_710 < div_i1) ? 1'b1 : 1'b0);

assign m1m_mid2_fu_417_p3 = ((empty_145_fu_412_p2[0:0] == 1'b1) ? 6'd0 : m1m_fu_120);

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_AWADDR = sext_ln150_fu_568_p1;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 64'd1;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WDATA = val_reg_725;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem2_WUSER = 1'd0;

assign mul1_fu_507_p3 = {{empty_147_fu_503_p1}, {5'd0}};

assign mul_fu_437_p3 = {{empty_146_fu_433_p1}, {9'd0}};

assign n1_mid26_fu_378_p3 = ((empty_143_reg_685[0:0] == 1'b1) ? 10'd0 : n1_fu_124);

assign not_exitcond_flatten_mid234_fu_390_p2 = (icmp_ln370_reg_661 | exitcond_flatten_not_fu_385_p2);

assign p_cast_fu_210_p1 = empty;

assign select_ln368_1_fu_371_p3 = ((icmp_ln370_reg_661[0:0] == 1'b1) ? add_ln368_1_fu_365_p2 : n0_fu_140);

assign select_ln368_fu_483_p3 = ((icmp_ln370_reg_661_pp0_iter3_reg[0:0] == 1'b1) ? 24'd0 : m0_fu_132);

assign select_ln370_1_fu_322_p3 = ((icmp_ln370_fu_273_p2[0:0] == 1'b1) ? 39'd1 : add_ln370_1_fu_316_p2);

assign select_ln370_fu_496_p3 = ((and_ln368_1_reg_679_pp0_iter3_reg[0:0] == 1'b1) ? add_ln370_fu_490_p2 : select_ln368_fu_483_p3);

assign select_ln372_1_fu_308_p3 = ((empty_143_fu_296_p2[0:0] == 1'b1) ? 16'd1 : add_ln372_1_fu_302_p2);

assign select_ln372_fu_425_p3 = ((icmp_ln374_mid211_fu_395_p2[0:0] == 1'b1) ? add_ln372_fu_401_p2 : n1_mid26_fu_378_p3);

assign sext_ln150_fu_568_p1 = $signed(trunc_ln1_reg_720);

assign shl_ln_fu_541_p3 = {{add_ln50_fu_536_p2}, {6'd0}};

assign xor_ln368_fu_278_p2 = (icmp_ln370_fu_273_p2 ^ 1'd1);

assign zext_ln150_fu_549_p1 = shl_ln_fu_541_p3;

assign zext_ln372_fu_445_p1 = select_ln372_fu_425_p3;

assign zext_ln374_fu_515_p1 = m1m_mid2_reg_690_pp0_iter3_reg;

assign zext_ln50_fu_533_p1 = add_ln379_reg_710;

always @ (posedge ap_clk) begin
    p_cast_reg_647[31:28] <= 4'b0000;
    bound4_cast_reg_652[38] <= 1'b0;
end

endmodule //MatrixMultiplicationKernel_WriteC_Pipeline_WriteC_OuterTile_N_WriteC_OuterTile_M_WriteC_N1_WriteC_M1
