// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        aSplit_14_dout,
        aSplit_14_num_data_valid,
        aSplit_14_fifo_cap,
        aSplit_14_empty_n,
        aSplit_14_read,
        aSplit_13_dout,
        aSplit_13_num_data_valid,
        aSplit_13_fifo_cap,
        aSplit_13_empty_n,
        aSplit_13_read,
        aSplit_12_dout,
        aSplit_12_num_data_valid,
        aSplit_12_fifo_cap,
        aSplit_12_empty_n,
        aSplit_12_read,
        aSplit_11_dout,
        aSplit_11_num_data_valid,
        aSplit_11_fifo_cap,
        aSplit_11_empty_n,
        aSplit_11_read,
        aSplit_10_dout,
        aSplit_10_num_data_valid,
        aSplit_10_fifo_cap,
        aSplit_10_empty_n,
        aSplit_10_read,
        aSplit_9_dout,
        aSplit_9_num_data_valid,
        aSplit_9_fifo_cap,
        aSplit_9_empty_n,
        aSplit_9_read,
        aSplit_8_dout,
        aSplit_8_num_data_valid,
        aSplit_8_fifo_cap,
        aSplit_8_empty_n,
        aSplit_8_read,
        aSplit_7_dout,
        aSplit_7_num_data_valid,
        aSplit_7_fifo_cap,
        aSplit_7_empty_n,
        aSplit_7_read,
        aSplit_6_dout,
        aSplit_6_num_data_valid,
        aSplit_6_fifo_cap,
        aSplit_6_empty_n,
        aSplit_6_read,
        aSplit_5_dout,
        aSplit_5_num_data_valid,
        aSplit_5_fifo_cap,
        aSplit_5_empty_n,
        aSplit_5_read,
        aSplit_4_dout,
        aSplit_4_num_data_valid,
        aSplit_4_fifo_cap,
        aSplit_4_empty_n,
        aSplit_4_read,
        aSplit_3_dout,
        aSplit_3_num_data_valid,
        aSplit_3_fifo_cap,
        aSplit_3_empty_n,
        aSplit_3_read,
        aSplit_2_dout,
        aSplit_2_num_data_valid,
        aSplit_2_fifo_cap,
        aSplit_2_empty_n,
        aSplit_2_read,
        aSplit_1_dout,
        aSplit_1_num_data_valid,
        aSplit_1_fifo_cap,
        aSplit_1_empty_n,
        aSplit_1_read,
        aSplit_0_dout,
        aSplit_0_num_data_valid,
        aSplit_0_fifo_cap,
        aSplit_0_empty_n,
        aSplit_0_read,
        aSplit_15_dout,
        aSplit_15_num_data_valid,
        aSplit_15_fifo_cap,
        aSplit_15_empty_n,
        aSplit_15_read,
        aPipes_0_din,
        aPipes_0_num_data_valid,
        aPipes_0_fifo_cap,
        aPipes_0_full_n,
        aPipes_0_write,
        bound16,
        bound4,
        size_k_1,
        bound
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] aSplit_14_dout;
input  [10:0] aSplit_14_num_data_valid;
input  [10:0] aSplit_14_fifo_cap;
input   aSplit_14_empty_n;
output   aSplit_14_read;
input  [31:0] aSplit_13_dout;
input  [10:0] aSplit_13_num_data_valid;
input  [10:0] aSplit_13_fifo_cap;
input   aSplit_13_empty_n;
output   aSplit_13_read;
input  [31:0] aSplit_12_dout;
input  [10:0] aSplit_12_num_data_valid;
input  [10:0] aSplit_12_fifo_cap;
input   aSplit_12_empty_n;
output   aSplit_12_read;
input  [31:0] aSplit_11_dout;
input  [10:0] aSplit_11_num_data_valid;
input  [10:0] aSplit_11_fifo_cap;
input   aSplit_11_empty_n;
output   aSplit_11_read;
input  [31:0] aSplit_10_dout;
input  [10:0] aSplit_10_num_data_valid;
input  [10:0] aSplit_10_fifo_cap;
input   aSplit_10_empty_n;
output   aSplit_10_read;
input  [31:0] aSplit_9_dout;
input  [10:0] aSplit_9_num_data_valid;
input  [10:0] aSplit_9_fifo_cap;
input   aSplit_9_empty_n;
output   aSplit_9_read;
input  [31:0] aSplit_8_dout;
input  [10:0] aSplit_8_num_data_valid;
input  [10:0] aSplit_8_fifo_cap;
input   aSplit_8_empty_n;
output   aSplit_8_read;
input  [31:0] aSplit_7_dout;
input  [10:0] aSplit_7_num_data_valid;
input  [10:0] aSplit_7_fifo_cap;
input   aSplit_7_empty_n;
output   aSplit_7_read;
input  [31:0] aSplit_6_dout;
input  [10:0] aSplit_6_num_data_valid;
input  [10:0] aSplit_6_fifo_cap;
input   aSplit_6_empty_n;
output   aSplit_6_read;
input  [31:0] aSplit_5_dout;
input  [10:0] aSplit_5_num_data_valid;
input  [10:0] aSplit_5_fifo_cap;
input   aSplit_5_empty_n;
output   aSplit_5_read;
input  [31:0] aSplit_4_dout;
input  [10:0] aSplit_4_num_data_valid;
input  [10:0] aSplit_4_fifo_cap;
input   aSplit_4_empty_n;
output   aSplit_4_read;
input  [31:0] aSplit_3_dout;
input  [10:0] aSplit_3_num_data_valid;
input  [10:0] aSplit_3_fifo_cap;
input   aSplit_3_empty_n;
output   aSplit_3_read;
input  [31:0] aSplit_2_dout;
input  [10:0] aSplit_2_num_data_valid;
input  [10:0] aSplit_2_fifo_cap;
input   aSplit_2_empty_n;
output   aSplit_2_read;
input  [31:0] aSplit_1_dout;
input  [10:0] aSplit_1_num_data_valid;
input  [10:0] aSplit_1_fifo_cap;
input   aSplit_1_empty_n;
output   aSplit_1_read;
input  [31:0] aSplit_0_dout;
input  [10:0] aSplit_0_num_data_valid;
input  [10:0] aSplit_0_fifo_cap;
input   aSplit_0_empty_n;
output   aSplit_0_read;
input  [31:0] aSplit_15_dout;
input  [10:0] aSplit_15_num_data_valid;
input  [10:0] aSplit_15_fifo_cap;
input   aSplit_15_empty_n;
output   aSplit_15_read;
output  [31:0] aPipes_0_din;
input  [2:0] aPipes_0_num_data_valid;
input  [2:0] aPipes_0_fifo_cap;
input   aPipes_0_full_n;
output   aPipes_0_write;
input  [86:0] bound16;
input  [63:0] bound4;
input  [31:0] size_k_1;
input  [40:0] bound;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln172_reg_578;
reg   [0:0] icmp_ln172_reg_578_pp0_iter3_reg;
reg   [3:0] trunc_ln176_reg_605;
reg    ap_predicate_op80_read_state5;
reg    ap_predicate_op82_read_state5;
reg    ap_predicate_op84_read_state5;
reg    ap_predicate_op86_read_state5;
reg    ap_predicate_op88_read_state5;
reg    ap_predicate_op90_read_state5;
reg    ap_predicate_op92_read_state5;
reg    ap_predicate_op94_read_state5;
reg    ap_predicate_op96_read_state5;
reg    ap_predicate_op98_read_state5;
reg    ap_predicate_op100_read_state5;
reg    ap_predicate_op102_read_state5;
reg    ap_predicate_op104_read_state5;
reg    ap_predicate_op106_read_state5;
reg    ap_predicate_op108_read_state5;
reg    ap_predicate_op110_read_state5;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln172_fu_346_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    aPipes_0_blk_n;
wire    ap_block_pp0_stage0;
reg    aSplit_0_blk_n;
reg    aSplit_1_blk_n;
reg    aSplit_2_blk_n;
reg    aSplit_3_blk_n;
reg    aSplit_4_blk_n;
reg    aSplit_5_blk_n;
reg    aSplit_6_blk_n;
reg    aSplit_7_blk_n;
reg    aSplit_8_blk_n;
reg    aSplit_9_blk_n;
reg    aSplit_10_blk_n;
reg    aSplit_11_blk_n;
reg    aSplit_12_blk_n;
reg    aSplit_13_blk_n;
reg    aSplit_14_blk_n;
reg    aSplit_15_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [41:0] bound_cast_fu_307_p1;
reg   [41:0] bound_cast_reg_568;
wire   [65:0] bound4_cast_fu_311_p1;
reg   [65:0] bound4_cast_reg_573;
reg   [0:0] icmp_ln172_reg_578_pp0_iter2_reg;
wire   [0:0] icmp_ln174_fu_357_p2;
reg   [0:0] icmp_ln174_reg_582;
wire   [0:0] icmp_ln176_fu_362_p2;
reg   [0:0] icmp_ln176_reg_590;
wire   [0:0] or_ln174_fu_419_p2;
reg   [0:0] or_ln174_reg_595;
wire   [0:0] and_ln174_fu_436_p2;
reg   [0:0] and_ln174_reg_600;
wire   [3:0] trunc_ln176_fu_514_p1;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_269;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_reg_269;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_reg_269;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_reg_269;
reg   [31:0] ap_phi_reg_pp0_iter4_empty_reg_269;
reg   [31:0] ap_phi_reg_pp0_iter5_empty_reg_269;
reg   [9:0] n1_fu_122;
wire   [9:0] n1_3_fu_459_p3;
wire    ap_loop_init;
reg   [31:0] k_1_fu_126;
wire   [31:0] select_ln176_fu_507_p3;
reg   [41:0] indvar_flatten_fu_130;
wire   [41:0] select_ln176_1_fu_473_p3;
reg   [65:0] indvar_flatten11_fu_134;
wire   [65:0] select_ln174_1_fu_373_p3;
reg   [86:0] indvar_flatten31_fu_138;
wire   [86:0] add_ln172_fu_351_p2;
reg    aSplit_14_read_local;
reg    aSplit_13_read_local;
reg    aSplit_12_read_local;
reg    aSplit_11_read_local;
reg    aSplit_10_read_local;
reg    aSplit_9_read_local;
reg    aSplit_8_read_local;
reg    aSplit_7_read_local;
reg    aSplit_6_read_local;
reg    aSplit_5_read_local;
reg    aSplit_4_read_local;
reg    aSplit_3_read_local;
reg    aSplit_2_read_local;
reg    aSplit_1_read_local;
reg    aSplit_0_read_local;
reg    aSplit_15_read_local;
reg    ap_block_pp0_stage0_01001;
reg    aPipes_0_write_local;
wire   [65:0] add_ln174_fu_367_p2;
wire   [0:0] icmp_ln176_1_fu_408_p2;
wire   [0:0] select_ln172_fu_413_p3;
wire   [0:0] xor_ln174_fu_424_p2;
wire   [0:0] xor_ln172_fu_397_p2;
wire   [0:0] and_ln172_fu_430_p2;
wire   [0:0] icmp_ln153_fu_402_p2;
wire   [0:0] or_ln153_fu_448_p2;
wire   [0:0] or_ln153_1_fu_453_p2;
wire   [9:0] add_ln153_fu_442_p2;
wire   [41:0] add_ln176_1_fu_467_p2;
wire   [31:0] select_ln174_fu_494_p3;
wire   [31:0] k_fu_501_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 n1_fu_122 = 10'd0;
#0 k_1_fu_126 = 32'd0;
#0 indvar_flatten_fu_130 = 42'd0;
#0 indvar_flatten11_fu_134 = 66'd0;
#0 indvar_flatten31_fu_138 = 87'd0;
#0 ap_done_reg = 1'b0;
end

MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((trunc_ln176_reg_605 == 4'd15) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_15_dout;
        end else if (((trunc_ln176_reg_605 == 4'd14) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_14_dout;
        end else if (((trunc_ln176_reg_605 == 4'd13) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_13_dout;
        end else if (((trunc_ln176_reg_605 == 4'd12) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_12_dout;
        end else if (((trunc_ln176_reg_605 == 4'd11) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_11_dout;
        end else if (((trunc_ln176_reg_605 == 4'd10) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_10_dout;
        end else if (((trunc_ln176_reg_605 == 4'd9) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_9_dout;
        end else if (((trunc_ln176_reg_605 == 4'd8) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_8_dout;
        end else if (((trunc_ln176_reg_605 == 4'd7) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_7_dout;
        end else if (((trunc_ln176_reg_605 == 4'd6) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_6_dout;
        end else if (((trunc_ln176_reg_605 == 4'd5) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_5_dout;
        end else if (((trunc_ln176_reg_605 == 4'd4) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_4_dout;
        end else if (((trunc_ln176_reg_605 == 4'd3) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_3_dout;
        end else if (((trunc_ln176_reg_605 == 4'd2) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_2_dout;
        end else if (((trunc_ln176_reg_605 == 4'd1) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_1_dout;
        end else if (((trunc_ln176_reg_605 == 4'd0) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= aSplit_0_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_empty_reg_269 <= ap_phi_reg_pp0_iter4_empty_reg_269;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_134 <= 66'd0;
        end else if (((icmp_ln172_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten11_fu_134 <= select_ln174_1_fu_373_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten31_fu_138 <= 87'd0;
        end else if (((icmp_ln172_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten31_fu_138 <= add_ln172_fu_351_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten_fu_130 <= 42'd0;
        end else if (((icmp_ln172_reg_578 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            indvar_flatten_fu_130 <= select_ln176_1_fu_473_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_1_fu_126 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            k_1_fu_126 <= select_ln176_fu_507_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n1_fu_122 <= 10'd0;
        end else if (((icmp_ln172_reg_578 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            n1_fu_122 <= n1_3_fu_459_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln174_reg_600 <= and_ln174_fu_436_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln172_reg_578_pp0_iter2_reg <= icmp_ln172_reg_578;
        icmp_ln172_reg_578_pp0_iter3_reg <= icmp_ln172_reg_578_pp0_iter2_reg;
        or_ln174_reg_595 <= or_ln174_fu_419_p2;
        trunc_ln176_reg_605 <= trunc_ln176_fu_514_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bound4_cast_reg_573[63 : 0] <= bound4_cast_fu_311_p1[63 : 0];
        bound_cast_reg_568[40 : 0] <= bound_cast_fu_307_p1[40 : 0];
        icmp_ln172_reg_578 <= icmp_ln172_fu_346_p2;
        icmp_ln174_reg_582 <= icmp_ln174_fu_357_p2;
        icmp_ln176_reg_590 <= icmp_ln176_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_269 <= ap_phi_reg_pp0_iter0_empty_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_empty_reg_269 <= ap_phi_reg_pp0_iter1_empty_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_empty_reg_269 <= ap_phi_reg_pp0_iter2_empty_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_empty_reg_269 <= ap_phi_reg_pp0_iter3_empty_reg_269;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aPipes_0_blk_n = aPipes_0_full_n;
    end else begin
        aPipes_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aPipes_0_write_local = 1'b1;
    end else begin
        aPipes_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op108_read_state5 == 1'b1))) begin
        aSplit_0_blk_n = aSplit_0_empty_n;
    end else begin
        aSplit_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op108_read_state5 == 1'b1))) begin
        aSplit_0_read_local = 1'b1;
    end else begin
        aSplit_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op88_read_state5 == 1'b1))) begin
        aSplit_10_blk_n = aSplit_10_empty_n;
    end else begin
        aSplit_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op88_read_state5 == 1'b1))) begin
        aSplit_10_read_local = 1'b1;
    end else begin
        aSplit_10_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op86_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aSplit_11_blk_n = aSplit_11_empty_n;
    end else begin
        aSplit_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op86_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aSplit_11_read_local = 1'b1;
    end else begin
        aSplit_11_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op84_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aSplit_12_blk_n = aSplit_12_empty_n;
    end else begin
        aSplit_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op84_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aSplit_12_read_local = 1'b1;
    end else begin
        aSplit_12_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op82_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aSplit_13_blk_n = aSplit_13_empty_n;
    end else begin
        aSplit_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op82_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aSplit_13_read_local = 1'b1;
    end else begin
        aSplit_13_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op80_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aSplit_14_blk_n = aSplit_14_empty_n;
    end else begin
        aSplit_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op80_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aSplit_14_read_local = 1'b1;
    end else begin
        aSplit_14_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op110_read_state5 == 1'b1))) begin
        aSplit_15_blk_n = aSplit_15_empty_n;
    end else begin
        aSplit_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op110_read_state5 == 1'b1))) begin
        aSplit_15_read_local = 1'b1;
    end else begin
        aSplit_15_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op106_read_state5 == 1'b1))) begin
        aSplit_1_blk_n = aSplit_1_empty_n;
    end else begin
        aSplit_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op106_read_state5 == 1'b1))) begin
        aSplit_1_read_local = 1'b1;
    end else begin
        aSplit_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op104_read_state5 == 1'b1))) begin
        aSplit_2_blk_n = aSplit_2_empty_n;
    end else begin
        aSplit_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op104_read_state5 == 1'b1))) begin
        aSplit_2_read_local = 1'b1;
    end else begin
        aSplit_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op102_read_state5 == 1'b1))) begin
        aSplit_3_blk_n = aSplit_3_empty_n;
    end else begin
        aSplit_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op102_read_state5 == 1'b1))) begin
        aSplit_3_read_local = 1'b1;
    end else begin
        aSplit_3_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op100_read_state5 == 1'b1))) begin
        aSplit_4_blk_n = aSplit_4_empty_n;
    end else begin
        aSplit_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op100_read_state5 == 1'b1))) begin
        aSplit_4_read_local = 1'b1;
    end else begin
        aSplit_4_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op98_read_state5 == 1'b1))) begin
        aSplit_5_blk_n = aSplit_5_empty_n;
    end else begin
        aSplit_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op98_read_state5 == 1'b1))) begin
        aSplit_5_read_local = 1'b1;
    end else begin
        aSplit_5_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op96_read_state5 == 1'b1))) begin
        aSplit_6_blk_n = aSplit_6_empty_n;
    end else begin
        aSplit_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op96_read_state5 == 1'b1))) begin
        aSplit_6_read_local = 1'b1;
    end else begin
        aSplit_6_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op94_read_state5 == 1'b1))) begin
        aSplit_7_blk_n = aSplit_7_empty_n;
    end else begin
        aSplit_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op94_read_state5 == 1'b1))) begin
        aSplit_7_read_local = 1'b1;
    end else begin
        aSplit_7_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op92_read_state5 == 1'b1))) begin
        aSplit_8_blk_n = aSplit_8_empty_n;
    end else begin
        aSplit_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op92_read_state5 == 1'b1))) begin
        aSplit_8_read_local = 1'b1;
    end else begin
        aSplit_8_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op90_read_state5 == 1'b1))) begin
        aSplit_9_blk_n = aSplit_9_empty_n;
    end else begin
        aSplit_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op90_read_state5 == 1'b1))) begin
        aSplit_9_read_local = 1'b1;
    end else begin
        aSplit_9_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_fu_346_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln172_reg_578 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign aPipes_0_din = ap_phi_reg_pp0_iter5_empty_reg_269;

assign aPipes_0_write = aPipes_0_write_local;

assign aSplit_0_read = aSplit_0_read_local;

assign aSplit_10_read = aSplit_10_read_local;

assign aSplit_11_read = aSplit_11_read_local;

assign aSplit_12_read = aSplit_12_read_local;

assign aSplit_13_read = aSplit_13_read_local;

assign aSplit_14_read = aSplit_14_read_local;

assign aSplit_15_read = aSplit_15_read_local;

assign aSplit_1_read = aSplit_1_read_local;

assign aSplit_2_read = aSplit_2_read_local;

assign aSplit_3_read = aSplit_3_read_local;

assign aSplit_4_read = aSplit_4_read_local;

assign aSplit_5_read = aSplit_5_read_local;

assign aSplit_6_read = aSplit_6_read_local;

assign aSplit_7_read = aSplit_7_read_local;

assign aSplit_8_read = aSplit_8_read_local;

assign aSplit_9_read = aSplit_9_read_local;

assign add_ln153_fu_442_p2 = (n1_fu_122 + 10'd1);

assign add_ln172_fu_351_p2 = (indvar_flatten31_fu_138 + 87'd1);

assign add_ln174_fu_367_p2 = (indvar_flatten11_fu_134 + 66'd1);

assign add_ln176_1_fu_467_p2 = (indvar_flatten_fu_130 + 42'd1);

assign and_ln172_fu_430_p2 = (xor_ln174_fu_424_p2 & xor_ln172_fu_397_p2);

assign and_ln174_fu_436_p2 = (icmp_ln153_fu_402_p2 & and_ln172_fu_430_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (((ap_predicate_op86_read_state5 == 1'b1) & (1'b0 == aSplit_11_empty_n)) | ((ap_predicate_op84_read_state5 == 1'b1) & (1'b0 == aSplit_12_empty_n)) | ((ap_predicate_op82_read_state5 == 1'b1) & (1'b0 == aSplit_13_empty_n)) | ((ap_predicate_op80_read_state5 == 1'b1) & (1'b0 == aSplit_14_empty_n)) | ((1'b0 == aSplit_15_empty_n) & (ap_predicate_op110_read_state5 == 1'b1)) | ((1'b0 == aSplit_0_empty_n) & (ap_predicate_op108_read_state5 == 1'b1)) | ((1'b0 == aSplit_1_empty_n) & (ap_predicate_op106_read_state5 == 1'b1)) | ((1'b0 == aSplit_2_empty_n) & (ap_predicate_op104_read_state5 == 1'b1)) | ((1'b0 == aSplit_3_empty_n) & (ap_predicate_op102_read_state5 == 1'b1)) | ((1'b0 == aSplit_4_empty_n) & (ap_predicate_op100_read_state5 == 1'b1)) | ((1'b0 == aSplit_5_empty_n) & (ap_predicate_op98_read_state5 == 1'b1)) | ((1'b0 == aSplit_6_empty_n) & (ap_predicate_op96_read_state5 == 1'b1)) | ((1'b0 == aSplit_7_empty_n) & (ap_predicate_op94_read_state5 == 1'b1)) | ((1'b0 == aSplit_8_empty_n) & (ap_predicate_op92_read_state5 == 
    1'b1)) | ((1'b0 == aSplit_9_empty_n) & (ap_predicate_op90_read_state5 == 1'b1)) | ((1'b0 == aSplit_10_empty_n) & (ap_predicate_op88_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = (1'b0 == aPipes_0_full_n);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_empty_reg_269 = 'bx;

always @ (*) begin
    ap_predicate_op100_read_state5 = ((trunc_ln176_reg_605 == 4'd4) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op102_read_state5 = ((trunc_ln176_reg_605 == 4'd3) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op104_read_state5 = ((trunc_ln176_reg_605 == 4'd2) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op106_read_state5 = ((trunc_ln176_reg_605 == 4'd1) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op108_read_state5 = ((trunc_ln176_reg_605 == 4'd0) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op110_read_state5 = ((trunc_ln176_reg_605 == 4'd15) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op80_read_state5 = ((trunc_ln176_reg_605 == 4'd14) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op82_read_state5 = ((trunc_ln176_reg_605 == 4'd13) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op84_read_state5 = ((trunc_ln176_reg_605 == 4'd12) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op86_read_state5 = ((trunc_ln176_reg_605 == 4'd11) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op88_read_state5 = ((trunc_ln176_reg_605 == 4'd10) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op90_read_state5 = ((trunc_ln176_reg_605 == 4'd9) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op92_read_state5 = ((trunc_ln176_reg_605 == 4'd8) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op94_read_state5 = ((trunc_ln176_reg_605 == 4'd7) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op96_read_state5 = ((trunc_ln176_reg_605 == 4'd6) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op98_read_state5 = ((trunc_ln176_reg_605 == 4'd5) & (icmp_ln172_reg_578_pp0_iter3_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bound4_cast_fu_311_p1 = bound4;

assign bound_cast_fu_307_p1 = bound;

assign icmp_ln153_fu_402_p2 = ((n1_fu_122 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_346_p2 = ((indvar_flatten31_fu_138 == bound16) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_357_p2 = ((indvar_flatten11_fu_134 == bound4_cast_reg_573) ? 1'b1 : 1'b0);

assign icmp_ln176_1_fu_408_p2 = ((indvar_flatten_fu_130 == bound_cast_reg_568) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_362_p2 = ((size_k_1 == 32'd0) ? 1'b1 : 1'b0);

assign k_fu_501_p2 = (select_ln174_fu_494_p3 + 32'd1);

assign n1_3_fu_459_p3 = ((or_ln153_1_fu_453_p2[0:0] == 1'b1) ? 10'd1 : add_ln153_fu_442_p2);

assign or_ln153_1_fu_453_p2 = (or_ln153_fu_448_p2 | and_ln174_fu_436_p2);

assign or_ln153_fu_448_p2 = (select_ln172_fu_413_p3 | icmp_ln174_reg_582);

assign or_ln174_fu_419_p2 = (select_ln172_fu_413_p3 | icmp_ln174_reg_582);

assign select_ln172_fu_413_p3 = ((icmp_ln174_reg_582[0:0] == 1'b1) ? icmp_ln176_reg_590 : icmp_ln176_1_fu_408_p2);

assign select_ln174_1_fu_373_p3 = ((icmp_ln174_fu_357_p2[0:0] == 1'b1) ? 66'd1 : add_ln174_fu_367_p2);

assign select_ln174_fu_494_p3 = ((or_ln174_reg_595[0:0] == 1'b1) ? 32'd0 : k_1_fu_126);

assign select_ln176_1_fu_473_p3 = ((or_ln174_fu_419_p2[0:0] == 1'b1) ? 42'd1 : add_ln176_1_fu_467_p2);

assign select_ln176_fu_507_p3 = ((and_ln174_reg_600[0:0] == 1'b1) ? k_fu_501_p2 : select_ln174_fu_494_p3);

assign trunc_ln176_fu_514_p1 = select_ln176_fu_507_p3[3:0];

assign xor_ln172_fu_397_p2 = (icmp_ln174_reg_582 ^ 1'd1);

assign xor_ln174_fu_424_p2 = (select_ln172_fu_413_p3 ^ 1'd1);

always @ (posedge ap_clk) begin
    bound_cast_reg_568[41] <= 1'b0;
    bound4_cast_reg_573[65:64] <= 2'b00;
end

endmodule //MatrixMultiplicationKernel_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1
