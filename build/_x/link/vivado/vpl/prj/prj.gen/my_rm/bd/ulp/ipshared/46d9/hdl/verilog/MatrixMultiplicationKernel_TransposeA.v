// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_TransposeA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        aSplit_0_dout,
        aSplit_0_num_data_valid,
        aSplit_0_fifo_cap,
        aSplit_0_empty_n,
        aSplit_0_read,
        aSplit_1_dout,
        aSplit_1_num_data_valid,
        aSplit_1_fifo_cap,
        aSplit_1_empty_n,
        aSplit_1_read,
        aSplit_2_dout,
        aSplit_2_num_data_valid,
        aSplit_2_fifo_cap,
        aSplit_2_empty_n,
        aSplit_2_read,
        aSplit_3_dout,
        aSplit_3_num_data_valid,
        aSplit_3_fifo_cap,
        aSplit_3_empty_n,
        aSplit_3_read,
        aSplit_4_dout,
        aSplit_4_num_data_valid,
        aSplit_4_fifo_cap,
        aSplit_4_empty_n,
        aSplit_4_read,
        aSplit_5_dout,
        aSplit_5_num_data_valid,
        aSplit_5_fifo_cap,
        aSplit_5_empty_n,
        aSplit_5_read,
        aSplit_6_dout,
        aSplit_6_num_data_valid,
        aSplit_6_fifo_cap,
        aSplit_6_empty_n,
        aSplit_6_read,
        aSplit_7_dout,
        aSplit_7_num_data_valid,
        aSplit_7_fifo_cap,
        aSplit_7_empty_n,
        aSplit_7_read,
        aSplit_8_dout,
        aSplit_8_num_data_valid,
        aSplit_8_fifo_cap,
        aSplit_8_empty_n,
        aSplit_8_read,
        aSplit_9_dout,
        aSplit_9_num_data_valid,
        aSplit_9_fifo_cap,
        aSplit_9_empty_n,
        aSplit_9_read,
        aSplit_10_dout,
        aSplit_10_num_data_valid,
        aSplit_10_fifo_cap,
        aSplit_10_empty_n,
        aSplit_10_read,
        aSplit_11_dout,
        aSplit_11_num_data_valid,
        aSplit_11_fifo_cap,
        aSplit_11_empty_n,
        aSplit_11_read,
        aSplit_12_dout,
        aSplit_12_num_data_valid,
        aSplit_12_fifo_cap,
        aSplit_12_empty_n,
        aSplit_12_read,
        aSplit_13_dout,
        aSplit_13_num_data_valid,
        aSplit_13_fifo_cap,
        aSplit_13_empty_n,
        aSplit_13_read,
        aSplit_14_dout,
        aSplit_14_num_data_valid,
        aSplit_14_fifo_cap,
        aSplit_14_empty_n,
        aSplit_14_read,
        aSplit_15_dout,
        aSplit_15_num_data_valid,
        aSplit_15_fifo_cap,
        aSplit_15_empty_n,
        aSplit_15_read,
        aPipes_0_din,
        aPipes_0_num_data_valid,
        aPipes_0_fifo_cap,
        aPipes_0_full_n,
        aPipes_0_write,
        size_n_dout,
        size_n_num_data_valid,
        size_n_fifo_cap,
        size_n_empty_n,
        size_n_read,
        size_k_dout,
        size_k_num_data_valid,
        size_k_fifo_cap,
        size_k_empty_n,
        size_k_read,
        size_m_dout,
        size_m_num_data_valid,
        size_m_fifo_cap,
        size_m_empty_n,
        size_m_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] aSplit_0_dout;
input  [10:0] aSplit_0_num_data_valid;
input  [10:0] aSplit_0_fifo_cap;
input   aSplit_0_empty_n;
output   aSplit_0_read;
input  [31:0] aSplit_1_dout;
input  [10:0] aSplit_1_num_data_valid;
input  [10:0] aSplit_1_fifo_cap;
input   aSplit_1_empty_n;
output   aSplit_1_read;
input  [31:0] aSplit_2_dout;
input  [10:0] aSplit_2_num_data_valid;
input  [10:0] aSplit_2_fifo_cap;
input   aSplit_2_empty_n;
output   aSplit_2_read;
input  [31:0] aSplit_3_dout;
input  [10:0] aSplit_3_num_data_valid;
input  [10:0] aSplit_3_fifo_cap;
input   aSplit_3_empty_n;
output   aSplit_3_read;
input  [31:0] aSplit_4_dout;
input  [10:0] aSplit_4_num_data_valid;
input  [10:0] aSplit_4_fifo_cap;
input   aSplit_4_empty_n;
output   aSplit_4_read;
input  [31:0] aSplit_5_dout;
input  [10:0] aSplit_5_num_data_valid;
input  [10:0] aSplit_5_fifo_cap;
input   aSplit_5_empty_n;
output   aSplit_5_read;
input  [31:0] aSplit_6_dout;
input  [10:0] aSplit_6_num_data_valid;
input  [10:0] aSplit_6_fifo_cap;
input   aSplit_6_empty_n;
output   aSplit_6_read;
input  [31:0] aSplit_7_dout;
input  [10:0] aSplit_7_num_data_valid;
input  [10:0] aSplit_7_fifo_cap;
input   aSplit_7_empty_n;
output   aSplit_7_read;
input  [31:0] aSplit_8_dout;
input  [10:0] aSplit_8_num_data_valid;
input  [10:0] aSplit_8_fifo_cap;
input   aSplit_8_empty_n;
output   aSplit_8_read;
input  [31:0] aSplit_9_dout;
input  [10:0] aSplit_9_num_data_valid;
input  [10:0] aSplit_9_fifo_cap;
input   aSplit_9_empty_n;
output   aSplit_9_read;
input  [31:0] aSplit_10_dout;
input  [10:0] aSplit_10_num_data_valid;
input  [10:0] aSplit_10_fifo_cap;
input   aSplit_10_empty_n;
output   aSplit_10_read;
input  [31:0] aSplit_11_dout;
input  [10:0] aSplit_11_num_data_valid;
input  [10:0] aSplit_11_fifo_cap;
input   aSplit_11_empty_n;
output   aSplit_11_read;
input  [31:0] aSplit_12_dout;
input  [10:0] aSplit_12_num_data_valid;
input  [10:0] aSplit_12_fifo_cap;
input   aSplit_12_empty_n;
output   aSplit_12_read;
input  [31:0] aSplit_13_dout;
input  [10:0] aSplit_13_num_data_valid;
input  [10:0] aSplit_13_fifo_cap;
input   aSplit_13_empty_n;
output   aSplit_13_read;
input  [31:0] aSplit_14_dout;
input  [10:0] aSplit_14_num_data_valid;
input  [10:0] aSplit_14_fifo_cap;
input   aSplit_14_empty_n;
output   aSplit_14_read;
input  [31:0] aSplit_15_dout;
input  [10:0] aSplit_15_num_data_valid;
input  [10:0] aSplit_15_fifo_cap;
input   aSplit_15_empty_n;
output   aSplit_15_read;
output  [31:0] aPipes_0_din;
input  [2:0] aPipes_0_num_data_valid;
input  [2:0] aPipes_0_fifo_cap;
input   aPipes_0_full_n;
output   aPipes_0_write;
input  [31:0] size_n_dout;
input  [2:0] size_n_num_data_valid;
input  [2:0] size_n_fifo_cap;
input   size_n_empty_n;
output   size_n_read;
input  [31:0] size_k_dout;
input  [2:0] size_k_num_data_valid;
input  [2:0] size_k_fifo_cap;
input   size_k_empty_n;
output   size_k_read;
input  [31:0] size_m_dout;
input  [2:0] size_m_num_data_valid;
input  [2:0] size_m_fifo_cap;
input   size_m_empty_n;
output   size_m_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg aSplit_0_read;
reg aSplit_1_read;
reg aSplit_2_read;
reg aSplit_3_read;
reg aSplit_4_read;
reg aSplit_5_read;
reg aSplit_6_read;
reg aSplit_7_read;
reg aSplit_8_read;
reg aSplit_9_read;
reg aSplit_10_read;
reg aSplit_11_read;
reg aSplit_12_read;
reg aSplit_13_read;
reg aSplit_14_read;
reg aSplit_15_read;
reg aPipes_0_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_n_blk_n;
reg    size_k_blk_n;
reg    size_m_blk_n;
reg   [31:0] size_k_1_reg_211;
reg    ap_block_state1;
reg   [23:0] trunc_ln_reg_217;
reg   [23:0] trunc_ln2_reg_222;
wire   [40:0] tmp_fu_187_p3;
reg   [40:0] tmp_reg_227;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_138_p2;
reg   [63:0] bound4_reg_242;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [86:0] grp_fu_142_p2;
reg   [86:0] bound16_reg_258;
wire    ap_CS_fsm_state8;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_idle;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_ready;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_14_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_13_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_12_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_11_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_10_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_9_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_8_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_7_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_6_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_5_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_4_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_3_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_2_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_1_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_0_read;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_15_read;
wire   [31:0] grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_din;
wire    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_write;
reg    grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    size_m_read_local;
reg    size_k_read_local;
reg    size_n_read_local;
wire   [23:0] grp_fu_138_p0;
wire   [40:0] grp_fu_138_p1;
wire   [23:0] grp_fu_142_p0;
wire   [63:0] grp_fu_142_p1;
wire   [32:0] zext_ln111_fu_147_p1;
wire   [32:0] add_ln111_fu_151_p2;
wire   [32:0] zext_ln116_fu_167_p1;
wire   [32:0] add_ln116_fu_171_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire   [63:0] grp_fu_138_p00;
wire   [63:0] grp_fu_138_p10;
wire   [86:0] grp_fu_142_p00;
wire   [86:0] grp_fu_142_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg = 1'b0;
end

MatrixMultiplicationKernel_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1 grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start),
    .ap_done(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done),
    .ap_idle(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_idle),
    .ap_ready(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_ready),
    .aSplit_14_dout(aSplit_14_dout),
    .aSplit_14_num_data_valid(11'd0),
    .aSplit_14_fifo_cap(11'd0),
    .aSplit_14_empty_n(aSplit_14_empty_n),
    .aSplit_14_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_14_read),
    .aSplit_13_dout(aSplit_13_dout),
    .aSplit_13_num_data_valid(11'd0),
    .aSplit_13_fifo_cap(11'd0),
    .aSplit_13_empty_n(aSplit_13_empty_n),
    .aSplit_13_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_13_read),
    .aSplit_12_dout(aSplit_12_dout),
    .aSplit_12_num_data_valid(11'd0),
    .aSplit_12_fifo_cap(11'd0),
    .aSplit_12_empty_n(aSplit_12_empty_n),
    .aSplit_12_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_12_read),
    .aSplit_11_dout(aSplit_11_dout),
    .aSplit_11_num_data_valid(11'd0),
    .aSplit_11_fifo_cap(11'd0),
    .aSplit_11_empty_n(aSplit_11_empty_n),
    .aSplit_11_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_11_read),
    .aSplit_10_dout(aSplit_10_dout),
    .aSplit_10_num_data_valid(11'd0),
    .aSplit_10_fifo_cap(11'd0),
    .aSplit_10_empty_n(aSplit_10_empty_n),
    .aSplit_10_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_10_read),
    .aSplit_9_dout(aSplit_9_dout),
    .aSplit_9_num_data_valid(11'd0),
    .aSplit_9_fifo_cap(11'd0),
    .aSplit_9_empty_n(aSplit_9_empty_n),
    .aSplit_9_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_9_read),
    .aSplit_8_dout(aSplit_8_dout),
    .aSplit_8_num_data_valid(11'd0),
    .aSplit_8_fifo_cap(11'd0),
    .aSplit_8_empty_n(aSplit_8_empty_n),
    .aSplit_8_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_8_read),
    .aSplit_7_dout(aSplit_7_dout),
    .aSplit_7_num_data_valid(11'd0),
    .aSplit_7_fifo_cap(11'd0),
    .aSplit_7_empty_n(aSplit_7_empty_n),
    .aSplit_7_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_7_read),
    .aSplit_6_dout(aSplit_6_dout),
    .aSplit_6_num_data_valid(11'd0),
    .aSplit_6_fifo_cap(11'd0),
    .aSplit_6_empty_n(aSplit_6_empty_n),
    .aSplit_6_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_6_read),
    .aSplit_5_dout(aSplit_5_dout),
    .aSplit_5_num_data_valid(11'd0),
    .aSplit_5_fifo_cap(11'd0),
    .aSplit_5_empty_n(aSplit_5_empty_n),
    .aSplit_5_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_5_read),
    .aSplit_4_dout(aSplit_4_dout),
    .aSplit_4_num_data_valid(11'd0),
    .aSplit_4_fifo_cap(11'd0),
    .aSplit_4_empty_n(aSplit_4_empty_n),
    .aSplit_4_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_4_read),
    .aSplit_3_dout(aSplit_3_dout),
    .aSplit_3_num_data_valid(11'd0),
    .aSplit_3_fifo_cap(11'd0),
    .aSplit_3_empty_n(aSplit_3_empty_n),
    .aSplit_3_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_3_read),
    .aSplit_2_dout(aSplit_2_dout),
    .aSplit_2_num_data_valid(11'd0),
    .aSplit_2_fifo_cap(11'd0),
    .aSplit_2_empty_n(aSplit_2_empty_n),
    .aSplit_2_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_2_read),
    .aSplit_1_dout(aSplit_1_dout),
    .aSplit_1_num_data_valid(11'd0),
    .aSplit_1_fifo_cap(11'd0),
    .aSplit_1_empty_n(aSplit_1_empty_n),
    .aSplit_1_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_1_read),
    .aSplit_0_dout(aSplit_0_dout),
    .aSplit_0_num_data_valid(11'd0),
    .aSplit_0_fifo_cap(11'd0),
    .aSplit_0_empty_n(aSplit_0_empty_n),
    .aSplit_0_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_0_read),
    .aSplit_15_dout(aSplit_15_dout),
    .aSplit_15_num_data_valid(11'd0),
    .aSplit_15_fifo_cap(11'd0),
    .aSplit_15_empty_n(aSplit_15_empty_n),
    .aSplit_15_read(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_15_read),
    .aPipes_0_din(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_din),
    .aPipes_0_num_data_valid(3'd0),
    .aPipes_0_fifo_cap(3'd0),
    .aPipes_0_full_n(aPipes_0_full_n),
    .aPipes_0_write(grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_write),
    .bound16(bound16_reg_258),
    .bound4(bound4_reg_242),
    .size_k_1(size_k_1_reg_211),
    .bound(tmp_reg_227)
);

MatrixMultiplicationKernel_mul_24ns_41ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 41 ),
    .dout_WIDTH( 64 ))
mul_24ns_41ns_64_2_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .din1(grp_fu_138_p1),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

MatrixMultiplicationKernel_mul_24ns_64ns_87_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 87 ))
mul_24ns_64ns_87_5_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_ready == 1'b1)) begin
            grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bound16_reg_258 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound4_reg_242 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        size_k_1_reg_211 <= size_k_dout;
        trunc_ln2_reg_222 <= {{add_ln116_fu_171_p2[32:9]}};
        trunc_ln_reg_217 <= {{add_ln111_fu_151_p2[32:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_227[40 : 9] <= tmp_fu_187_p3[40 : 9];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aPipes_0_write = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_write;
    end else begin
        aPipes_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_0_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_0_read;
    end else begin
        aSplit_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_10_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_10_read;
    end else begin
        aSplit_10_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_11_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_11_read;
    end else begin
        aSplit_11_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_12_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_12_read;
    end else begin
        aSplit_12_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_13_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_13_read;
    end else begin
        aSplit_13_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_14_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_14_read;
    end else begin
        aSplit_14_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_15_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_15_read;
    end else begin
        aSplit_15_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_1_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_1_read;
    end else begin
        aSplit_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_2_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_2_read;
    end else begin
        aSplit_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_3_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_3_read;
    end else begin
        aSplit_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_4_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_4_read;
    end else begin
        aSplit_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_5_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_5_read;
    end else begin
        aSplit_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_6_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_6_read;
    end else begin
        aSplit_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_7_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_7_read;
    end else begin
        aSplit_7_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_8_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_8_read;
    end else begin
        aSplit_8_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        aSplit_9_read = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aSplit_9_read;
    end else begin
        aSplit_9_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_k_blk_n = size_k_empty_n;
    end else begin
        size_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        size_k_read_local = 1'b1;
    end else begin
        size_k_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_m_blk_n = size_m_empty_n;
    end else begin
        size_m_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        size_m_read_local = 1'b1;
    end else begin
        size_m_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_n_blk_n = size_n_empty_n;
    end else begin
        size_n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        size_n_read_local = 1'b1;
    end else begin
        size_n_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign aPipes_0_din = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_aPipes_0_din;

assign add_ln111_fu_151_p2 = (zext_ln111_fu_147_p1 + 33'd511);

assign add_ln116_fu_171_p2 = (zext_ln116_fu_167_p1 + 33'd511);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (size_m_empty_n == 1'b0) | (size_k_empty_n == 1'b0) | (size_n_empty_n == 1'b0));
end

assign grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start = grp_TransposeA_Pipeline_TransposeA_N0_TransposeA_M0_TransposeA_K_VITIS_LOOP_153_1_fu_96_ap_start_reg;

assign grp_fu_138_p0 = grp_fu_138_p00;

assign grp_fu_138_p00 = trunc_ln2_reg_222;

assign grp_fu_138_p1 = grp_fu_138_p10;

assign grp_fu_138_p10 = tmp_fu_187_p3;

assign grp_fu_142_p0 = grp_fu_142_p00;

assign grp_fu_142_p00 = trunc_ln_reg_217;

assign grp_fu_142_p1 = grp_fu_142_p10;

assign grp_fu_142_p10 = bound4_reg_242;

assign size_k_read = size_k_read_local;

assign size_m_read = size_m_read_local;

assign size_n_read = size_n_read_local;

assign tmp_fu_187_p3 = {{size_k_1_reg_211}, {9'd0}};

assign zext_ln111_fu_147_p1 = size_n_dout;

assign zext_ln116_fu_167_p1 = size_m_dout;

always @ (posedge ap_clk) begin
    tmp_reg_227[8:0] <= 9'b000000000;
end

endmodule //MatrixMultiplicationKernel_TransposeA
