// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module MatrixMultiplicationKernel_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bFeed_dout,
        bFeed_num_data_valid,
        bFeed_fifo_cap,
        bFeed_empty_n,
        bFeed_read,
        bPipes_0_din,
        bPipes_0_num_data_valid,
        bPipes_0_fifo_cap,
        bPipes_0_full_n,
        bPipes_0_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] bFeed_dout;
input  [2:0] bFeed_num_data_valid;
input  [2:0] bFeed_fifo_cap;
input   bFeed_empty_n;
output   bFeed_read;
output  [255:0] bPipes_0_din;
input  [2:0] bPipes_0_num_data_valid;
input  [2:0] bPipes_0_fifo_cap;
input   bPipes_0_full_n;
output   bPipes_0_write;
output  [5:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [255:0] buffer_r_d0;
output  [5:0] buffer_r_address1;
output   buffer_r_ce1;
input  [255:0] buffer_r_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln420_reg_228;
reg   [0:0] icmp_ln420_reg_228_pp0_iter1_reg;
reg   [0:0] cmp31_reg_232;
reg    ap_predicate_op40_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln420_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    bPipes_0_blk_n;
wire    ap_block_pp0_stage0;
reg    bFeed_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] cmp31_fu_180_p2;
wire   [63:0] zext_ln422_fu_186_p1;
reg   [63:0] zext_ln422_reg_236;
wire   [255:0] ap_phi_reg_pp0_iter0_val_2_reg_101;
reg   [255:0] ap_phi_reg_pp0_iter1_val_2_reg_101;
reg   [255:0] ap_phi_reg_pp0_iter2_val_2_reg_101;
reg   [255:0] ap_phi_reg_pp0_iter3_val_2_reg_101;
reg   [6:0] m1_fu_50;
wire   [6:0] add_ln422_fu_191_p2;
wire    ap_loop_init;
reg   [4:0] n1_02_fu_54;
wire   [4:0] select_ln420_1_fu_172_p3;
reg   [10:0] indvar_flatten_fu_58;
wire   [10:0] add_ln420_fu_135_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    bFeed_read_local;
reg    ap_block_pp0_stage0_01001;
reg    bPipes_0_write_local;
reg    buffer_r_ce1_local;
reg    buffer_r_we0_local;
reg    buffer_r_ce0_local;
wire   [0:0] icmp_ln422_fu_152_p2;
wire   [4:0] add_ln420_1_fu_166_p2;
wire   [6:0] select_ln420_fu_158_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 m1_fu_50 = 7'd0;
#0 n1_02_fu_54 = 5'd0;
#0 indvar_flatten_fu_58 = 11'd0;
#0 ap_done_reg = 1'b0;
end

MatrixMultiplicationKernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((cmp31_reg_232 == 1'd0) & (icmp_ln420_reg_228_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_2_reg_101 <= buffer_r_q1;
        end else if (((cmp31_reg_232 == 1'd1) & (icmp_ln420_reg_228_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_2_reg_101 <= bFeed_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_2_reg_101 <= ap_phi_reg_pp0_iter2_val_2_reg_101;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln420_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_58 <= add_ln420_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_58 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m1_fu_50 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            m1_fu_50 <= add_ln422_fu_191_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            n1_02_fu_54 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            n1_02_fu_54 <= select_ln420_1_fu_172_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cmp31_reg_232 <= cmp31_fu_180_p2;
        icmp_ln420_reg_228 <= icmp_ln420_fu_129_p2;
        icmp_ln420_reg_228_pp0_iter1_reg <= icmp_ln420_reg_228;
        zext_ln422_reg_236[6 : 0] <= zext_ln422_fu_186_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_2_reg_101 <= ap_phi_reg_pp0_iter0_val_2_reg_101;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_val_2_reg_101 <= ap_phi_reg_pp0_iter1_val_2_reg_101;
    end
end

always @ (*) begin
    if (((icmp_ln420_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bFeed_blk_n = bFeed_empty_n;
    end else begin
        bFeed_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op40_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bFeed_read_local = 1'b1;
    end else begin
        bFeed_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bPipes_0_blk_n = bPipes_0_full_n;
    end else begin
        bPipes_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bPipes_0_write_local = 1'b1;
    end else begin
        bPipes_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce1_local = 1'b1;
    end else begin
        buffer_r_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp31_reg_232 == 1'd1) & (icmp_ln420_reg_228_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_r_we0_local = 1'b1;
    end else begin
        buffer_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln420_1_fu_166_p2 = (n1_02_fu_54 + 5'd1);

assign add_ln420_fu_135_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln422_fu_191_p2 = (select_ln420_fu_158_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op40_read_state3 == 1'b1) & (bFeed_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (bPipes_0_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_val_2_reg_101 = 'bx;

always @ (*) begin
    ap_predicate_op40_read_state3 = ((cmp31_reg_232 == 1'd1) & (icmp_ln420_reg_228_pp0_iter1_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bFeed_read = bFeed_read_local;

assign bPipes_0_din = ap_phi_reg_pp0_iter3_val_2_reg_101;

assign bPipes_0_write = bPipes_0_write_local;

assign buffer_r_address0 = zext_ln422_reg_236;

assign buffer_r_address1 = zext_ln422_fu_186_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_ce1 = buffer_r_ce1_local;

assign buffer_r_d0 = bFeed_dout;

assign buffer_r_we0 = buffer_r_we0_local;

assign cmp31_fu_180_p2 = ((select_ln420_1_fu_172_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln420_fu_129_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln422_fu_152_p2 = ((m1_fu_50 == 7'd64) ? 1'b1 : 1'b0);

assign select_ln420_1_fu_172_p3 = ((icmp_ln422_fu_152_p2[0:0] == 1'b1) ? add_ln420_1_fu_166_p2 : n1_02_fu_54);

assign select_ln420_fu_158_p3 = ((icmp_ln422_fu_152_p2[0:0] == 1'b1) ? 7'd0 : m1_fu_50);

assign zext_ln422_fu_186_p1 = select_ln420_fu_158_p3;

always @ (posedge ap_clk) begin
    zext_ln422_reg_236[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //MatrixMultiplicationKernel_FeedB_Pipeline_FeedB_Pipeline_N_FeedB_Pipeline_M
